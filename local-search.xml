<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java Script 的 null 和 undefined 随想</title>
    <link href="/2022/08/30/thoughts/java-script-null-undefine/"/>
    <url>/2022/08/30/thoughts/java-script-null-undefine/</url>
    
    <content type="html"><![CDATA[<p>有些时候感觉一些语言里看起来很蠢的设计，实际上却能解决一些很有意思的场景。比如 JavaScript 的 null 和 undefined，虽然看起来都是表示空的意思，但是实际上却解决了“没有这个值”，“这个值为空”这样两种语义。在缓存穿透的问题上，如果 redis、memcached 等数据库也有这样一层设计等话，是不是就能解决 null 穿透问题了呢</p>]]></content>
    
    
    
    <tags>
      
      <tag>随想</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次 SQL LEFT JOIN 没有得到预期结果的错误</title>
    <link href="/2022/05/29/develop-note/sql-left-join-fail/"/>
    <url>/2022/05/29/develop-note/sql-left-join-fail/</url>
    
    <content type="html"><![CDATA[<p>最近在业务中做数据开发的时候，写了一个 SQL 但是没有得到预期的结果，大致如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs asciidoc">表 a<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br>| id | name | tid |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br>|  1 |  aaa | 101 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br>|  2 |  bbb | 102 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br>|  3 |  ccc | 103 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">表 b<br><span class="hljs-code">+------+</span>------<span class="hljs-code">+-------+</span><br>|   id | nick |  type |<br><span class="hljs-code">+------+</span>------<span class="hljs-code">+-------+</span><br>| 1001 |  abc | false |<br><span class="hljs-code">+------+</span>------<span class="hljs-code">+-------+</span><br>| 1002 |  edf |  true |<br><span class="hljs-code">+------+</span>------<span class="hljs-code">+-------+</span><br>| 1003 |  xyz |  true |<br><span class="hljs-code">+------+</span>------<span class="hljs-code">+-------+</span><br></code></pre></td></tr></table></figure><p>然后圈选的 SQL 的为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    a.name<br>    b.nick<br><span class="hljs-keyword">FROM</span><br>    a<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>    b<br><span class="hljs-keyword">ON</span><br>    a.tid = b.id<br><span class="hljs-keyword">WHERE</span><br>    b.type = <span class="hljs-string">&quot;true&quot;</span><br>;<br></code></pre></td></tr></table></figure><p>本意上，通过 <code>LEFT JOIN</code> ，即使没有找到，也应该正常返回数据，但是实际上没有返回任何数据</p><p>因为 WHERE 条件是在 <code>JOIN</code> 之后发生的，所以实际上，因为 <code>LEFT JOIN</code> 拿不到数据，所以所有列的 <code>b.type</code> 都是 <code>NULL</code>，当然就不是 <code>true</code></p><p>此时可以拆分这两个条件，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">@true_b :=<br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-keyword">id</span>,<br>    nick<br><span class="hljs-keyword">FROM</span><br>    b<br><span class="hljs-keyword">WHERE</span><br>    <span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;true&quot;</span><br>;<br><br>SELCT<br>    a.name<br>    c.nick<br>FROM<br>    a<br>LEFT JOIN<br>    @true_b c<br>ON<br>    a.tid = c.id<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round#706(Div. 2)-Let&#39;s Go Hiking</title>
    <link href="/2022/05/28/acm/CodeforcesRound789(Div.%202)-B2.%20Tokitsukaze%20and%20Good%2001-String%20(hard%20version)/"/>
    <url>/2022/05/28/acm/CodeforcesRound789(Div.%202)-B2.%20Tokitsukaze%20and%20Good%2001-String%20(hard%20version)/</url>
    
    <content type="html"><![CDATA[<h1 id="B2-Tokitsukaze-and-Good-01-String-hard-version"><a href="#B2-Tokitsukaze-and-Good-01-String-hard-version" class="headerlink" title="B2. Tokitsukaze and Good 01-String (hard version)"></a>B2. Tokitsukaze and Good 01-String (hard version)</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有一段 01 组成的字符串，保证长度为偶数</p><p>你可以选择一个 0 或者 1，将其变为 1 或者 0</p><p>问至少需要操作几次，可以使得所有的 0 或者 1 段都为偶数长度。同时，此时，最少有多少段单独段 0 或 1 段</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先，因为总长度为偶数，所以奇数段一定是成对出现的，可以简单讨论五种情况</p><ul><li>改变一个奇数段内部，可以生成两个偶数段一个奇数段</li><li>改变一个偶数段内部，可以生成两个奇数段和一个偶数段</li><li>改变两个偶数段边缘，可以生成两个奇数段</li><li>改变两个奇数段边缘，可以生成两个偶数段</li><li>改变奇偶段边缘，可以交换奇偶关系</li></ul><p>这几种方法中，只有改变两个奇数段边缘是有意义的，但是并不一定每次都那么好运。所以必须选择一种方法去将两个离得很远的奇数段靠近</p><p>明显只有第一个和最后一个可选，在不产生新的奇数段的前提下改变位置。但是第一个明显有点蠢……因为生成的奇数段在原奇数段内部（仅一个 0 或者 1），所以只能选最后一种方案</p><p>所以我们需要选择两个奇数段，然后通过方法五将它们贴近到相邻，然后再用方法四消灭它们，所需要的数量也就是奇数段之间的偶数段个数 + 1</p><p>数量解决了，接下来就是分配如何变化使得数量最少了。因为对于每一个奇数段而言，只会改变一个，而对于偶数段而言，两侧边缘都需要发生变化，所以</p><p>当奇数段的长度为 1 的时候，变化此奇数段，当偶数段长度为 2 的时候，左右两侧都变化此偶数段。然后再统计不同的奇偶段数量即可</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-built_in">string</span> str;<br>        str.resize(n);<br>        <span class="hljs-built_in">cin</span> &gt;&gt; str;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; st;<br>        <span class="hljs-keyword">char</span> last = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (str[i] == last) &#123;<br>                st.back()++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                st.push_back(<span class="hljs-number">1</span>);<br>                last = str[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> isOdd = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; st.size(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (st[i] % <span class="hljs-number">2</span>) &#123;<br>                isOdd = !isOdd;<br>                <span class="hljs-keyword">if</span> (st[i] == <span class="hljs-number">1</span>) st[i] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isOdd) &#123;<br>                <span class="hljs-keyword">if</span> (st[i] == <span class="hljs-number">2</span>) st[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>            ans += isOdd;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ls = <span class="hljs-number">-1</span>, cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; st.size(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (st[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (ls != (i % <span class="hljs-number">2</span>)) &#123;<br>                ls = i % <span class="hljs-number">2</span>;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; max(<span class="hljs-number">1L</span>L, cnt) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">cout</span>.tie(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> ACM_LOCAL</span><br>    freopen(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">signed</span> localTestCount = <span class="hljs-number">1</span>, localReadPos = (<span class="hljs-keyword">signed</span>) <span class="hljs-built_in">cin</span>.tellg();<br>    <span class="hljs-keyword">char</span> localTryReadChar;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (localTestCount &gt; <span class="hljs-number">20</span>)<br>            <span class="hljs-keyword">throw</span> runtime_error(<span class="hljs-string">&quot;Check the std input!!!&quot;</span>);<br>        <span class="hljs-keyword">auto</span> startClockForDebug = clock();<br>        solve();<br>        <span class="hljs-keyword">auto</span> endClockForDebug = clock();<br>        <span class="hljs-built_in">cerr</span> &lt;&lt; <span class="hljs-string">&quot;Test &quot;</span> &lt;&lt; localTestCount++ &lt;&lt; <span class="hljs-string">&quot; Run Time: &quot;</span><br>             &lt;&lt; <span class="hljs-keyword">double</span>(endClockForDebug - startClockForDebug) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//        cout &lt;&lt; &quot;Test &quot; &lt;&lt; localTestCount &lt;&lt; &quot; successful&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//        cout &lt;&lt; &quot;--------------------------------------------------&quot; &lt;&lt; endl;</span><br>    &#125; <span class="hljs-keyword">while</span> (localReadPos != <span class="hljs-built_in">cin</span>.tellg() &amp;&amp; <span class="hljs-built_in">cin</span> &gt;&gt; localTryReadChar &amp;&amp; localTryReadChar != <span class="hljs-string">&#x27;$&#x27;</span> &amp;&amp;<br>             <span class="hljs-built_in">cin</span>.putback(localTryReadChar));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    solve();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCC/G++ 预编译头性能优化</title>
    <link href="/2022/04/30/cpp/gcc-precompile/"/>
    <url>/2022/04/30/cpp/gcc-precompile/</url>
    
    <content type="html"><![CDATA[<p>最近一直在搞 OJ，为了一个高效的、安全的沙盒编译环境操碎了心，终于实现了一个安全的且对运行影响非常低的沙盒，但是发现程序的编译效率非常的低。</p><p>最后通过查阅各种的博客，终于发现了一个非常高效的解决方案</p><h1 id="万能头文件问题"><a href="#万能头文件问题" class="headerlink" title="万能头文件问题"></a>万能头文件问题</h1><p>在 OJ 的任务中，很多 ACMer 为了方便起见，经常使用万能头文件 <code>bits/stdc++.h</code>。</p><p>当然这个头文件之前也惹过一次麻烦，就是著名的银川线上赛的 5 元学生机 OJ 事件，使用了 <code>bits/stdc++.h</code> 的编译效率非常低，因为这个头文件本身包含了太多的东西，罗列如下</p><p>（推荐直接点目录跳转到下一章）</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle">. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/stdc++.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cassert<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/c++config.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/os_defines.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude/features.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>sys/cdefs.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/<span class="hljs-keyword">long</span>-<span class="hljs-keyword">double</span>.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/g</span>nu/stubs.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/g</span>nu/stubs-<span class="hljs-number">64</span>.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/cpu_defines.h<br>... <span class="hljs-regexp">/usr/i</span>nclude/assert.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cctype<br>... <span class="hljs-regexp">/usr/i</span>nclude/ctype.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/types.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/typesizes.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude/endian.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/endian.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/byteswap.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/byteswap-<span class="hljs-number">16</span>.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/uintn-identity.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>locale_t.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>__locale_t.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cerrno<br>... <span class="hljs-regexp">/usr/i</span>nclude/errno.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/errno.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/linux/</span>errno.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>asm/errno.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/asm-generic/</span>errno.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/asm-generic/</span>errno-base.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cfloat<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/<span class="hljs-keyword">float</span>.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ciso646<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/climits<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude-fixed/limits.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude-fixed/syslimits.h<br>..... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude-fixed/limits.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude/limits.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/posix1_lim.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/local_lim.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/linux/</span>limits.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/posix2_lim.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/xopen_lim.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/uio_lim.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/clocale<br>... <span class="hljs-regexp">/usr/i</span>nclude/locale.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/locale.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cmath<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>cpp_type_traits.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>type_traits.h<br>... <span class="hljs-regexp">/usr/i</span>nclude/math.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/math-vector.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libm-simd-decl-stubs.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/floatn.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/floatn-common.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/<span class="hljs-keyword">long</span>-<span class="hljs-keyword">double</span>.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/flt-eval-method.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/fp-logb.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/fp-fast.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls-helper-functions.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls-helper-functions.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls-helper-functions.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls-helper-functions.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/mathcalls.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/iscanonical.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>std_abs.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude/stdlib.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>..... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/waitflags.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/waitstatus.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>sys/types.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>clock_t.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>clockid_t.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>time_t.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>timer_t.h<br>...... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/stdint-intn.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>sys/select.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/select.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>sigset_t.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>__sigset_t.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>struct_timeval.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>struct_timespec.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>sys/sysmacros.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sysmacros.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/pthreadtypes.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/thread-shared-types.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/pthreadtypes-arch.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude/alloca.h<br>...... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/stdlib-<span class="hljs-keyword">float</span>.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/csetjmp<br>... <span class="hljs-regexp">/usr/i</span>nclude/setjmp.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/setjmp.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/csignal<br>... <span class="hljs-regexp">/usr/i</span>nclude/signal.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/signum.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/signum-generic.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>sig_atomic_t.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>siginfo_t.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>__sigval_t.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/siginfo-arch.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/siginfo-consts.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/siginfo-consts-arch.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>sigval_t.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>sigevent_t.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sigevent-consts.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sigaction.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sigcontext.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>stack_t.h<br>..... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>sys/ucontext.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sigstack.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/ss_flags.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>struct_sigstack.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sigthread.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdarg<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stdarg.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstddef<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdio<br>... <span class="hljs-regexp">/usr/i</span>nclude/stdio.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>__FILE.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span><span class="hljs-keyword">FILE</span>.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libio.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/_G_config.h<br>...... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>__mbstate_t.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/stdio_lim.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sys_errlist.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdlib<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstring<br>... <span class="hljs-regexp">/usr/i</span>nclude/string.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude/strings.h<br>..... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ctime<br>... <span class="hljs-regexp">/usr/i</span>nclude/time.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/time.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/timex.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>struct_tm.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>struct_itimerspec.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ccomplex<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/complex<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cmath<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/sstream<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/istream<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ios<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/iosfwd<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stringfwd.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/m</span>emoryfwd.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>postypes.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwchar<br>.......... <span class="hljs-regexp">/usr/i</span>nclude/wchar.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>........... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wchar.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/</span>wint_t.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits<span class="hljs-regexp">/types/m</span>bstate_t.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/exception<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>exception.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>exception_ptr.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>exception_defines.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>cxxabi_init_exception.h<br>.......... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/typeinfo<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>hash_bytes.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/<span class="hljs-keyword">new</span><br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/exception<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>nested_exception.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/m</span>ove.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>concept_check.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/type_traits<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>char_traits.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_algobase.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>functexcept.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>numeric_traits.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_pair.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_iterator_base_types.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_iterator_base_funcs.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/debug/</span>assertions.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_iterator.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>ptr_traits.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/debug/</span>debug.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>predefined_ops.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwchar<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdint<br>......... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stdint.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude/stdint.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/stdint-uintn.h<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>localefwd.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/c++locale.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/clocale<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cctype<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/i</span>os_base.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>atomicity.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/gthr.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/gthr-<span class="hljs-keyword">default</span>.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude/pthread.h<br>............ <span class="hljs-regexp">/usr/i</span>nclude/sched.h<br>............. <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>............. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/sched.h<br>............. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/cpu-set.h<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wordsize.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/atomic_word.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_classes.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/string<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>allocator.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/c++allocator.h<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>new_allocator.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>ostream_insert.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>cxxabi_forced.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_function.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/backward/</span>binders.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>range_access.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/initializer_list<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>basic_string.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>alloc_traits.h<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>alloc_traits.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>string_conversions.h<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdlib<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwchar<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdio<br>............ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cerrno<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>functional_hash.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>basic_string.tcc<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_classes.tcc<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/system_error<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/error_constants.h<br>.......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cerrno<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/stdexcept<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/streambuf<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>streambuf.tcc<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>basic_ios.h<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_facets.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwctype<br>.......... <span class="hljs-regexp">/usr/i</span>nclude/wctype.h<br>........... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/wctype-wchar.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cctype<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/ctype_base.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>streambuf_iterator.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/ctype_inline.h<br>......... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_facets.tcc<br>........ <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>basic_ios.tcc<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ostream<br>....... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>ostream.tcc<br>...... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/i</span>stream.tcc<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>sstream.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cfenv<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/fenv.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude/fenv.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/libc-header-start.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>bits/fenv.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cinttypes<br>... <span class="hljs-regexp">/usr/i</span>nclude/inttypes.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdalign<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stdalign.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdbool<br>... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stdbool.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ctgmath<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cmath<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cuchar<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwchar<br>... <span class="hljs-regexp">/usr/i</span>nclude/uchar.h<br>.... <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/gcc/</span>x86_64-linux-gnu<span class="hljs-regexp">/7/i</span>nclude/stddef.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwchar<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cwctype<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/algorithm<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/utility<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_relops.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_algo.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdlib<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>algorithmfwd.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_heap.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_tempbuf.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_construct.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>niform_int_dist.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/limits<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/bitset<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/deque<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_uninitialized.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_deque.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>deque.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/fstream<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>codecvt.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdio<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/basic_file.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/c++io.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdio<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>fstream.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/functional<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/tuple<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/array<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>ses_allocator.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/i</span>nvoke.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>std_function.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>refwrap.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/iomanip<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/locale<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_facets_nonio.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ctime<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/time_members.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/messages_members.h<br>...... <span class="hljs-regexp">/usr/i</span>nclude/libintl.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_facets_nonio.tcc<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>locale_conv.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stringfwd.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>allocator.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>codecvt.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>nique_ptr.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>quoted_string.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/iostream<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/iterator<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stream_iterator.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/list<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_list.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>allocated_ptr.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>aligned_buffer.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>list.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/map<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_tree.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_map.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_multimap.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/memory<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_raw_storage_iter.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/ext/</span>concurrence.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>nique_ptr.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>shared_ptr.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>shared_ptr_base.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>shared_ptr_atomic.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>atomic_base.h<br>..... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>atomic_lockfree_defines.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/backward/</span>auto_ptr.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/numeric<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_numeric.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/queue<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/vector<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_vector.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_bvector.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>vector.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_queue.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/set<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_set.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_multiset.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/stack<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>stl_stack.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/valarray<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cmath<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>valarray_array.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdlib<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>valarray_array.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>valarray_before.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>slice_array.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>valarray_after.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/g</span>slice.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/g</span>slice_array.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/m</span>ask_array.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/i</span>ndirect_array.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/atomic<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/chrono<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ratio<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/ctime<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>parse_numbers.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/codecvt<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/condition_variable<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>std_mutex.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/forward_list<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>forward_list.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>forward_list.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/future<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/mutex<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/thread<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cerrno<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>atomic_futex.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/random<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cmath<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstdlib<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>random.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>c++<span class="hljs-regexp">/7/</span>bits/opt_random.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>random.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/regex<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/cstring<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_constants.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_error.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_automaton.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_automaton.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_scanner.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_scanner.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_compiler.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_compiler.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex.tcc<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_executor.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>regex_executor.tcc<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/scoped_allocator<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/typeindex<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/unordered_map<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>hashtable.h<br>.... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/</span>hashtable_policy.h<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>nordered_map.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/unordered_set<br>... <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span><span class="hljs-regexp">/bits/u</span>nordered_set.h<br>.. <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/c++/</span><span class="hljs-number">7</span>/shared_mutex<br></code></pre></td></tr></table></figure><p>大概就这些。。。</p><h1 id="预编译头文件"><a href="#预编译头文件" class="headerlink" title="预编译头文件"></a>预编译头文件</h1><p>查阅后发现其实 GCC/G++ 可以预编译头文件的，简单来说就是直接编译头文件成 gch 文件即可，即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/include/x86_64-linux-gnu/c++/9/bits<br>sudo g++ -std=c++17 stdc++.h<br></code></pre></td></tr></table></figure><p>而后正常使用编译命令即可，GCC/G++ 会<strong>自动</strong>使用预编译的内容</p><h1 id="耗时对比"><a href="#耗时对比" class="headerlink" title="耗时对比"></a>耗时对比</h1><p>同样的命令，同样的代码，仅使用了 <code>bits/stdc++.h</code> 的情况下，两者的耗时情况</p><p>先是不使用预编译的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m<span class="hljs-number">2</span>.<span class="hljs-number">476</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m<span class="hljs-number">1</span>.<span class="hljs-number">279</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m<span class="hljs-number">0</span>.<span class="hljs-number">154</span>s<br></code></pre></td></tr></table></figure><p>差不多 4s 的耗时</p><p>然后是使用来预编译的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m<span class="hljs-number">0</span>.<span class="hljs-number">668</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m<span class="hljs-number">0</span>.<span class="hljs-number">258</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m<span class="hljs-number">0</span>.<span class="hljs-number">065</span>s<br></code></pre></td></tr></table></figure><p>差不多 1s 的耗时</p><p>天差地别</p>]]></content>
    
    
    
    <tags>
      
      <tag>GCC/G++</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Junit5 和 Mockito 实现 SpringBoot 的单元测试最优美的解决方案</title>
    <link href="/2022/04/22/java/junit5-mockito/"/>
    <url>/2022/04/22/java/junit5-mockito/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是单元测试"><a href="#什么是单元测试" class="headerlink" title="什么是单元测试"></a>什么是单元测试</h1><p>单元测试就是一部分代码，但是它</p><ul><li>不会在正常的业务流程中被执行</li><li>不被打包进入最终的编译程序</li><li>不会被任何其他业务代码以任何方式导入</li><li>不会影响正常的代码</li></ul><p>当然，它通常还要满足下面这些条件</p><ul><li>自动化的，不需要人工输入任何数据即可完成</li><li>独立的，任何两个单元测试之间都不应该发生调用关系</li><li>可重复的，单元测试可以无限重复执行且结果应该一致</li></ul><p>传统的单元测试，即是测试一个函数是否正确运行。单元测试可以<strong>为这个函数预先伪造一个测试环境</strong>，例如用户登录了，且已经有超管权限了，那么运行这个函数是否能够得到我们期望得到的结果</p><p>注意上面这段文字中的提到的「为这个函数预先伪造一个测试环境」，这似乎不是很难理解，让我来举个例子：</p><blockquote><ul><li>例如我们现在希望测试登录能力，这是多数的服务中通常都有的能力，按照一般的编码规范，我们将会在 service 层进行逻辑判断。例如取出匹配此账号的数据库的值，并校验密码。</li><li><p>这是非常传统的做法，也同样足够的有效。接下来，让我们来为这个测试伪造一个环境</p><blockquote><ul><li>首先，我们在数据库中插入一个数据，当然，此时我们并不需要考虑到底插入了什么，因为我现在想要模拟假如没有此账号的似乎，登录的结果</li><li>然后，我们请求对应的接口，使用新的随机数据，当然，这时候我们期望得到的是失败的登录请求，因为我们输入的数据就是不存在的。</li></ul></blockquote></li><li><p>让我们来重新回顾整个过程，这个过程我们做了什么？我们访问了数据库！还修改了里面的数据！这太可怕了！</p></li><li>假如这件事放在业务上，我们需要在发布环境通过单元测试来校验代码是否合理的时候，我们还需要插入一条数据！这仅仅只是一个登录失败的测试，这太可怕了！</li><li>那有没有什么可能的方案来解决这个问题？</li><li>接下来就轮到 Mock 来伪造这个过程了</li><li>还是以登录失败为例，我们现在假定 service 是直接调用了 dao 层接口<blockquote><ul><li>首先，我们 mock 了用户的 dao 层接口，并指定「获取用户」的接口若传入 “ABC” 这个字符串，则返回不存在这个用户</li><li>然后我们调用用户的登录接口，并传入 “ABC” 作为账号</li><li>当用户的 service 遇到需要调用用户的 dao 接口时，会被上面设定的规则将会导致不再请求数据库，而是直接返回不存在</li><li>service 收到不存在后，包装好返回值，并返回</li></ul></blockquote></li><li>虽然看起来与刚才的，最终的结果是一样的，我们测试的代码几乎是相同的，但是我们却解决了最重要的问题——访问数据库</li></ul></blockquote><p>事实上，很多时候 mock 并不是解决这个问题的。我们希望单元测试能够单独测试一个函数是否逻辑正确，那么我们仅需要测试这个函数即可，当这个函数需要调用其他函数的时候，我们会对函数进行 mock 使得得到我们期望的值。这样就可以实现仅仅校验此函数的逻辑是否正确了</p><h1 id="单元测试的意义"><a href="#单元测试的意义" class="headerlink" title="单元测试的意义"></a>单元测试的意义</h1><ul><li>在不需要启动服务的情况下，检查代码逻辑是否有问题</li><li>保证代码在后续的迭代过程中，被其他人更新后导致原来可以正常运行的结果变得不正确了</li></ul><p>因为单元测试是负责完成代码测试的，所以当完整的单元测试写完之后，我们就可以通过单元测试来校验代码逻辑是否有问题</p><p>同时单元测试将会一直存在与源代码中，后续每一次需要进行校验发布时，都可以通过运行一次单元测试来检查是否因为本次修改，导致之前的逻辑出现错误</p><h1 id="单元测试的标准"><a href="#单元测试的标准" class="headerlink" title="单元测试的标准"></a>单元测试的标准</h1><ul><li>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元 测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</li><li>保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</li><li>单元测试是可以重复执行的，不能受到外界环境的影响。</li><li>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</li><li>单元测试代码必须写在如下工程目录:src/test/java，不允许写在业务代码目录下。</li><li>单元测试应当包含「边界值测试」、「正确的输入」、「强制错误信息输入」的测试，而不是仅仅以满足覆盖率为标准</li></ul><h1 id="你需要会哪些代码知识"><a href="#你需要会哪些代码知识" class="headerlink" title="你需要会哪些代码知识"></a>你需要会哪些代码知识</h1><p>本博客的知识范围是 SpringBoot 框架，所以你必须要掌握下面的技能</p><ul><li>能够熟练使用 Java 语言编写代码</li><li>了解 SpringBoot 的 AOP 的设计思想，会使用依赖注入</li><li>能够看懂上面的基本概念，了解单元测试的重要性</li><li>会使用 maven，并知道如何使用 maven</li><li>能够阅读中文，并能看懂本博客</li></ul><h1 id="开始写单元测试"><a href="#开始写单元测试" class="headerlink" title="开始写单元测试"></a>开始写单元测试</h1><p>单元测试的代码应该位于你的项目目录 <code>src/test/java</code> 下，接下来所有的内容目录都指此目录</p><h2 id="导入-maven-依赖"><a href="#导入-maven-依赖" class="headerlink" title="导入 maven 依赖"></a>导入 maven 依赖</h2><p>我们需要了解下面几个重要的依赖，但是并非都是需要添加的，请继续阅读</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Junit 5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Mockito 核心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Mockito 对 static 支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-inline<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring 对单元测试支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上这些依赖的相互依赖关系如下</p><pre><code class=" mermaid">graph LRc([mockito-inline]) ----&gt; b([mockito-core])d([spring-boot-starter-test]) ----&gt; b([mockito-core])d([spring-boot-starter-test]) ----&gt; a([junit-jupiter])</code></pre><p>所以，实际上你只需要最后两个依赖即可完成本片博客的所有内容，但是还是有必要详细解释一下这些依赖在本博客中起到的作用</p><ul><li>junit5：必须的组件，提供了最重要的注解和单元测试能力</li><li>mockito-core：必须的组件，提供了最重要的 Mock 的能力</li><li>mockito-inline：非必须组件，提供了对静态方法的 Mock 能力，如果不需要对静态方法进行 Mock 则可以不需要</li><li>spring-boot-starter-test：非必须组件，提供了对类的 private 变量的赋值能力，实际上反射也可以做到，但是通常为了方便期间，可以直接使用已经有的轮子</li></ul><p>当你确定好需要的依赖之后，将其最新版本添加到你的 maven 里吧</p><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><p>首先，需要进行逻辑测试的永远是某个实现类，而不是接口，因为接口并不是需要测试的，我们需要测试的是实现的过程是否有问题</p><p>创建类用来编写你的单元测试。通常我们会根据需要测试的类进行单独建测试类，即每一个类对应一个测试类，每一个测试类，仅测试对应类的方法。例如，我们有 <code>src/main/java/com/example/service/impl/UserServiceImpl.java</code> 类，那么我们创建 <code>src/test/java/com/example/service/impl/UserServiceImplTest.java</code> 用于测试 <code>UserServiceImpl</code> 类。</p><p>例如，我们创建了 <code>src/test/java/com/example/service/impl/UserServiceImplTest.java</code> 类用于测试对应的类。接下来我们需要介绍一些注解和类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExtendWith()</span> <span class="hljs-comment">// 来自 junit 5 的注解，用于测试类上，表示此测试需要额外使用什么扩展工具</span><br>MockitoExtension <span class="hljs-comment">// 来自 Mockito-core 的类，是 Mockito 的扩展工具，用于 junit 5 使用，junit 4 并不是这个</span><br><span class="hljs-meta">@BeforeAll</span> <span class="hljs-comment">// 来自 junit5 的注解，用于 static 方法上，表示在进行此类的所有测试方法前，执行一次此函数，仅一次</span><br><span class="hljs-meta">@AfterAll</span> <span class="hljs-comment">// 来自 junit 5 的注解，与 @BeforeAll 类似，但是表示所有测试方法结束后执行一次，仅一次</span><br><span class="hljs-meta">@BeforeEach</span> <span class="hljs-comment">// 来自 junit 5 的注解，用于非 static 方法上，表示在此类的所有测试方法将被执行前，每个都执行一次</span><br><span class="hljs-meta">@AfterEach</span> <span class="hljs-comment">// 来自 junit 5 的注解，与 @BeforeEach 类似，但是是在每个测试方法结束后，都执行一次</span><br><span class="hljs-meta">@Test</span> <span class="hljs-comment">// 来自 junit 5 的注解，用于非 static 方法上，表示此方法是一个测试</span><br></code></pre></td></tr></table></figure><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>接下来，按照上面的描述，为你的每个测试类都添加这些需要的注解，我们可以得到类似下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExtendWith(MockitoExtension.class)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImplTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 这里的代码将会在每个测试前运行</span><br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 这里的代码将会在每个测试结束后运行</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试登录，用户不存在的情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testLoginWithNoSuchUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 这里编写你的测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们已经完成了最基本的类的创建，虽然我们还没有开始调用登录的函数，但是我们已经完成类绝大部分的任务。</p><h2 id="注入类"><a href="#注入类" class="headerlink" title="注入类"></a>注入类</h2><p>接下来，让我们将需要测试的类注入进来</p><p>在类中最开头添加类似下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@InjectMocks</span><br><span class="hljs-keyword">private</span> UserServiceImpl userService; <span class="hljs-comment">// 需要测试的类，需要用 @InjectMocks 注解</span><br><br><span class="hljs-meta">@Mock</span><br><span class="hljs-keyword">private</span> UserDaoImpl userDao; <span class="hljs-comment">// 需要 mock 的类，需要用 @Mock 注解</span><br><br></code></pre></td></tr></table></figure><p>然后，开始测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testLoginWithNoSuchUser</span><span class="hljs-params">()</span> </span>&#123;<br>    Boolean isSuccess = userService.login(<span class="hljs-string">&quot;handle&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>    Assertions.assertFalse(isSuccess); <span class="hljs-comment">// 校验返回值是否正确</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是这样肯定是不行的，因为你会发现，这样运行的结果会使得 <code>isSuccess</code> 为 <code>null</code>，而不是我们期望的结果。当然，我们也还没有配置 mock 的内容。</p><h2 id="mock-it！"><a href="#mock-it！" class="headerlink" title="mock it！"></a>mock it！</h2><p>接下来让我们开始 mock 吧，尝试类似下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testLoginWithNoSuchUser</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 表示「当调用 userDao#selectUserByHandle 且参数为 &quot;handle&quot; 时，则返回 null」</span><br>    Mockito.when(userDao.selectUserByHandle(<span class="hljs-string">&quot;handle&quot;</span>)).thenReturn(<span class="hljs-keyword">null</span>);<br>    Boolean isSuccess = userService.login(<span class="hljs-string">&quot;handle&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>    Assertions.assertFalse(isSuccess); <span class="hljs-comment">// 校验返回值是否正确</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>再运行一次看看？是不是完美了？</p><p>回头看看我们做的过程，是否让单元测试变得更加简单了，编写单元测试仅需要三步</p><ul><li>编写 Mockito 内容</li><li>调用函数</li><li>校验返回值或者参数</li></ul><p>下面将会介绍几种常见的情况</p><h1 id="应对各种情况"><a href="#应对各种情况" class="headerlink" title="应对各种情况"></a>应对各种情况</h1><h2 id="通用匹配类型"><a href="#通用匹配类型" class="headerlink" title="通用匹配类型"></a>通用匹配类型</h2><p>有时候我们并不喜欢指明参数必须要是什么，例如无论什么调用时，都返回 <code>null</code>，此时，参数可以使用 <code>Mockito.any()</code> 来表示任意参数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Mockito.when(userDao.selectUserByHandle(Mockito.any())).thenReturn(<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><h2 id="指定调用的目标函数的返回值"><a href="#指定调用的目标函数的返回值" class="headerlink" title="指定调用的目标函数的返回值"></a>指定调用的目标函数的返回值</h2><p>这已经在上面提及到了，也就是最常见的问题</p><h2 id="让调用的目标函数抛出错误"><a href="#让调用的目标函数抛出错误" class="headerlink" title="让调用的目标函数抛出错误"></a>让调用的目标函数抛出错误</h2><p>将 <code>thenReturn</code> 改为 <code>thenThrow</code> 即可</p><h2 id="让调用的目标函数做一些指定的事情"><a href="#让调用的目标函数做一些指定的事情" class="headerlink" title="让调用的目标函数做一些指定的事情"></a>让调用的目标函数做一些指定的事情</h2><p>如果希望更加自定义函数的内容，譬如做点什么，则可以使用 <code>thenAnswer</code> 来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Mockito.when(userDao.selectUserByHandle(Mockito.any())).thenAnswer(invocationOnMock -&gt; &#123;<br>    String handle = invocationOnMock.getArgument(<span class="hljs-number">0</span>); <span class="hljs-comment">// 获取第 0 个参数</span><br>    <span class="hljs-keyword">if</span> (handle == <span class="hljs-string">&quot;handle&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="如何应对没有返回值的函数"><a href="#如何应对没有返回值的函数" class="headerlink" title="如何应对没有返回值的函数"></a>如何应对没有返回值的函数</h2><p>把 then 的部分向前提就行，并改为 do 系列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Mockito.doAnswer(invocationOnMock -&gt; &#123;<br>    User argument = invocationOnMock.getArgument(<span class="hljs-number">0</span>);<br>    argument.setId(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 必须要返回些什么</span><br>&#125;).when(userDao).insertAccount(Mockito.any());<br></code></pre></td></tr></table></figure><h2 id="如何控制那些静态的函数"><a href="#如何控制那些静态的函数" class="headerlink" title="如何控制那些静态的函数"></a>如何控制那些静态的函数</h2><p>假如我们有一个校验密码的静态方法 <code>BCryptEncoder#encode</code>，那么下面就是一个很好的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">MockedStatic&lt;BCryptEncoder&gt; bCryptEncoderMockedStatic;<br>bCryptEncoderMockedStatic = Mockito.mockStatic(BCryptEncoder.class);<br>bCryptEncoderMockedStatic.when(() -&gt; BCryptEncoder.encoder(<span class="hljs-string">&quot;abc&quot;</span>)).thenReturn(<span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">// do something</span><br><br>bCryptEncoderMockedStatic.close();<br></code></pre></td></tr></table></figure><h2 id="如何测试-private-的方法"><a href="#如何测试-private-的方法" class="headerlink" title="如何测试 private 的方法"></a>如何测试 private 的方法</h2><p>private 方法不应该被测试，因为其他类不会调用这方法。应该通过 public 间接测试 private 方法</p><h2 id="如何校验函数的参数"><a href="#如何校验函数的参数" class="headerlink" title="如何校验函数的参数"></a>如何校验函数的参数</h2><p>我们以注册用户的时候使用的插入用户至数据库为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArgumentCaptor&lt;User&gt; userArgumentCaptor = ArgumentCaptor.forClass(User.class); <span class="hljs-comment">// 创建一个捕获类</span><br>Mockito.verify(userManager, Mockito.times(<span class="hljs-number">1</span>)).insertAccount(userArgumentCaptor.capture()); <span class="hljs-comment">// 第一次插入的时候，捕获参数</span><br>User userCP = userArgumentCaptor.getValue(); 获取被捕获的参数的值，后面就可以直接校验 userCP 了<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centOS 防火墙 docker-compse 的问题</title>
    <link href="/2022/04/21/develop-note/centos-ufw-docker-ip/"/>
    <url>/2022/04/21/develop-note/centos-ufw-docker-ip/</url>
    
    <content type="html"><![CDATA[<p>当 centOS 关闭掉防火墙后，请务必重启 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><p>否则会导致 docker-compose 出错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR: </span>Failed to Setup IP tables: Unable to enable SKIP DNAT rule:  (iptables failed: iptables --wait -t nat -I DOCKER -i br<span class="hljs-string">-7506353</span>a9954 -j RETURN: iptables: No chain/target/match by that name.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>centOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitbook 安装出错</title>
    <link href="/2022/03/24/develop-note/gitbook-install-error/"/>
    <url>/2022/03/24/develop-note/gitbook-install-error/</url>
    
    <content type="html"><![CDATA[<p>执行 <code>npm i gitbook-cli -g</code> 时出现</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">    <span class="hljs-keyword">if</span> (cb) cb.apply(this, arguments)<br>           ^<br>TypeError: cb.apply is not a <span class="hljs-keyword">function</span><br>    at <span class="hljs-regexp">/home/</span>travis<span class="hljs-regexp">/.nvm/</span>versions<span class="hljs-regexp">/node/</span>v12.<span class="hljs-number">18.3</span><span class="hljs-regexp">/lib/</span>node_modules<span class="hljs-regexp">/gitbook-cli/</span>node_modules<span class="hljs-regexp">/npm/</span>node_modules<span class="hljs-regexp">/graceful-fs/</span>polyfills.js:<span class="hljs-number">287</span>:<span class="hljs-number">18</span><br>    at FSReqCallback.oncomplete (fs.js:<span class="hljs-number">169</span>:<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>的情况，可以执行下面的命令解决</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd `npm root -g`<span class="hljs-regexp">/gitbook-cli/</span>node_modules<span class="hljs-regexp">/npm/</span>node_modules/<br>npm install graceful-fs@<span class="hljs-number">4.2</span>.<span class="hljs-number">4</span> --save<br>gitbook install<br></code></pre></td></tr></table></figure><p>即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Gitbook</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 更新后导致 sdk 丢失问题</title>
    <link href="/2022/03/22/mac/clion-mac-CMAKE_OSX_SYSROOT/"/>
    <url>/2022/03/22/mac/clion-mac-CMAKE_OSX_SYSROOT/</url>
    
    <content type="html"><![CDATA[<p>在 macOS 更新后，CLion 可能会出现如下错误</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">CMake Warning at <span class="hljs-regexp">/Applications/</span>CLion.app<span class="hljs-regexp">/Contents/</span>bin<span class="hljs-regexp">/cmake/m</span>ac<span class="hljs-regexp">/share/</span>cmake-<span class="hljs-number">3.15</span><span class="hljs-regexp">/Modules/</span>Platform/Darwin-Initialize.cmake:<span class="hljs-number">131</span> (message):<br>  Ignoring CMAKE_OSX_SYSROOT value:<br><br>   <span class="hljs-regexp">/Applications/</span>Xcode.app<span class="hljs-regexp">/Contents/</span>Developer<span class="hljs-regexp">/Platforms/</span>MacOSX.platform<span class="hljs-regexp">/Developer/</span>SDKs/MacOSX12.<span class="hljs-number">1</span>.sdk<br><br>  because the directory does not exist.<br></code></pre></td></tr></table></figure><p>这时候，只需要删除 <code>cmake-build-debug</code> 或者对应的目录，然后 reload cmake 就行了</p>]]></content>
    
    
    
    <tags>
      
      <tag>CLion</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 生成验证码 Captcha</title>
    <link href="/2022/03/19/develop-note/java-create-captcha/"/>
    <url>/2022/03/19/develop-note/java-create-captcha/</url>
    
    <content type="html"><![CDATA[<p>方法效率较低，推荐使用缓存，重复使用验证码</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 验证码宽度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer CAPTCHA_WIDTH = <span class="hljs-number">150</span>;<br><span class="hljs-comment">// 验证码高度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer CAPTCHA_HEIGHT = <span class="hljs-number">40</span>;<br><span class="hljs-comment">// 验证码最大旋转角度（不推荐修改）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer CAPTCHA_CHAR_ROTATE = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 干扰线数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer CAPTCHA_LINE_NUM = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 验证码数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer CAPTCHA_CHAR_NUM = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// 验证码的保存格式</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CAPTCHA_CONTENT_TYPE = <span class="hljs-string">&quot;PNG&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createCaptcha</span><span class="hljs-params">(OutputStream outputStream)</span> <span class="hljs-keyword">throws</span> PortableException </span>&#123;<br>    BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(CAPTCHA_WIDTH, CAPTCHA_HEIGHT, BufferedImage.TYPE_INT_BGR);<br>    Graphics2D g = (Graphics2D) image.getGraphics();<br>    g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CAPTCHA_WIDTH, CAPTCHA_HEIGHT);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CAPTCHA_LINE_NUM; i++) &#123;<br>        drawRandomLine(g);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CAPTCHA_LINE_NUM; i++) &#123;<br>        drawLeftToRightLine(g);<br>    &#125;<br>    StringBuilder ans = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CAPTCHA_CHAR_NUM; i++) &#123;<br>        ans.append(drawString(g, i + <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ImageIO.write(image, CAPTCHA_CONTENT_TYPE, outputStream);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> PortableException.of(<span class="hljs-string">&quot;B-01-002&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRandomLine</span><span class="hljs-params">(Graphics2D g)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> xs = RANDOM.nextInt(CAPTCHA_WIDTH);<br>    <span class="hljs-keyword">int</span> xe = RANDOM.nextInt(CAPTCHA_WIDTH);<br>    <span class="hljs-keyword">int</span> ys = RANDOM.nextInt(CAPTCHA_HEIGHT);<br>    <span class="hljs-keyword">int</span> ye = RANDOM.nextInt(CAPTCHA_HEIGHT);<br>    g.setFont(ARIAL_FONT);<br>    g.setColor(getRandomColor());<br>    g.drawLine(xs, ys, xe, ye);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawLeftToRightLine</span><span class="hljs-params">(Graphics2D g)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> xs = RANDOM.nextInt(CAPTCHA_WIDTH / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">int</span> xe = CAPTCHA_WIDTH / <span class="hljs-number">2</span> + RANDOM.nextInt(CAPTCHA_WIDTH / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">int</span> ys = RANDOM.nextInt(CAPTCHA_HEIGHT / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">int</span> ye = CAPTCHA_HEIGHT / <span class="hljs-number">2</span> + RANDOM.nextInt(CAPTCHA_HEIGHT / <span class="hljs-number">2</span>);<br>    g.setFont(ARIAL_FONT);<br>    g.setColor(getRandomColor());<br>    g.drawLine(xs, ys, xe, ye);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">drawString</span><span class="hljs-params">(Graphics2D g, Integer num)</span> </span>&#123;<br>    <span class="hljs-comment">// 保证左侧和右侧不要贴边，总共留出一个字符的空间</span><br>    <span class="hljs-keyword">int</span> baseX = (<span class="hljs-keyword">int</span>) (CAPTCHA_WIDTH * <span class="hljs-number">1.0</span> / (ImageUtils.CAPTCHA_CHAR_NUM + <span class="hljs-number">1</span>) * num);<br>    AffineTransform old = g.getTransform();<br>    String c = getRandomChar();<br><br>    g.setFont(ARIAL_FONT);<br>    g.setColor(getRandomColor());<br>    g.rotate(Math.toRadians(RANDOM.nextInt(CAPTCHA_CHAR_ROTATE * <span class="hljs-number">2</span>) - CAPTCHA_CHAR_ROTATE));<br>    g.drawString(c, baseX, CAPTCHA_HEIGHT / <span class="hljs-number">3</span> * <span class="hljs-number">2</span>);<br>    g.setTransform(old);<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Color <span class="hljs-title">getRandomColor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> upper = <span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">int</span> lower = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = lower + RANDOM.nextInt(upper);<br>    <span class="hljs-keyword">int</span> g = lower + RANDOM.nextInt(upper);<br>    <span class="hljs-keyword">int</span> b = lower + RANDOM.nextInt(upper);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Color(r, g, b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRandomChar</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> String.valueOf(CAPTCHA_CHAR.charAt(RANDOM.nextInt(CAPTCHA_CHAR.length())));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 模版可变参数列表传递给 C 的 va_list 可变参数列表</title>
    <link href="/2022/01/12/develop-note/cpp-template-variable-parameter-to-c/"/>
    <url>/2022/01/12/develop-note/cpp-template-variable-parameter-to-c/</url>
    
    <content type="html"><![CDATA[<h1 id="C-可变参数"><a href="#C-可变参数" class="headerlink" title="C 可变参数"></a>C 可变参数</h1><p>以 <code>printf</code> 为例，常见如下<br><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* format, ...)</span></span>;<br></code></pre></td></tr></table></figure></p><h1 id="CPP-可变参数"><a href="#CPP-可变参数" class="headerlink" title="CPP 可变参数"></a>CPP 可变参数</h1><p>常见如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;class... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;format, <span class="hljs-keyword">const</span> Args &amp;... args)</span></span>;<br></code></pre></td></tr></table></figure><p>若此时需要为 C 的 <code>printf</code> 进行包装，使其可以接受 <code>string</code> 类型的 format，则可以用如下方式实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;class... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;format, <span class="hljs-keyword">const</span> Args &amp;... args)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(format.c_str(), args...);<br>&#125;<br></code></pre></td></tr></table></figure><p>通常会提示警告，因为 <code>c_str()</code> 得到的字符串不能保证是一个可格式化的字符串，而 <code>printf</code> 的函数原型是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__attribute__((__format__ (__printf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)))<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* format, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>这使得 <code>printf</code> 会被检查第一个参数是否满足 <code>printf</code>, <code>scanf</code>, <code>strftime</code>, 或者 <code>strfmon</code> 风格</p><p>但是通过此方法可以将部分 C 语言中的方法扩展到 CPP 的模版化</p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>可变参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub 下载的 zip 代码如何与原仓库再次建立连接</title>
    <link href="/2021/11/25/develop-note/git-remote-reconnect/"/>
    <url>/2021/11/25/develop-note/git-remote-reconnect/</url>
    
    <content type="html"><![CDATA[<p>执行如下命令即可（注意替换关键词）</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">unzip &lt;repo&gt;.zip<br>cd &lt;repo&gt;<br>git init<br>git add .<br>git remote add origin https://github.com/&lt;user&gt;/&lt;repo&gt;.git<br>git remote update<br>git checkout master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年浙江工商大学新生赛题解</title>
    <link href="/2021/11/21/acm/2021-ZJGSU-ACM-freshman-competition/"/>
    <url>/2021/11/21/acm/2021-ZJGSU-ACM-freshman-competition/</url>
    
    <content type="html"><![CDATA[<div style="color: red;">  <ul>    <li>        本篇中的题目顺序为预期难度顺序，并非比赛题目顺序    </li>    <li>        本篇中所有的“更好的优化”均为标准答案之外的思考，不使用此内容也可以通过题目    </li>  </ul></div><h1 id="比赛预期情况"><a href="#比赛预期情况" class="headerlink" title="比赛预期情况"></a>比赛预期情况</h1><p>总共比赛人数：175 (至少通过一道题的人数，没有通过题的不计入总人数)</p><div class="table-container"><table><thead><tr><th style="text-align:center">题目名</th><th style="text-align:center">实际通过次数</th><th style="text-align:center">实际通过比例</th><th style="text-align:center">预期通过比例</th></tr></thead><tbody><tr><td style="text-align:center">chiking 的偶像</td><td style="text-align:center">172</td><td style="text-align:center">98.3%</td><td style="text-align:center">100%</td></tr><tr><td style="text-align:center">chiking 和珂朵莉</td><td style="text-align:center">141</td><td style="text-align:center">80.6%</td><td style="text-align:center">80%</td></tr><tr><td style="text-align:center">chiking 的序列 II</td><td style="text-align:center">58</td><td style="text-align:center">51.3%</td><td style="text-align:center">60%</td></tr><tr><td style="text-align:center">chiking 的序列 I</td><td style="text-align:center">113</td><td style="text-align:center">64.6%</td><td style="text-align:center">50%</td></tr><tr><td style="text-align:center">chiking 的棋盘</td><td style="text-align:center">2</td><td style="text-align:center">1.1%</td><td style="text-align:center">30%</td></tr><tr><td style="text-align:center">乐于助人的 chiking</td><td style="text-align:center">24</td><td style="text-align:center">13.7%</td><td style="text-align:center">20%</td></tr><tr><td style="text-align:center">chiking 的俄罗斯方块</td><td style="text-align:center">0</td><td style="text-align:center">0%</td><td style="text-align:center">1%</td></tr><tr><td style="text-align:center">chiking 和大家一起来做签到题</td><td style="text-align:center">0</td><td style="text-align:center">0%</td><td style="text-align:center">1%</td></tr><tr><td style="text-align:center">chiking 是一个机器人</td><td style="text-align:center">0</td><td style="text-align:center">0%</td><td style="text-align:center">1%</td></tr></tbody></table></div><p>综上来看，整个新生赛除了一道题没有达到预期的成绩，其他题目均与预期相差不大</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="chiking-的偶像"><a href="#chiking-的偶像" class="headerlink" title="chiking 的偶像"></a>chiking 的偶像</h2><h3 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h3><p>循环输出 <code>\soup_god/</code>，且总共输出的字符串长度为 $n$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单的签到题，只需要还记得有 mod 这个运算就能写出来</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *data = <span class="hljs-string">&quot;\\soup_god/&quot;</span>;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; data[i % <span class="hljs-number">10</span>];<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>我以为大家被卡在不会 <code>mod</code>，结果大家都卡在 <code>\\</code>，这就挺尴尬的</p><h2 id="chiking-和珂朵莉"><a href="#chiking-和珂朵莉" class="headerlink" title="chiking 和珂朵莉"></a>chiking 和珂朵莉</h2><h3 id="大致题意-1"><a href="#大致题意-1" class="headerlink" title="大致题意"></a>大致题意</h3><p>$n$ 个物品，每个物品都有价值和所属类别，让你选择 $n - k$ 种类别的物品，使得所选出来的这些类别的物品的总价值最大</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>也是签到题之一</p><p>在读入数据的时候统计每个类别的物品价值只和，之后排序一下，取出后 $n - k$ 个类别的价值即可</p><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> w[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> m, n, k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> d, s;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; d &gt;&gt; s;<br>        w[s] += d;<br>    &#125;<br>    sort(w + <span class="hljs-number">1</span>, w + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k + <span class="hljs-number">1</span>; i &lt;= n; ++i) ans += w[i];<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="吐槽-1"><a href="#吐槽-1" class="headerlink" title="吐槽"></a>吐槽</h3><p>这道题原来有一个小坑点，即物品的价值可以为负数，所以需要额外增加一个判断，但是想了想还是当签到题，不要故意恶心了，于是就删掉了。所以顺便好奇的问一下，有多少人看到题面之后去想过价值是不是可能为负数呢</p><h2 id="chiking-的序列-II"><a href="#chiking-的序列-II" class="headerlink" title="chiking 的序列 II"></a>chiking 的序列 II</h2><h3 id="大致题意-2"><a href="#大致题意-2" class="headerlink" title="大致题意"></a>大致题意</h3><p>有一个<strong>非递减</strong>的数组，允许你进行任意次数操作，每次操作可以使得其中一个值增加 $1$，问至少需要多少次操作才能使得数组内没有相同的值</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>因为只能进行加法运算，所以数字只会增加，由于已经排序好了数组，所以最简单的方案就是让每一个值都比前一个值要大即可</p><h3 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> tmp = max(data[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, data[i]);<br>        sum += tmp - data[i];<br>        data[i] = tmp;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="chiking-的序列-I"><a href="#chiking-的序列-I" class="headerlink" title="chiking 的序列 I"></a>chiking 的序列 I</h2><h3 id="大致题意-3"><a href="#大致题意-3" class="headerlink" title="大致题意"></a>大致题意</h3><p>有一个数组，允许你进行任意次操作，每次执行操作可以将任意一个数字插入到数组到任意位置，问至少需要多少次操作才能使得数组内到每一个值满足 $a_i \leq i$，其中 $i$ 表示下标</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>首先要让每一位的的数字小于等于其下标，那么插入的数字也不能例外。由于插入的数字可以是任意值，所以理所应当的，选择 $1$ 进行插入是最好的选择，因为无论插入何处均可以使得新插入的数字不再需要考虑</p><p>接下来是考虑插入位置的问题，在等式中 $a_i$ 是不可更新的值，所以只能想办法使得 $i$ 增大，那么最容易得到的解决方案就是将数字插入数组开头，这会使得所有原来在数组内的值的下标都增大，最大程度的满足条件</p><p>接下来考虑插入数量的问题，由于都是插入数组最前面，所以可以将等式改写为 $a_i &lt;= i + x$，其中的 $x$ 即为需要求解的值。那么对于每一个 $i$ 都要满足这个等式，所以遍历一次数组，找出最大的需要的 $x$ 即可</p><h3 id="AC-Code-3"><a href="#AC-Code-3" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> tmp;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>            ans = max(ans, tmp - i - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="chiking-的棋盘"><a href="#chiking-的棋盘" class="headerlink" title="chiking 的棋盘"></a>chiking 的棋盘</h2><h3 id="大致题意-4"><a href="#大致题意-4" class="headerlink" title="大致题意"></a>大致题意</h3><p>用 $k$ 个 <code>L</code> 形状的方块能否平铺一个矩形方格</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>我们可以用 <code>L</code> 形状的方块拼出如下两种最简平铺方案</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/2*4.png" alt="2-4"></p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/3*8.png" alt="3-8"></p><p>这两个方案都是 $8$ 个方格的倍数，所以起码，方格总数应该是 $8$ 的倍数，即 $n \times m = 8k$</p><ol><li>假设两边都是偶数，那么必然其中一边为 $2$ 的倍数，另外一边为 $4$ 的倍数，所以必然可以被仅靠第一种平铺方案平铺</li><li>假设一边为奇数一边是偶数，那么必然其中一边为 $8$ 的倍数，而第一种方案也可以改写为 $2 * 8$ 的方格，即只需要另外一边可以分解为 $2x + 3y$ 的形式即可，易得只要 $ \geq 2$ 的值均可</li></ol><p>所以结论：只要满足方格数为 $8$ 的倍数，且两边都 $\geq 2$，则必定可以平铺</p><p>接下来只需要计算数量对不对就行</p><h3 id="AC-Code-4"><a href="#AC-Code-4" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, m, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span> &amp;&amp; m &gt; <span class="hljs-number">1</span> &amp;&amp; (n * m) % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> cnt = (n * m / <span class="hljs-number">4</span>);<br>            <span class="hljs-keyword">if</span> (cnt == k) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Perfect!\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Single forever!\n&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Single forever!\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="乐于助人的-chiking"><a href="#乐于助人的-chiking" class="headerlink" title="乐于助人的 chiking"></a>乐于助人的 chiking</h2><h3 id="大致题意-5"><a href="#大致题意-5" class="headerlink" title="大致题意"></a>大致题意</h3><p>允许将字符串中 <code>oo</code> 和 <code>u</code> 互转，也允许将字符串的 <code>kh</code> 和 <code>h</code> 互转的前提下，计算给出的字符串数组中有几个不同的字符串</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>由于存在转换，所以最好的办法就是统一转为一种类型，再进行比较</p><p><code>oo</code> 和 <code>u</code> 这对规则，若我们将所有的 <code>oo</code> 转为 <code>u</code>，那么当遇到 <code>ou</code> 和 <code>uo</code> 时，会发现在此条规则下应该是相等的字符串没有相等。所以应该将所有的 <code>u</code> 字符转为 <code>oo</code></p><p><code>kh</code> 和 <code>h</code> 这对规则，若我们将所有的 <code>h</code> 转为 <code>kh</code>，那么就会出现 <code>kh</code> 还可以继续转为 <code>kkh</code>、<code>kkkh</code>、<code>kkkkh</code> 等，所以只能选择将 <code>kh</code> 转为 <code>h</code>。但是请注意 <code>kkkh</code> 这类连续的 <code>k</code> 的情况，可以连续多次转换</p><p>处理完成后，统计不同的字符串的数量即可</p><p>处理字符串复杂度 $O(nm) = 1e5$<br>统计不同字符串数量 $O(n^2m) = 1e7$</p><p>满足要求</p><h3 id="AC-Code-5"><a href="#AC-Code-5" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">1010</span>], b[<span class="hljs-number">2010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; data;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a;<br>        <span class="hljs-keyword">int</span> len = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span>(a);<br>        <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (a[j] == <span class="hljs-string">&#x27;u&#x27;</span>) &#123;<br>                b[pos++] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>                b[pos++] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[j] == <span class="hljs-string">&#x27;h&#x27;</span>) &#123;<br>                <span class="hljs-keyword">while</span> (pos &gt; <span class="hljs-number">0</span> &amp;&amp; b[pos - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;k&#x27;</span>) pos--;<br>                b[pos++] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                b[pos++] = a[j];<br>            &#125;<br>            b[pos] = <span class="hljs-number">0</span>;<br>        &#125;<br>        data.emplace_back(b);<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (data[i] == data[j]) &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) cnt++;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cnt + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="更好的优化"><a href="#更好的优化" class="headerlink" title="更好的优化"></a>更好的优化</h3><p>实际上，这里需要比较的是字符串是否相同，所以可以使用字符串 hash 来解决，这样，复杂度将会降低至 $O(nm)$。当然，字符串 hash 存在一定的可能错误的隐患，但是可以通过增加多组 hash 来解决</p><h3 id="Better-Code"><a href="#Better-Code" class="headerlink" title="Better Code"></a>Better Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">1010</span>], b[<span class="hljs-number">2010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>&gt; hashCode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a;<br>        <span class="hljs-keyword">int</span> len = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span>(a);<br>        <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (a[j] == <span class="hljs-string">&#x27;u&#x27;</span>) &#123;<br>                b[pos++] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>                b[pos++] = <span class="hljs-string">&#x27;o&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[j] == <span class="hljs-string">&#x27;h&#x27;</span>) &#123;<br>                <span class="hljs-keyword">while</span> (pos &gt; <span class="hljs-number">0</span> &amp;&amp; b[pos - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;k&#x27;</span>) pos--;<br>                b[pos++] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                b[pos++] = a[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> code = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> p = <span class="hljs-number">131</span>, m = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pos; ++j) &#123;<br>            code *= p;<br>            code %= m;<br>            code += b[j];<br>            code %= m;<br>        &#125;<br>        hashCode.insert(code);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; hashCode.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="chiking-的俄罗斯方块"><a href="#chiking-的俄罗斯方块" class="headerlink" title="chiking 的俄罗斯方块"></a>chiking 的俄罗斯方块</h2><h3 id="大致题意-6"><a href="#大致题意-6" class="headerlink" title="大致题意"></a>大致题意</h3><p>宽度为 4 的俄罗斯方块游戏，仅有两种方块：$2 \times 2$ 的方块和 $1 \times 4$ 的长条，在已知所有的下落顺序的情况下，求出最优的分数</p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>需要思考的东西比较多，我们先来证明一些东西，方面后面使用</p><h4 id="实际上仅会出现-10-分和-3-分两种消方块"><a href="#实际上仅会出现-10-分和-3-分两种消方块" class="headerlink" title="实际上仅会出现 10 分和 3 分两种消方块"></a>实际上仅会出现 10 分和 3 分两种消方块</h4><p>这个结论应该是比较简单就可以得出的，因为垂直方向上只有长度为 2 和 4 的方块，所以当我们能遇到创造出 10 分的情况，尽快消除绝对不会亏</p><h4 id="长条方块必定可以合并视为-2-times-4"><a href="#长条方块必定可以合并视为-2-times-4" class="headerlink" title="长条方块必定可以合并视为 $2 \times 4$"></a>长条方块必定可以合并视为 $2 \times 4$</h4><p>这个结论指的是如下的情况是不可能发生的(带箭头的蓝色方块是最后落下的)</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/Tetris-cannot-be-inserted.png" alt="Tetris-cannot be inserted"></p><p>因为这个情况下，才会出现 $1 \times 4$ 无法插入到原来的 $1 \times 4$ 中使得变成 $2 \times 4$</p><p>而这个情况恰好满足一个 10 分的消除情况，即下图</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/10-1.png" alt="10-1"></p><p>既然能创造 10 分，那么就没必要纠结是不是能够合并了，先变成 10 分重要，所以不存在单独一根的长条方块的情况</p><h4 id="将-2-2-放中间一定不是好的选择"><a href="#将-2-2-放中间一定不是好的选择" class="headerlink" title="将 2*2 放中间一定不是好的选择"></a>将 2*2 放中间一定不是好的选择</h4><p>这个结论应该显而易见吧，因为放左/右边既可以与 $1 \times 4$ 消分，还可以与 $2 \times 2$ 消分，比放中间肯定更优</p><h4 id="原来的结构不影响当前期望的分数"><a href="#原来的结构不影响当前期望的分数" class="headerlink" title="原来的结构不影响当前期望的分数"></a>原来的结构不影响当前期望的分数</h4><p>这句话扩展起来就是</p><blockquote><p>不管之前的方块带来什么影响，若接下来 n 个方块能够创造 10 分的价值，则一定可以创造 10 分的价值，若接下来 n 个方块能创建 3 分的价值，则一定可以创造 3 分的价值</p></blockquote><p>这一条暂且先不证明</p><h4 id="所有组合如下"><a href="#所有组合如下" class="headerlink" title="所有组合如下"></a>所有组合如下</h4><p>所有能够拿分的组合只有下面这些，其中只有前两个是 10 分，其他的均为 3 分</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/10-1.png" alt="10-1"></p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/10-2.png" alt="10-2"></p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/3-1.png" alt="3-1"></p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/3-2.png" alt="3-2"></p><p>接下来我们可以证明上面那条的结论</p><p>之前方块带来的影响主要是由于其必须要先落下导致占用了一定的位置，使得原来可以消掉的方块没有办法继续消除</p><p>最常见的一个影响就是 <script type="math/tex">2 \times 2</script> 影响，简单来说就是原来已经有一块 <script type="math/tex">2 \times 2</script> 方格，此时就不一定能够做到满足上述的消分情况，如下图</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/2-2-block.png" alt="2-2-block.jpeg"></p><p>例如此时，其实无法完美的满足第二种 10 分的消分情况，因为你不可能将四个 <script type="math/tex">1 \times 4</script> 放在同一行中，即同时下落四个 <script type="math/tex">1 \times 4</script> 的方块时，你不能仅通过这四个方块得到 10 分</p><p>但是又如何呢？</p><p>实际上我们仍然可以拿到 10 分，而且最后剩下的结果仍然是 <script type="math/tex">2 \times 2</script>方块，如下图所示</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/2-2-block-solve.png" alt="2-2-block-solve"></p><p>这里就不再详细介绍每种情况了，供各位思考在 <script type="math/tex">2 \times 2</script> 的影响下，四种得分方案是否都可以得到原来的分数且不带来新的影响</p><p>还有一种影响是 <script type="math/tex">2 \times 4</script> 的，比较类似，不再详细说明了</p><p>特别的，无论在 <script type="math/tex">2 \times 2</script> 还是 <script type="math/tex">2 \times 4</script> 的影响下，第三种得分方案都有可能会从 3 分变成 10 分，而这虽然增加了分数，但是同时也增加了难于预料的问题，必须予以解决。有趣的是，这种新的得分方案，其实正是第一种方案，所以如果我们能够优先将所有可能的第一种方案计算完，那么此情况其实不再可能出现，那么也就可以忽略了</p><p>除了 <script type="math/tex">2 \times 2</script> 还是 <script type="math/tex">2 \times 4</script>，还有更多的可能，例如更高的 <script type="math/tex">2 \times 8</script> 等等，但实际上是类似的，也就不再需要证明</p><p>当然还有更加离谱的影响，例如 <script type="math/tex">1 \times 4</script>影响，明显，这个影响确实真的影响到得分了，因为第四种得分方案压根不可能得分了，如下图</p><p><img src="/image/acm/2021-ZJGSU-ACM-freshman-competition/1-4-block-solve.png" alt="1-4-block-solve"></p><p>但是，注意题目中说的 <script type="math/tex">1 \times 4</script> 一定是偶数个，所以之后必定有一个 <script type="math/tex">1 \times 4</script>，那么就回到了开头的那个结论的情况，这里又可以拿到 10 分了</p><h4 id="穿插组合并无影响"><a href="#穿插组合并无影响" class="headerlink" title="穿插组合并无影响"></a>穿插组合并无影响</h4><p>简单来说就是两个结构需要的方块穿插起来，并不会影响最终的得分，这里就不再详细介绍</p><p>当你证明完成后接下来就是模拟讨论所有情况即可</p><p>注意第一种 10 分，其要求最后一个落下的必须是 <script type="math/tex">1 \times 4</script> 的长条即可，剩下的，统计数量就行</p><h3 id="AC-Code-6"><a href="#AC-Code-6" class="headerlink" title="AC Code"></a>AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> tot0 = <span class="hljs-number">0</span>, cnt0 = <span class="hljs-number">0</span>, cnt1 = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> tmp;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) &#123;<br>            cnt1++;<br>            <span class="hljs-keyword">if</span> (cnt1 &gt;= <span class="hljs-number">2</span> &amp;&amp; cnt0 &gt;= <span class="hljs-number">2</span>) &#123;<br>                cnt1 -= <span class="hljs-number">2</span>;<br>                cnt0 -= <span class="hljs-number">2</span>;<br>                ans += <span class="hljs-number">10</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tot0++;<br>            cnt0++;<br>        &#125;<br>    &#125;<br>    ans += (cnt1 / <span class="hljs-number">4</span>) * <span class="hljs-number">10</span>;<br>    cnt1 &amp;= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (tot0 &gt;= <span class="hljs-number">2</span>) &#123;<br>        ans += (cnt0 + cnt1) / <span class="hljs-number">2</span> * <span class="hljs-number">3</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt0 &amp;&amp; cnt1) &#123;<br>        ans += <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="chiking-和大家一起来做签到题"><a href="#chiking-和大家一起来做签到题" class="headerlink" title="chiking 和大家一起来做签到题"></a>chiking 和大家一起来做签到题</h2><h3 id="大致题意-7"><a href="#大致题意-7" class="headerlink" title="大致题意"></a>大致题意</h3><p>给定一个 n，允许使用加减乘除和任意括号，找出有多少种不同的四个数字，使得这四个数字能够运算出 n，且运算过程中一定出现了小数，罗列所有的可能的四个数字的组合</p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>其实就是一道暴力题</p><p>算一下复杂度，<script type="math/tex">13^4 / 2 * 4! * 2 * 3^6 = 499,703,256</script></p><p>解释一下，罗列每个位置的每个可能，为 $\rightarrow 13^4 / 2$ （避免重复，遍历过程保证前一个值不大于当前值）</p><p>排列数组 $\rightarrow 4!$</p><p>总共有两种括号方式 $((A @ B) @ C) @ D$ 和 $(A @ B) @ (C @ D)$（$ABCD$ 为数字，$@$ 为运算符号），所以 $\rightarrow 2$</p><p>枚举所有的运算符号 $\rightarrow 3^6$（6 种运算分别为 $A + B, A - B, B - A, A \times B, A \div B, B \div A$）</p><p>做一下剪枝，很容易提前放弃掉部分方案，复杂度还可以降低</p><p>所以直接暴力就行</p><p>但是，如何优雅的暴力呢？</p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-keyword">int</span> curValue[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">cin</span> &gt;&gt; m;<br><br>    <span class="hljs-keyword">auto</span> isM = [&amp;](<span class="hljs-keyword">double</span> cur) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(cur - m) &lt; eps; &#125;;<br>    <span class="hljs-keyword">auto</span> isDouble = [&amp;](<span class="hljs-keyword">double</span> cur) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(cur - <span class="hljs-keyword">int</span>(cur + eps)) &gt; eps; &#125;;<br><br>    <span class="hljs-keyword">auto</span> add = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> a + b; &#125;;<br>    <span class="hljs-keyword">auto</span> sub1 = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> a - b; &#125;;<br>    <span class="hljs-keyword">auto</span> sub2 = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> b - a; &#125;;<br>    <span class="hljs-keyword">auto</span> times = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> a * b; &#125;;<br>    <span class="hljs-keyword">auto</span> div1 = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> a / b; &#125;;<br>    <span class="hljs-keyword">auto</span> div2 = [](<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b) &#123; <span class="hljs-keyword">return</span> b / a; &#125;;<br><br>    function&lt;<span class="hljs-keyword">double</span>(<span class="hljs-keyword">double</span>, <span class="hljs-keyword">double</span>)&gt; arr[<span class="hljs-number">6</span>] = &#123;add, sub1, sub2, times, div1, div2&#125;;<br><br>    <span class="hljs-keyword">auto</span> cal = [&amp;]() &#123;<br>        <span class="hljs-keyword">bool</span> reach = <span class="hljs-literal">false</span>, hasNoDouble = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br><br>            function&lt;<span class="hljs-keyword">bool</span>(<span class="hljs-keyword">double</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>)&gt; dfs1 = [&amp;](<span class="hljs-keyword">double</span> cur, <span class="hljs-keyword">int</span> deep, <span class="hljs-keyword">bool</span> hasDouble) &#123;<br>                <span class="hljs-keyword">if</span> (deep == <span class="hljs-number">4</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (isM(cur)) &#123;<br>                        reach = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">if</span> (!hasDouble) &#123;<br>                            hasNoDouble = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> all_of(arr, arr + <span class="hljs-number">6</span>, [&amp;](function&lt;<span class="hljs-keyword">double</span>(<span class="hljs-keyword">double</span>, <span class="hljs-keyword">double</span>)&gt; &amp;func) &#123;<br>                    <span class="hljs-keyword">double</span> nxt = func(cur, curValue[deep]);<br>                    <span class="hljs-keyword">return</span> dfs1(nxt, deep + <span class="hljs-number">1</span>, hasDouble || isDouble(nxt));<br>                &#125;);<br>            &#125;;<br>            function&lt;<span class="hljs-keyword">bool</span>()&gt; dfs2 = [&amp;]() &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i: arr) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;j: arr) &#123;<br>                        <span class="hljs-keyword">double</span> l = i(curValue[<span class="hljs-number">0</span>], curValue[<span class="hljs-number">1</span>]);<br>                        <span class="hljs-keyword">double</span> r = j(curValue[<span class="hljs-number">2</span>], curValue[<span class="hljs-number">3</span>]);<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;k: arr) &#123;<br>                            <span class="hljs-keyword">double</span> t = k(l, r);<br>                            <span class="hljs-keyword">if</span> (isM(t)) &#123;<br>                                reach = <span class="hljs-literal">true</span>;<br>                                <span class="hljs-keyword">if</span> (!isDouble(l) &amp;&amp; !isDouble(r)) &#123;<br>                                    hasNoDouble = <span class="hljs-literal">true</span>;<br>                                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br><br>            dfs1(curValue[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>            dfs2();<br><br>        &#125; <span class="hljs-keyword">while</span> (next_permutation(curValue, curValue + <span class="hljs-number">4</span>));<br><br>        <span class="hljs-keyword">if</span> (reach &amp;&amp; !hasNoDouble) &#123;<br>            <span class="hljs-comment">// 四个小于 16 的 int 数字，可以按位压缩到一个 int 中</span><br>            <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: curValue) &#123;<br>                t &lt;&lt;= <span class="hljs-number">4</span>;<br>                t += item;<br>            &#125;<br>            ans.insert(t);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 暴力枚举没有必要一定要用 dfs，实际上 for 也可以，甚至更快，因为减少了出入栈的耗时</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">13</span>; ++i) &#123;<br>        curValue[<span class="hljs-number">0</span>] = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; <span class="hljs-number">13</span>; ++j) &#123;<br>            curValue[<span class="hljs-number">1</span>] = j + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &lt; <span class="hljs-number">13</span>; ++k) &#123;<br>                curValue[<span class="hljs-number">2</span>] = k + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = k; l &lt; <span class="hljs-number">13</span>; ++l) &#123;<br>                    curValue[<span class="hljs-number">3</span>] = l + <span class="hljs-number">1</span>;<br>                    cal();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: ans) &#123;<br>        <span class="hljs-keyword">int</span> cur = item;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            curValue[i] = cur % <span class="hljs-number">16</span>;<br>            cur &gt;&gt;= <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; curValue[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == <span class="hljs-number">3</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="chiking-是一个机器人"><a href="#chiking-是一个机器人" class="headerlink" title="chiking 是一个机器人"></a>chiking 是一个机器人</h2><h3 id="大致题意-8"><a href="#大致题意-8" class="headerlink" title="大致题意"></a>大致题意</h3><p>有一个地图，有障碍物，三种不同的机器，一个只能下，一个只能右，最后那个可以下右移动，询问 q 次某种机器能否从起始点到终点</p><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>考虑前两种机器，其实很好解决，以第一种机器举例，我将整个地图的第一行加到第二行，此时的第二行加到第三行，如此操作后，每个点上保存的是此点的正上方有多少个墙，称其为“前缀墙”。若起点和终点的点的“前缀墙”数量相同，则就可以到达，否则中间必定存在墙</p><p>第二种机器就不再过多介绍了</p><p>第三种机器则比较难做，考虑一种 dp 的可能：若这个点不是墙，则可以到达这个点的所有点，是能够到达这个点上方点的所有点和能够到达这个点左边的所有点的并集。用公式描述一下就是</p><script type="math/tex; mode=display">\begin{equation}    dp[i][j] =    \begin{cases}        dp[i][j - 1] \cup dp[i - 1][j] \cup \{(i, j)\}, & \text{如果当前节点可达 } \\        空集合, & \text{如果当前节点不可达 }    \end{cases}\end{equation}</script><p>如此计算我们可以得到第一份代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x1, y1, x2, y2, i;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> Node &amp;rhs) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> x2 &lt; rhs.x2;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">510</span>;<br><br>    <span class="hljs-comment">// 读取地图</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">bitset</span>&lt;M&gt;&gt; graph(n);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>            <span class="hljs-keyword">char</span> c;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; c;<br>            graph[i][j] = c == <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 前缀和解决 1 和 2 型号的</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; modelList[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;model: modelList) &#123;<br>        model.resize(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: model)<br>            item.resize(m, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>            modelList[<span class="hljs-number">0</span>][i][j] = (i != <span class="hljs-number">0</span> ? modelList[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>][j] : <span class="hljs-number">0</span>) + !graph[i][j];<br>            modelList[<span class="hljs-number">1</span>][i][j] = (j != <span class="hljs-number">0</span> ? modelList[<span class="hljs-number">1</span>][i][j - <span class="hljs-number">1</span>] : <span class="hljs-number">0</span>) + !graph[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(q)</span></span>;    <span class="hljs-comment">// 离线计算答案</span><br>    <span class="hljs-built_in">vector</span>&lt;Node&gt; query;<br>    query.reserve(q);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; q; ++i) &#123;<br>        <span class="hljs-keyword">int</span> t, x1, y1, x2, y2;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; t &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-comment">// 下标从 0 开始</span><br>        x1 -= <span class="hljs-number">1</span>;<br>        y1 -= <span class="hljs-number">1</span>;<br>        x2 -= <span class="hljs-number">1</span>;<br>        y2 -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>) ans[i] = (y1 == y2) <span class="hljs-keyword">and</span> (x1 &lt;= x2) <span class="hljs-keyword">and</span> (modelList[<span class="hljs-number">0</span>][x1][y1] == modelList[<span class="hljs-number">0</span>][x2][y2]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-number">2</span>) ans[i] = (x1 == x2) <span class="hljs-keyword">and</span> (y1 &lt;= y2) <span class="hljs-keyword">and</span> modelList[<span class="hljs-number">1</span>][x1][y1] == modelList[<span class="hljs-number">1</span>][x2][y2];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) ans[i] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> query.push_back((Node) &#123;x1, y1, x2, y2, i&#125;);<br>        &#125;<br>    &#125;<br><br>    sort(query.begin(), query.end());<br><br>    <span class="hljs-keyword">auto</span> hashNode = [&amp;](<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;y) &#123;<br>        <span class="hljs-keyword">return</span> x * n + y;<br>    &#125;;<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">bitset</span>&lt;N * M&gt;&gt; dp(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        dp[i].reset();<br>        dp[i][hashNode(<span class="hljs-number">0</span>, i)] = graph[<span class="hljs-number">0</span>][i];<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> curQuery = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-comment">// 离线计算每个位置哪些可以到达</span><br>        <span class="hljs-keyword">if</span> (!graph[i][<span class="hljs-number">0</span>]) dp[<span class="hljs-number">0</span>].reset();<br>        <span class="hljs-keyword">else</span> dp[<span class="hljs-number">0</span>][hashNode(i, <span class="hljs-number">0</span>)] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (!graph[i][j]) dp[j].reset();<br>            <span class="hljs-keyword">else</span> &#123;<br>                dp[j][hashNode(i, j)] = <span class="hljs-literal">true</span>;<br>                dp[j] |= dp[j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (curQuery &lt; query.size()) &#123;<br>            <span class="hljs-keyword">if</span> (query[curQuery].x2 == i) &#123;<br>                ans[query[curQuery].i] = dp[query[curQuery].y2][hashNode(query[curQuery].x1, query[curQuery].y1)];<br>                curQuery++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; q; ++i)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (ans[i] ? <span class="hljs-string">&quot;yes&quot;</span> : <span class="hljs-string">&quot;no&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们计算一下复杂度: $O(n^4) = 500^4 = 62,500,000,000$，这肯定不行，就算压位也不能通过</p><p>所以需要优化</p><p>问题出在需要计算所有的点可达问题，这就导致了计算一个节点就需要 $O(n^2)$ 的时间，非常不合理</p><p>如果试图减少一个 $n$，那么我们只能计算能否到达某一行或者某一列的值，而不能计算全部</p><p>但是考虑双向，如果我们知道出发点能够到达某个节点。而目标点可以来自同一个点，那么也同样可以说明可以到达</p><p>所以这个特殊的一行或者一列将地图分为两半，同时若询问是跨立在这一行或者这一列，则可以回答，但是对于没有跨立的如何解决？</p><p style="font-weight: 900;text-align: center;color: red;font-size: 50px;">分治</p><p>以横向为例，不断取横向中间轴作为特定行，不断计算跨此轴的询问的解，复杂度为 $O(n^3logn) = 500^3 * log(500) = 337,371,250$，似乎可行</p><p>可以得到第二份代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> QUERY_LEN = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">505</span>;<br><br><span class="hljs-keyword">char</span> mp[NUM][NUM];<br><span class="hljs-keyword">int</span> n, m, ans[QUERY_LEN];<br><span class="hljs-keyword">int</span> L[NUM][NUM], U[NUM][NUM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> id, x1, y1, x2, y2;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;node&gt; queryList;<br><span class="hljs-keyword">unsigned</span> vis1[NUM][NUM][DIV], vis2[NUM][NUM][DIV];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> *v)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span>) * DIV);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cpFlag</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> *dist, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> *from)</span> </span>&#123;<br>    <span class="hljs-built_in">memcpy</span>(dist, from, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span>) * DIV);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">orFlag</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> *dist, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> *from)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; DIV; ++i) dist[i] |= from[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setFlagTrue</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> *v, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    v[id] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">andFlagAny</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> *a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; DIV; ++i) <span class="hljs-keyword">if</span> (a[i] &amp; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-built_in">vector</span>&lt;node&gt; &amp;q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid; i &gt;= l; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            reset(vis1[i][j]);<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (i == mid) setFlagTrue(vis1[i][j], j);<br>            <span class="hljs-keyword">else</span> cpFlag(vis1[i][j], vis1[i + <span class="hljs-number">1</span>][j]);<br>            orFlag(vis1[i][j], vis1[i][j + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid; i &lt;= r; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            reset(vis2[i][j]);<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (i == mid) setFlagTrue(vis2[i][j], j);<br>            <span class="hljs-keyword">else</span> cpFlag(vis2[i][j], vis2[i - <span class="hljs-number">1</span>][j]);<br>            orFlag(vis2[i][j], vis2[i][j - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;node&gt; vl, vr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it: q) &#123;<br>        <span class="hljs-keyword">if</span> (it.x2 &lt; mid) vl.push_back(it);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (it.x1 &gt; mid) vr.push_back(it);<br>        <span class="hljs-keyword">else</span> ans[it.id] = andFlagAny(vis1[it.x1][it.y1], vis2[it.x2][it.y2]);<br>    &#125;<br>    dfs(l, mid - <span class="hljs-number">1</span>, vl);<br>    dfs(mid + <span class="hljs-number">1</span>, r, vr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) L[i][j] = L[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) U[i][j] = U[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++) &#123;<br>        <span class="hljs-keyword">int</span> op, x1, x2, y1, y2;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) &#123;<br>            ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (y1 != y2 || U[x2][y2] &lt; x2 - x1) ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> ans[i] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (x1 != x2 || L[x2][y2] &lt; y2 - y1) ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> ans[i] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            queryList.push_back(&#123;i, x1, y1, x2, y2&#125;);<br>        &#125;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, n, queryList);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++) <span class="hljs-built_in">cout</span> &lt;&lt; (ans[i] ? <span class="hljs-string">&quot;yes\n&quot;</span> : <span class="hljs-string">&quot;no\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，还是不对，实际上是空间超限了</p><p>仔细思考，实际上我们使用了 <code>int</code> 来模拟一个布尔值组，非常浪费空间，可以进行压位，得到最终的代码，此时的复杂度为 $O(n^3logn / 64) = 500^3 * log(500) / 64 = 5,271,425$，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> QUERY_LEN = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">505</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> LEN = <span class="hljs-number">64</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> bits;<br><br><span class="hljs-keyword">char</span> mp[NUM][NUM];<br><span class="hljs-keyword">int</span> n, m, ans[QUERY_LEN];<br><span class="hljs-keyword">int</span> L[NUM][NUM], U[NUM][NUM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> id, x1, y1, x2, y2;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;node&gt; queryList;<br>bits vis1[NUM][NUM][DIV], vis2[NUM][NUM][DIV];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(bits *v)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(v, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(bits) * DIV);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cpFlag</span><span class="hljs-params">(bits *dist, <span class="hljs-keyword">const</span> bits *from)</span> </span>&#123;<br>    <span class="hljs-built_in">memcpy</span>(dist, from, <span class="hljs-keyword">sizeof</span>(bits) * DIV);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">orFlag</span><span class="hljs-params">(bits *dist, <span class="hljs-keyword">const</span> bits *from)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; DIV; ++i) dist[i] |= from[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setFlagTrue</span><span class="hljs-params">(bits *v, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    v[id / LEN] |= ((bits) <span class="hljs-number">1u</span>) &lt;&lt; (id % LEN);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">andFlagAny</span><span class="hljs-params">(<span class="hljs-keyword">const</span> bits *a, <span class="hljs-keyword">const</span> bits *b)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; DIV; ++i) <span class="hljs-keyword">if</span> (a[i] &amp; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-built_in">vector</span>&lt;node&gt; &amp;q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid; i &gt;= l; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            reset(vis1[i][j]);<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (i == mid) setFlagTrue(vis1[i][j], j);<br>            <span class="hljs-keyword">else</span> cpFlag(vis1[i][j], vis1[i + <span class="hljs-number">1</span>][j]);<br>            orFlag(vis1[i][j], vis1[i][j + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid; i &lt;= r; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            reset(vis2[i][j]);<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (i == mid) setFlagTrue(vis2[i][j], j);<br>            <span class="hljs-keyword">else</span> cpFlag(vis2[i][j], vis2[i - <span class="hljs-number">1</span>][j]);<br>            orFlag(vis2[i][j], vis2[i][j - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;node&gt; vl, vr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it: q) &#123;<br>        <span class="hljs-keyword">if</span> (it.x2 &lt; mid) vl.push_back(it);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (it.x1 &gt; mid) vr.push_back(it);<br>        <span class="hljs-keyword">else</span> ans[it.id] = andFlagAny(vis1[it.x1][it.y1], vis2[it.x2][it.y2]);<br>    &#125;<br>    dfs(l, mid - <span class="hljs-number">1</span>, vl);<br>    dfs(mid + <span class="hljs-number">1</span>, r, vr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) L[i][j] = L[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) U[i][j] = U[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++) &#123;<br>        <span class="hljs-keyword">int</span> op, x1, x2, y1, y2;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) &#123;<br>            ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (y1 != y2 || U[x2][y2] &lt; x2 - x1) ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> ans[i] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (x1 != x2 || L[x2][y2] &lt; y2 - y1) ans[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> ans[i] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            queryList.push_back(&#123;i, x1, y1, x2, y2&#125;);<br>        &#125;<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, n, queryList);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++) <span class="hljs-built_in">cout</span> &lt;&lt; (ans[i] ? <span class="hljs-string">&quot;yes\n&quot;</span> : <span class="hljs-string">&quot;no\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，如果你了解 <code>bitset</code> 的话，那么就更好办了</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile 中下载 JDK8</title>
    <link href="/2021/11/18/develop-note/dockerfile-run-apt-install-jdk-8/"/>
    <url>/2021/11/18/develop-note/dockerfile-run-apt-install-jdk-8/</url>
    
    <content type="html"><![CDATA[<h1 id="openjdk-8-jdk-headless"><a href="#openjdk-8-jdk-headless" class="headerlink" title="openjdk-8-jdk-headless"></a>openjdk-8-jdk-headless</h1><p>在 Linux 中常用 <code>apt install openjdk-8-headless</code> 来安装 JDK，但是 dockerfile 中无法正常安装</p><h1 id="adoptopenjdk-8-hotspot"><a href="#adoptopenjdk-8-hotspot" class="headerlink" title="adoptopenjdk-8-hotspot"></a>adoptopenjdk-8-hotspot</h1><p>通常在 docker 中使用 adoptopenjdk-8-hotspot 来代替 openjdk</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -&quot;</span>]</span><br><span class="hljs-keyword">RUN</span><span class="bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo &#x27;deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb buster main&#x27; &gt; /etc/apt/sources.list.d/AdoptOpenJDK.list&quot;</span>]</span><br>apt install adoptopenjdk-<span class="hljs-number">8</span>-hotspot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>短笔记</tag>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 使用带 python 的 vim</title>
    <link href="/2021/11/15/mac/macvim/"/>
    <url>/2021/11/15/mac/macvim/</url>
    
    <content type="html"><![CDATA[<p>mac 自带的 vim 并不支持 python<br>采用 brew 的 macvim 代替即可</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">brew install macvim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 截图唤起速度慢</title>
    <link href="/2021/10/24/mac/screen-cut/"/>
    <url>/2021/10/24/mac/screen-cut/</url>
    
    <content type="html"><![CDATA[<ul><li>打开截屏软件</li><li>选中任意一个录制的按钮</li><li>点击选项</li><li>取消 mac 麦克风按钮</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>截图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 语言实现动态变化的线程池</title>
    <link href="/2021/10/13/cpp/thread-pool/"/>
    <url>/2021/10/13/cpp/thread-pool/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h2><p>Job 作为任务的类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Job</span> &#123;</span><br>    <span class="hljs-keyword">void</span> *data;<br>    function&lt;<span class="hljs-keyword">void</span>(<span class="hljs-keyword">void</span> *data)&gt; func;<br><span class="hljs-keyword">public</span>:<br>    Job(<span class="hljs-keyword">void</span> *data, function&lt;<span class="hljs-keyword">void</span>(<span class="hljs-keyword">void</span> *data)&gt; func);<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exec</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中定义两个变量，<code>data</code>，和 <code>func</code>。</p><p><code>func</code> 用来保存需要调用的方法，当执行任务时，调用此函数即可。考虑到需要传递参数的可能，所以定义参数为一个指针，而另一个变量 data 则为需要传递给 func 的参数指针</p><p>函数的实现为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Job::Job(<span class="hljs-keyword">void</span> *data, function&lt;<span class="hljs-keyword">void</span>(<span class="hljs-keyword">void</span> *)&gt; func) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;data = data;<br>    <span class="hljs-keyword">this</span>-&gt;func = move(func);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Job::exec</span><span class="hljs-params">()</span> </span>&#123;<br>    func(data);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程池核心代码"><a href="#线程池核心代码" class="headerlink" title="线程池核心代码"></a>线程池核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    Mutex&lt;<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">pthread_t</span>, thread *&gt;&gt; threadPool;             <span class="hljs-comment">// 线程池</span><br>    Mutex&lt;<span class="hljs-built_in">queue</span>&lt;Job *&gt;&gt; enqueue;                            <span class="hljs-comment">// 任务队列</span><br>    Mutex&lt;<span class="hljs-built_in">vector</span>&lt;thread *&gt;&gt; deathThread;                    <span class="hljs-comment">// 已经死亡的线程</span><br>    Mutex&lt;<span class="hljs-keyword">int</span>&gt; needKill;                                    <span class="hljs-comment">// 需要杀死的线程数量</span><br>    condition_variable noTaskCv;                            <span class="hljs-comment">// 无任务时的条件信号量</span><br>    mutex noTaskCvMutex;                                    <span class="hljs-comment">// 无任务的条件信号量的锁</span><br>    <span class="hljs-keyword">int</span> maxCore;                                            <span class="hljs-comment">// 核心线程数</span><br>    <span class="hljs-keyword">bool</span> killed;                                            <span class="hljs-comment">// 已经终止了</span><br><br>    <span class="hljs-function">Job *<span class="hljs-title">takeJob</span><span class="hljs-params">()</span></span>;                                         <span class="hljs-comment">// 获取一个任务</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addThread</span><span class="hljs-params">()</span></span>;                               <span class="hljs-comment">// 添加一个线程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span></span>;                                           <span class="hljs-comment">// 清理所有死亡的线程</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">ThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> core)</span></span>;                          <span class="hljs-comment">// 构造函数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submit</span><span class="hljs-params">(Job *job)</span></span>;                                  <span class="hljs-comment">// 提交任务，需要提交一个指针类型，且不需要主动 delete，当任务完成后，会被线程池 delete 掉</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAccumulation</span><span class="hljs-params">()</span></span>;                                  <span class="hljs-comment">// 获取当前堆积任务数量</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateCore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCount)</span></span>;                          <span class="hljs-comment">// 更新核心线程数，若增加则会新增线程，若减少则会在空闲时间关闭部分线程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span></span>;                                            <span class="hljs-comment">// 设定线程池为终止，不再可以提交任务，并等待所有任务完成</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;                                           <span class="hljs-comment">// 强制关闭线程池，不等待任务完成</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>首先通过 init 函数初始化核心线程数</li><li>通过 submit 的函数提交任务，必须是一个 job 指针，且必须是单独 new 出来的，线程池会自动清理已经完成的任务</li><li>可以随时通过 getAccumulation 来获取到当前堆积的任务，使得可以手动调整线程池数量</li><li>使用 upateCore 来调整核心线程数量</li><li><p>建议通过 wait 来实现终止线程池</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> ThreadPool::ThreadPool(<span class="hljs-keyword">int</span> core) : maxCore(core), killed(<span class="hljs-literal">false</span>), needKill(<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; core; ++i) addThread();<br>&#125;<br><br><span class="hljs-function">Job *<span class="hljs-title">ThreadPool::takeJob</span><span class="hljs-params">()</span> </span>&#123;<br>    Job *cur = <span class="hljs-literal">nullptr</span>;<br>    enqueue.run([&amp;](<span class="hljs-built_in">queue</span>&lt;Job *&gt; &amp;q) &#123;<br>        <span class="hljs-keyword">if</span> (q.empty()) <span class="hljs-keyword">return</span>;<br>        cur = q.front();<br>        q.pop();<br>    &#125;);<br>    <span class="hljs-keyword">return</span> cur;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::addThread</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> work = [&amp;]() &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            Job *cur = takeJob();<br>            <span class="hljs-keyword">if</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>                cur-&gt;exec();<br>                <span class="hljs-keyword">delete</span> cur;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">bool</span> dead = <span class="hljs-literal">false</span>;<br>                needKill.run([&amp;](<span class="hljs-keyword">int</span> &amp;count) &#123;<br>                    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>                    dead = <span class="hljs-literal">true</span>;<br>                    count--;<br>                &#125;);<br>                <span class="hljs-keyword">if</span> (dead) <span class="hljs-keyword">break</span>;<br><br>                clean();<br>                <span class="hljs-function">unique_lock&lt;mutex&gt; <span class="hljs-title">lk</span><span class="hljs-params">(noTaskCvMutex)</span></span>;<br>                noTaskCv.wait(lk);<br>            &#125;<br>        &#125;<br>        threadPool.run([&amp;](<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">pthread_t</span>, thread *&gt; &amp;data) &#123;<br>            <span class="hljs-keyword">auto</span> iter = data.find(pthread_self());<br>            deathThread.run([&amp;](<span class="hljs-built_in">vector</span>&lt;thread *&gt; &amp;data) &#123;<br>                data.push_back(iter-&gt;second);<br>            &#125;);<br>            data.erase(iter);<br>        &#125;);<br>    &#125;;<br><br>    <span class="hljs-keyword">auto</span> *newThread = <span class="hljs-keyword">new</span> thread(work);<br>    threadPool.run([&amp;](<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">pthread_t</span>, thread *&gt; &amp;data) &#123;<br>        data.insert(&#123;newThread-&gt;native_handle(), newThread&#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::clean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (deathThread.get().empty()) <span class="hljs-keyword">return</span>;<br>    deathThread.run([&amp;](<span class="hljs-built_in">vector</span>&lt;thread *&gt; &amp;data) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: data) <span class="hljs-keyword">delete</span> item;<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::submit</span><span class="hljs-params">(Job *job)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (killed) <span class="hljs-keyword">return</span>;<br>    enqueue.run([&amp;](<span class="hljs-built_in">queue</span>&lt;Job *&gt; &amp;q) &#123;<br>        q.push(job);<br>        noTaskCv.notify_one();<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ThreadPool::getAccumulation</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) enqueue.get().size();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::updateCore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCount)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (killed) <span class="hljs-keyword">return</span>;<br>    needKill.run([&amp;](<span class="hljs-keyword">int</span> &amp;cleaned) &#123;<br>        <span class="hljs-keyword">if</span> (newCount &gt; <span class="hljs-keyword">this</span>-&gt;maxCore)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-keyword">this</span>-&gt;maxCore; i &lt; newCount; ++i)<br>                addThread();<br>        <span class="hljs-keyword">else</span> &#123;<br>            cleaned += <span class="hljs-keyword">this</span>-&gt;maxCore - newCount;<br>            noTaskCv.notify_all();<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::wait</span><span class="hljs-params">()</span> </span>&#123;<br>    updateCore(<span class="hljs-number">0</span>);<br>    killed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">pthread_t</span>, thread *&gt; tmp = threadPool.get();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: tmp)<br>        item.second-&gt;join();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ThreadPool::close</span><span class="hljs-params">()</span> </span>&#123;<br>    killed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">pthread_t</span>, thread *&gt; tmp = threadPool.get();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: tmp) &#123;<br>        pthread_kill(item.first, SIGKILL);<br>        <span class="hljs-keyword">delete</span> item.second;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程任务流程"><a href="#线程任务流程" class="headerlink" title="线程任务流程"></a>线程任务流程</h2></li><li>尝试获取一个任务</li><li>若有任务<ul><li>执行任务</li><li>删除任务</li></ul></li><li>若无任务<ul><li>检查是否有需要杀死的线程</li><li>若有需要杀死的线程<ul><li>将当前线程添加进入已经结束线程组</li><li>将当前线程从线程池中移除</li></ul></li><li>若无需要杀死的线程<ul><li>清理需要删除的任务</li><li>进入等待状态</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round#744 (Div. 3)</title>
    <link href="/2021/09/29/acm/CodeforcesRound744(Div.3)/"/>
    <url>/2021/09/29/acm/CodeforcesRound744(Div.3)/</url>
    
    <content type="html"><![CDATA[<p><em>自从退役之后，打了三个月的工，然后再来打这一场 Div3，庆幸自己还能打打，在最后还剩 4 分钟的时候 A 掉了 G 题，终于在比赛期间 AK</em></p><h1 id="A-Casimir’s-String-Solitaire"><a href="#A-Casimir’s-String-Solitaire" class="headerlink" title="A. Casimir’s String Solitaire"></a>A. Casimir’s String Solitaire</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一个字符串，仅还有 <code>&#39;A&#39;, &#39;B&#39;, &#39;C&#39;</code> 三个字符，每次可以同时删除任意两个 <code>&#39;A&#39;, &#39;B&#39;</code>，也可以同时删除两个 <code>&#39;B&#39;, &#39;C&#39;</code>。判断一个字符串能过上述操作变为空字符串</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>统计了一下所有字符串中每个字符串的数量，然后若 <code>&#39;B&#39;</code> 的数量和 <code>&#39;A&#39;</code> 和 <code>&#39;C&#39;</code> 的数量之和相同，则 OK</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-built_in">string</span> str;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; str;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : str) &#123;<br>            <span class="hljs-keyword">switch</span> (item) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                    a++;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>                    b++;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                    c++;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (a + c == b ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Shifting-Sort"><a href="#B-Shifting-Sort" class="headerlink" title="B. Shifting Sort"></a>B. Shifting Sort</h1><h2 id="大致题意-1"><a href="#大致题意-1" class="headerlink" title="大致题意"></a>大致题意</h2><p>一个字符串，每次允许选择其中一个区间，对这个区间进行移位运算，使得这个数组最终有序，使用此操作不能超过整个数组长度次数</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>这已经把插入排序写在脸上了</p><h2 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; ans;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> l = i + <span class="hljs-number">1</span>, r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j) &#123;<br>                <span class="hljs-keyword">if</span> (data[j] &gt; data[j + <span class="hljs-number">1</span>]) &#123;<br>                    l--;<br>                    swap(data[j], data[j + <span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l != r) ans.emplace_back(l, r);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: ans) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; item.second - item.first &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Ticks"><a href="#C-Ticks" class="headerlink" title="C. Ticks"></a>C. Ticks</h1><h2 id="大致题意-2"><a href="#大致题意-2" class="headerlink" title="大致题意"></a>大致题意</h2><p>一个矩形网格，在上面画 <code>&#39;V&#39;</code> 字形，问，当前对矩形网格上，是否是可以通过画若干个至少为 <code>&#39;k&#39;</code> 大的 <code>&#39;V&#39;</code> 来满足</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先所有 <code>&#39;V&#39;</code> 的特点是最下面的点，每个 <code>&#39;V&#39;</code> 都可以用最下面的点来标记 <code>&#39;V&#39;</code>，而其两臂则可以有多长就多长即可。所以可以很轻松得出，应该从下往上遍历来解决问题</p><p>如果从下向上遍历，那么若遇到一个 <code>&#39;*&#39;</code> 点，有可能是之前 <code>&#39;V&#39;</code> 的臂，也有可能是新的 <code>&#39;V&#39;</code>，同时也可以是两者的结合。所以需要一个标记数组，表示每个点是否已经被下面的 <code>&#39;V&#39;</code> 给画过了，若没有，则这里必定是 <code>&#39;V&#39;</code> 的起点。<br>但是若为画过，则需要同时考虑两种情况</p><h2 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, m, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt; vis(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>            vis[i].resize(m, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">auto</span> findCell = [&amp;](<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) &#123;<br>            <span class="hljs-keyword">int</span> cur = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">bool</span> left = x &gt;= i &amp;&amp; y &gt;= i &amp;&amp; data[y - i][x - i] == <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">bool</span> right = x + i &lt; m &amp;&amp; y &gt;= i &amp;&amp; data[y - i][x + i] == <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (left &amp;&amp; right) &#123;<br>                    cur++;<br>                    vis[y - i][x - i] = <span class="hljs-literal">true</span>;<br>                    vis[y - i][x + i] = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur &lt; k) flag = <span class="hljs-literal">false</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">auto</span> tryCell = [&amp;](<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) &#123;<br>            <span class="hljs-keyword">int</span> cur = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">bool</span> left = x &gt;= i &amp;&amp; y &gt;= i &amp;&amp; data[y - i][x - i] == <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">bool</span> right = x + i &lt; m &amp;&amp; y &gt;= i &amp;&amp; data[y - i][x + i] == <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (left &amp;&amp; right) &#123;<br>                    cur++;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur &gt;= k) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cur + <span class="hljs-number">1</span>; ++i) &#123;<br>                    vis[y - i][x - i] = <span class="hljs-literal">true</span>;<br>                    vis[y - i][x + i] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j)<br>                <span class="hljs-keyword">if</span> (data[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!vis[i][j]) findCell(j, i);<br>                    <span class="hljs-keyword">else</span> tryCell(j, i);<br>                &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (flag ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Productive-Meeting"><a href="#D-Productive-Meeting" class="headerlink" title="D. Productive Meeting"></a>D. Productive Meeting</h1><h2 id="大致题意-3"><a href="#大致题意-3" class="headerlink" title="大致题意"></a>大致题意</h2><p>有 $n$ 堆石头，每堆石头有若干数量，每次从两堆不同堆石头中取出各一个，如何取使得最后所有堆的石头和最少</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>第一反应过来以为是背包问题，就是普通的分为两组然后尽可能均分。但是很快意识到不对，因为可以一个人在两堆中变换。然后就简单了，简单的不断取出最大的两堆，各取一个，直到不能取出两个即可</p><h2 id="AC-Code-3"><a href="#AC-Code-3" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; prq;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> tmp;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            prq.push(&#123;tmp, i&#125;);<br>        &#125;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">while</span> (prq.size() &gt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">auto</span> a = prq.top();<br>            prq.pop();<br>            <span class="hljs-keyword">auto</span> b = prq.top();<br>            prq.pop();<br>            ans.emplace_back(a.second, b.second);<br>            <span class="hljs-keyword">if</span> (a.first &gt; <span class="hljs-number">1</span>) prq.push(&#123;a.first - <span class="hljs-number">1</span>, a.second&#125;);<br>            <span class="hljs-keyword">if</span> (b.first &gt; <span class="hljs-number">1</span>) prq.push(&#123;b.first - <span class="hljs-number">1</span>, b.second&#125;);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : ans) <span class="hljs-built_in">cout</span> &lt;&lt; item.first + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; item.second + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E1-Permutation-Minimization-by-Deque"><a href="#E1-Permutation-Minimization-by-Deque" class="headerlink" title="E1. Permutation Minimization by Deque"></a>E1. Permutation Minimization by Deque</h1><h2 id="大致题意-4"><a href="#大致题意-4" class="headerlink" title="大致题意"></a>大致题意</h2><p>一个双向队列，按照一定顺序往其中插入一组值，在已知接下来要插入的值的顺序后，如何确定每一次插入队列前面还是后面，使得整个序列的字典序最小</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>设计的逻辑很简单，其实每次插入时，若比第一个值大，那么插入到后面，否则一定会使整体值增加，反正则插入到前面即可</p><h2 id="AC-Code-4"><a href="#AC-Code-4" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        res.push_back(data[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (res.front() &gt; data[i]) res.push_front(data[i]);<br>            <span class="hljs-keyword">else</span> res.push_back(data[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : res) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E2-Array-Optimization-by-Deque"><a href="#E2-Array-Optimization-by-Deque" class="headerlink" title="E2. Array Optimization by Deque"></a>E2. Array Optimization by Deque</h1><h2 id="大致题意-5"><a href="#大致题意-5" class="headerlink" title="大致题意"></a>大致题意</h2><p>和上一题差不多的同时，这次需要的是使得逆序对尽可能少</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>贪心解决了，每次插入的时候，若插入到最前面产生的逆序对数量少于最后面，则插入到前面，否则后面。而计算数量，应该是很久没训练了，一下子只能想到线段树，所以就直接上一个动态开点的线段树解决了</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">3e6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> L = <span class="hljs-number">-1e9</span> - <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> R = <span class="hljs-number">1e9</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegTree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> s[N], l[N], r[N];<br>    <span class="hljs-keyword">int</span> tot;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        tot = <span class="hljs-number">1</span>;<br>        s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        l[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        r[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">newNode</span><span class="hljs-params">()</span> </span>&#123;<br>        s[tot] = <span class="hljs-number">0</span>;<br>        l[tot] = <span class="hljs-number">-1</span>;<br>        r[tot] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> tot++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l[x] == <span class="hljs-number">-1</span>)<br>            l[x] = newNode();<br>        <span class="hljs-keyword">return</span> l[x];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (r[x] == <span class="hljs-number">-1</span>)<br>            r[x] = newNode();<br>        <span class="hljs-keyword">return</span> r[x];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        s[x] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (l[x] != <span class="hljs-number">-1</span>) s[x] += s[l[x]];<br>        <span class="hljs-keyword">if</span> (r[x] != <span class="hljs-number">-1</span>) s[x] += s[r[x]];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> cur, <span class="hljs-keyword">int</span> ll, <span class="hljs-keyword">int</span> rr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ll == rr) &#123;<br>            s[cur]++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (ll + rr) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;= mid) add(x, lc(cur), ll, mid);<br>        <span class="hljs-keyword">else</span> add(x, rc(cur), mid + <span class="hljs-number">1</span>, rr);<br>        up(cur);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> cur, <span class="hljs-keyword">int</span> ll, <span class="hljs-keyword">int</span> rr)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ll == x &amp;&amp; rr == y) &#123;<br>            <span class="hljs-keyword">return</span> s[cur];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[cur] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mid = (ll + rr) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (y &lt;= mid) &#123;<br>            <span class="hljs-keyword">return</span> query(x, y, lc(cur), ll, mid);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid) &#123;<br>            <span class="hljs-keyword">return</span> query(x, y, rc(cur), mid + <span class="hljs-number">1</span>, rr);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> query(x, mid, lc(cur), ll, mid) + query(mid + <span class="hljs-number">1</span>, y, rc(cur), mid + <span class="hljs-number">1</span>, rr);<br>        &#125;<br>    &#125;<br>&#125; segTree;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>        segTree.init();<br>        segTree.add(data[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, L, R);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> left = segTree.query(data[i] + <span class="hljs-number">1</span>, R, <span class="hljs-number">0</span>, L, R);<br>            <span class="hljs-keyword">int</span> right = segTree.query(L, data[i] - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, L, R);<br>            ans += min(left, right);<br>            segTree.add(data[i], <span class="hljs-number">0</span>, L, R);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-Array-Stabilization-AND-version"><a href="#F-Array-Stabilization-AND-version" class="headerlink" title="F. Array Stabilization (AND version)"></a>F. Array Stabilization (AND version)</h1><h2 id="大致题意-6"><a href="#大致题意-6" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一个 <code>01</code> 字符串，每次进行对此字符串的某个移位运算后的值进行 <code>AND</code> 运算的，直到此字符串不再改变，需要多少次才能使得整个字符串变为纯 <code>0</code> 的字符串</p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>根据移位操作，建图，然后在拓扑，找出最长链就行了，若不能完整拓扑，则不能</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, d;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; d;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (data[i] == <span class="hljs-number">1</span>) &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">to</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">deg</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> nxt = (i + n - d) % n;<br>            <span class="hljs-keyword">if</span> (data[i] == <span class="hljs-number">1</span> &amp;&amp; data[nxt] == <span class="hljs-number">1</span>) &#123;<br>                to[i] = nxt;<br>                deg[nxt] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; q;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">if</span> (!deg[i]) q.push(&#123;i, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> vis = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>            <span class="hljs-keyword">auto</span> cur = q.front();<br>            q.pop();<br>            vis++;<br>            ans = max(ans, cur.second + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (to[cur.first] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>            deg[to[cur.first]] = <span class="hljs-literal">false</span>;<br>            q.push(&#123;to[cur.first], cur.second + <span class="hljs-number">1</span>&#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (vis == n)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-Minimal-Coverage"><a href="#G-Minimal-Coverage" class="headerlink" title="G. Minimal Coverage"></a>G. Minimal Coverage</h1><h2 id="大致题意-7"><a href="#大致题意-7" class="headerlink" title="大致题意"></a>大致题意</h2><p>有 $n$ 段线段，首尾相连，连接处可以折叠，求出折叠后，这些线段占用的最小总长度</p><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>借用一下数据量并不大的特点，可以直接暴力找所有可能的情况。创建一个布尔数组，若此处为 true 则表示可以从这里开始，否则不能。通过滚动的方式进行 dp 最后找到任意一处为 true 则为成功。</p><p>当然此方法仅适合用于 check，所以加一个二分就能解决了</p><h2 id="AC-Code-5"><a href="#AC-Code-5" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][<span class="hljs-number">3100</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">2000</span>;<br><br>        <span class="hljs-keyword">auto</span> cal = [&amp;](<span class="hljs-keyword">int</span> len) &#123;<br>            <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>, nxt = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">memset</span>(vis[nxt], <span class="hljs-literal">true</span>, <span class="hljs-keyword">sizeof</span>(vis[nxt]));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item: data) &#123;<br>                <span class="hljs-built_in">memset</span>(vis[cur], <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(vis[cur]));<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>                    <span class="hljs-keyword">if</span> (vis[nxt][i]) &#123;<br>                        <span class="hljs-keyword">if</span> (i - item &gt;= <span class="hljs-number">0</span>) vis[cur][i - item] = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">if</span> (i + item &lt; len) vis[cur][i + item] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>                swap(cur, nxt);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) <span class="hljs-keyword">if</span> (vis[nxt][i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">while</span> (l + <span class="hljs-number">3</span> &lt; r) &#123;<br>            <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cal(mid + <span class="hljs-number">1</span>)) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l + <span class="hljs-number">5</span>; i &gt;= l - <span class="hljs-number">5</span>; --i) &#123;<br>            <span class="hljs-keyword">if</span> (!cal(i + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学</title>
    <link href="/2021/06/10/notebook/Computer-Graphics/"/>
    <url>/2021/06/10/notebook/Computer-Graphics/</url>
    
    <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><ul><li>屏幕分辨率：用水平和垂直方向所能显示光点数总和的乘积表示</li><li>显示分辨率：用水平和垂直方向所能显示像素点总和的乘积表示</li><li>存储分辨率：指帧缓存区域的大小</li></ul><h3 id="帧缓存计算"><a href="#帧缓存计算" class="headerlink" title="帧缓存计算"></a>帧缓存计算</h3><script type="math/tex; mode=display">水平分辨率 * 垂直分辨率 * 每个像素所占用的字节</script><h1 id="图的表示和数据结构"><a href="#图的表示和数据结构" class="headerlink" title="图的表示和数据结构"></a>图的表示和数据结构</h1><ul><li>复杂的图形通常被看作是由一些基本图形元素（图元）构成的。基本二维图元包括点、直线、圆弧、多边形、字体符号和位图等</li><li>图元通常是指不可再分的独立的图形实体。一个图元中的所有像素点、直线、顶点等是作为一个整体存在的，不再细分为独立的图元。</li></ul><h1 id="基本图形生成算法"><a href="#基本图形生成算法" class="headerlink" title="基本图形生成算法"></a>基本图形生成算法</h1><h2 id="直线生成算法"><a href="#直线生成算法" class="headerlink" title="直线生成算法"></a>直线生成算法</h2><h3 id="数值微分法"><a href="#数值微分法" class="headerlink" title="数值微分法"></a>数值微分法</h3><p>定义</p><script type="math/tex; mode=display">\epsilon = \frac{1}{max(|\Delta x|, |\Delta y|)}</script><p>则递推公式为</p><script type="math/tex; mode=display">\left\{\begin{aligned}x' = Math.round(x + \epsilon \cdot \Delta x) \\y' = Math.round(y + \epsilon \cdot \Delta y)\end{aligned}\right.</script><h3 id="逐点比较法"><a href="#逐点比较法" class="headerlink" title="逐点比较法"></a>逐点比较法</h3><p>略</p><h3 id="Bresenham-直线算法"><a href="#Bresenham-直线算法" class="headerlink" title="Bresenham 直线算法"></a>Bresenham 直线算法</h3><p>假定 $\Delta x &gt; \Delta y$</p><ol><li>计算得到 $\Delta x = (x_1 - x_0), \Delta y = (y_1 - y_0)$</li><li>定义 $x = x_0, d = - \Delta x, y = y_0$</li><li>绘制点 $(x_0, y_0)$</li><li>将 $x = x + 1$</li><li>将 $d = d + 2 \cdot \Delta y$</li><li>若 $d &gt; 0$ 则 $d = d - 2 \cdot \Delta x, y = y + 1$</li><li>绘制点 $(x, y)$</li><li>若 $x \neq x_1$ 则跳到第三步</li></ol><h2 id="二次曲线生成算法"><a href="#二次曲线生成算法" class="headerlink" title="二次曲线生成算法"></a>二次曲线生成算法</h2><h3 id="Bresenham-整圆"><a href="#Bresenham-整圆" class="headerlink" title="Bresenham 整圆"></a>Bresenham 整圆</h3><p>按照八分法画圆，先绘制 $\frac{\pi}{2} 至 \frac{\pi}{4}$ 的圆，即下图的 $1b$ 区域</p><p><img src="/image/notebook/Computer-Graphics/draw-a-circle.png" alt="draw-a-circle"></p><p>定义圆的半径 $R$，则</p><ol><li>定义 $d = 1 - R, x = 0, y = R$</li><li>绘制点 $(x, y), (x, -y), (-x, y), (-x, -y), (y, x), (y, -x), (-y, x), (-y, -x)$</li><li>$x = x + 1$</li><li>若 $d &lt; 0$ 则 $d = d + 2x + 3$ 反之 $d = d + 2(x - y) + 5, y = y - 1$</li><li>若 $x &lt; y$ 则返回步骤 2，否则结束</li></ol><h2 id="区域填充算法"><a href="#区域填充算法" class="headerlink" title="区域填充算法"></a>区域填充算法</h2><h3 id="种子填充算法"><a href="#种子填充算法" class="headerlink" title="种子填充算法"></a>种子填充算法</h3><p>在区域内部找到一个像素，通过在这个像素的基础上，对邻接的像素进行搜索，并将邻接的像素作为下一个种子</p><h3 id="扫描线种子填充算法"><a href="#扫描线种子填充算法" class="headerlink" title="扫描线种子填充算法"></a>扫描线种子填充算法</h3><p>给定的种子点开始，填充当前扫描线上种子点所在的区间，然后确定与这一区间相邻上下两条扫描线上需要填充的区间，在这些区间上取最左侧或最右侧的一个点作为新的种子点。不断重复以上过程，直至所有区间都被处理完</p><ol><li>初始化一个栈用来存放种子点</li><li>将初始的种子放入栈中</li><li>若栈为空，则结束算法</li><li>取出栈上的第一个点，作为当前种子</li><li>从当前种子出发，向左右两边延伸，直到遇到边界</li><li>从左往右扫描这条扫描线相邻的 $y - 1$ 和 $y + 1$ 的像素，若不是边界，则将其中所有相邻线段的最右边的像素放入栈中</li><li>回到第三步</li></ol><h3 id="射线法"><a href="#射线法" class="headerlink" title="射线法"></a>射线法</h3><p>从外部点出发，沿任意方向发射射线，若射线与多边形的交点个数为奇数，则为内部，否则为外部</p><h3 id="弧长法"><a href="#弧长法" class="headerlink" title="弧长法"></a>弧长法</h3><p>略</p><h3 id="有效边表算法"><a href="#有效边表算法" class="headerlink" title="有效边表算法"></a>有效边表算法</h3><p>考虑对于每一条直线 $y = kx + b$，当 $y’ = y + 1$ 时， $x’ = x + \frac{1}{k}$。所以求交点时，若已知一个交点 $(x, y)$，则可以通过上述公式推导出下一个交点为 $(x + \frac{1}{k}, y + 1)$</p><p>所以依照上述结论，得出如下的操作（以下图为例）<br><img src="/image/notebook/Computer-Graphics/active-edge-list-algorithm-example.png" alt="active-edge-list-algorithm-example"></p><ol><li>构建一个长度等于几何图形的最大高度的表格</li><li>将几何图形的每一条边的最低点的 $x, y_{max}, \frac{1}{k}$ 保存进入对应的 $y_{min}$ 表格中，（这三个值的顺序可以任意交换，例如下面的所有图中的数据顺序为 $y_{max}, x, \frac{1}{k}$ ），对于每一个单元，按照 $x$ 进行从小到大排序，若 $x$ 相同，则按照 $\frac{1}{k}$ 从小到大排序。所以可以得到下面的表格<br><img src="/image/notebook/Computer-Graphics/active-edge-list-algorithm-1.png" alt="active-edge-list-algorithm-1"></li><li>从最小的 $y$ 开始，不断增大 $y$，根据上一次的 $y$，计算 $y’ = y + 1$ 时，每一个元素对应的 $x’ = x + \frac{1}{k}$ ，对于当前的 $y$ 从第一个节点遍历到最后一个节点，若经过的节点数为奇数，则将这块区域内都进行染色，然后移除所有 $y = y_{max}$ 的数据，可以得到下图<br><img src="/image/notebook/Computer-Graphics/active-edge-list-algorithm-2.png" alt="active-edge-list-algorithm-2"></li></ol><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>略</p><h2 id="反走样技术"><a href="#反走样技术" class="headerlink" title="反走样技术"></a>反走样技术</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><ul><li>倾斜的直线和区域的边界呈阶梯状、锯齿状</li><li>图像细节失真，由于离散像素的四舍五入导致了本应均匀的纹理图案变得不均匀显示</li><li>很细小的线和点由于分辨率低而不能被显示出来</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>超采样：以高于物理设备的分辨率完成光栅化，然后再回归到物理设备的分辨率</li><li>计算线段跨越的面积，确定颜色值</li></ul><h1 id="二维观察"><a href="#二维观察" class="headerlink" title="二维观察"></a>二维观察</h1><p>使用齐次坐标表示一个点的坐标</p><script type="math/tex; mode=display">\left(\begin{matrix}x & y\end{matrix}\right)\rightarrow\left(\begin{matrix}x & y & 1\end{matrix}\right)</script><p>为什么使用齐次坐标系：使图形变换转化为表示图形的点集矩阵与某一变换矩阵相乘，可以借助计算机的高速运算</p><h2 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h2><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}1 & 0 & 0 \\0 & 1 & 0 \\T_x & T_y & 1\end{matrix}\right]=\left[\begin{matrix}x + T_x & y + T_y & 1\end{matrix}\right]</script><h3 id="比例缩放"><a href="#比例缩放" class="headerlink" title="比例缩放"></a>比例缩放</h3><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}S_x & 0 & 0 \\0 & S_y & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}xS_x & yS_y & 1\end{matrix}\right]</script><p>或</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}1 & 0 & 0 \\0 & 1 & 0 \\0 & 0 & S\end{matrix}\right]=\left[\begin{matrix}\frac{x}{S} & \frac{y}{S} & 1\end{matrix}\right]</script><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>关于原点进行<font color=red>逆</font>时针旋转</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}cos(\theta) & sin(\theta) & 0 \\-sin(\theta) & cos(\theta) & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}xcos(\theta) - ysin(\theta) & xsin(\theta) + ycos(\theta) & 1\end{matrix}\right]</script><p>关于原点进行<font color=red>顺</font>时针旋转</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}cos(\theta) & -sin(\theta) & 0 \\sin(\theta) & cos(\theta) & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}xcos(\theta) + ysin(\theta) & -xsin(\theta) + ycos(\theta) & 1\end{matrix}\right]</script><h3 id="对称变换"><a href="#对称变换" class="headerlink" title="对称变换"></a>对称变换</h3><p>关于<font color=red> x </font>轴对称</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}1 & 0 & 0 \\0 & -1 & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}x & -y & 1\end{matrix}\right]</script><p>关于<font color=red> y </font>轴对称</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}-1 & 0 & 0 \\0 & 1 & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}-x & y & 1\end{matrix}\right]</script><p>关于<font color=red> 原点 </font>轴对称</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}-1 & 0 & 0 \\0 & -1 & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}-x & -y & 1\end{matrix}\right]</script><p>关于<font color=red> $y = x$ </font>轴对称</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}0 & 1 & 0 \\1 & 0 & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}y & x & 1\end{matrix}\right]</script><p>关于<font color=red> $y = -x$ </font>轴对称</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & 1\end{matrix}\right]\left[\begin{matrix}0 & -1 & 0 \\-1 & 0 & 0 \\0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}-y & -x & 1\end{matrix}\right]</script><h3 id="错切变换"><a href="#错切变换" class="headerlink" title="错切变换"></a>错切变换</h3><p>略</p><h3 id="二维图形几何变换"><a href="#二维图形几何变换" class="headerlink" title="二维图形几何变换"></a>二维图形几何变换</h3><p>定义</p><script type="math/tex; mode=display">\mathbf P  = \left[\begin{matrix}x_1 & y_1 & 1 \\x_2 & y_2 & 1 \\x_3 & y_3 & 1 \\\dots \\x_n & y_n & 1\end{matrix}\right]</script><p>为这个二维多边形的所有顶点的坐标矩阵，此时再乘上变换矩阵，得到最终结果</p><h2 id="复合变换"><a href="#复合变换" class="headerlink" title="复合变换"></a>复合变换</h2><h3 id="相对任意参考点的二维变换"><a href="#相对任意参考点的二维变换" class="headerlink" title="相对任意参考点的二维变换"></a>相对任意参考点的二维变换</h3><p>先通过<a href="#平移">平移变换</a>将参考点移动至原点，然后进行变换，然后再重做<a href="#平移">平移变换</a>进行撤销一开始的变换</p><h3 id="相对任意方向的二维变换"><a href="#相对任意方向的二维变换" class="headerlink" title="相对任意方向的二维变换"></a>相对任意方向的二维变换</h3><p>先通过<a href="#旋转">旋转变换</a>将参考点移动至原点，然后进行变换，然后再重做<a href="#旋转">旋转变换</a>进行撤销一开始的变换</p><h2 id="二维观察-1"><a href="#二维观察-1" class="headerlink" title="二维观察"></a>二维观察</h2><p>略</p><h2 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h2><h3 id="点的裁剪"><a href="#点的裁剪" class="headerlink" title="点的裁剪"></a>点的裁剪</h3><p>对于点 $P(x, y)$，若满足 $x_{wl} \leq x \leq x_{wr}$ 且 $y_{wb} \leq y \leq y_{wt}$ 则在窗口内，否则在窗口外</p><h3 id="直线的裁剪"><a href="#直线的裁剪" class="headerlink" title="直线的裁剪"></a>直线的裁剪</h3><h4 id="Cohen-Sutherland-算法"><a href="#Cohen-Sutherland-算法" class="headerlink" title="Cohen-Sutherland 算法"></a>Cohen-Sutherland 算法</h4><p>对一条直线的两个顶点进行编码</p><p><img src="/image/notebook/Computer-Graphics/Cohen-Sutherland-1.png" alt="Cohen-Sutherland-1"></p><p>如图，若 $x &lt; x_l$ 则 $D_0 = 1$。若 $x &gt; x_r$ 则 $D_1 = 1$。若 $y &lt; y_b$ 则 $D_2 = 1$。若 $y &gt; y_t$ 则 $D_3 = 1$<br>若两个点 $p_1, p_2$ 的编码 $code_1, code_2$ 满足 $code_1 | code_2 = 0$ 则这条直线就在窗口内，若 $code_1 \&amp; code_2 \neq 0$ 则这条直线可以直接抛弃掉。其他情况只需要求出这条直线和四条边的交点即可<br>所以可以得到如下的流程</p><ol><li>输入点 $p_1, p_2$</li><li>对这两个点进行编码，结果为 $code_1, code_2$</li><li>若 $code_1 = 0$ 且 $code_2 = 0$ 则绘制直线 $p_1, p_2$，然后退出</li><li>若 $code_1 \&amp; code_2 \neq 0$ 则直接退出</li><li>若 $code_1 = 0$ 则交换 $p_1, p_2$，同时交换 $code_1, code_2$</li><li>若 $code_1 的 D_0 \neq 0$ 则计算直线和 $x = x_l$ 的交点，并将其赋值给 $p_1$，返回第二步</li><li>若 $code_1 的 D_1 \neq 0$ 则计算直线和 $x = x_r$ 的交点，并将其赋值给 $p_1$，返回第二步</li><li>若 $code_1 的 D_2 \neq 0$ 则计算直线和 $y = y_b$ 的交点，并将其赋值给 $p_1$，返回第二步</li><li>若 $code_1 的 D_3 \neq 0$ 则计算直线和 $y = y_t$ 的交点，并将其赋值给 $p_1$，返回第二步</li></ol><p>计算交点时，可以借用比例的方式计算，例如计算与 $x = x_l$ 的交点时，可以得到</p><script type="math/tex; mode=display">\left\{\begin{aligned}x' & = & x_l \\y' & = & y_1 + (y_2 - y_1) \times (x_l - x_1) / (x_2 - x_1)\end{aligned}\right.</script><h4 id="中点分割算法"><a href="#中点分割算法" class="headerlink" title="中点分割算法"></a>中点分割算法</h4><p>使用了和 <a href="#Cohen-Sutherland-算法">Cohen-Sutherland</a> 完全相同的编码方式，但在求解交点时略有不同。此方法包含一个“求出距离一个点最远的，且在窗口内的点”。所以分别对 $p_1, p_2$ 进行一次求解，并代替掉对方（即对于 $p_1$ 求解的答案，代替掉 $p_2$）即可，以下方法的是对 $p_1$ 进行求解的操作，对 $p_2$ 求解时，交换两个值即可</p><ol><li>若 $code_2 = 0$ 则返回 $p_2$</li><li>求出 $p_1$ 和 $p_2$ 的中点 $p_3$</li><li>若 $code_3 = 0$ 则用 $p_3$ 代替 $p_1$（仅算法内代替）</li><li>若 $code_3 \neq 0$ 则若 $code_1 \&amp; code_3$ 则用 $p_3$ 代替 $p_1$，反之，则用 $p_3$ 代替 $p_2$，回到第二步</li></ol><h4 id="Liang-Barsky-算法"><a href="#Liang-Barsky-算法" class="headerlink" title="Liang-Barsky 算法"></a>Liang-Barsky 算法</h4><ol><li>计算<script type="math/tex; mode=display">\left\{\begin{aligned}p_1 & = & -(x_2 - x_1) \\p_2 & = & x_2 - x_1 \\p_3 & = & -(y_2 - y_1) \\p_4 & = & y_2 - y_1 \\q_1 & = & x_1 - x_l \\q_2 & = & x_r - x_1 \\q_3 & = & y_1 - y_b \\q_4 & = & y_t - y_1\end{aligned}\right.</script></li><li>若满足 $p1 = 0 \ AND \  (q1 &lt; 0 \ OR \ q2 &lt; 0)$ 则直线不在窗口内</li><li>若满足 $p3 = 0 \ AND \  (q3 &lt; 0 \ OR \ q4 &lt; 0)$ 则直线不在窗口内</li><li>准备两个数组 $pos, neg$，将 $1$ 加入到数组 $pos$ 中，将 $0$ 加入到数组 $neg$ 中</li><li>若 $p1 = 0$ 则跳到第七步</li><li>若 $p1 &lt; 0$ 则将 $r1$ 放入 $neg$，把 $r2$ 放入 $pos$。反之，则将 $r1$ 放入 $pos$，把 $r2$ 放入 $neg$（$r1 = q1 / p1$，$r2 = q2 / p2$，下同）</li><li>若 $p3 = 0$ 则跳到第九步</li><li>若 $p3 &lt; 0$ 则将 $r3$ 放入 $neg$，把 $r4$ 放入 $pos$。反之，则将 $r3$ 放入 $pos$，把 $r4$ 放入 $neg$</li><li>定义 $rn1$ 为 $neg$ 中的最大值，$rn2$ 为 $pos$ 中的最小值</li><li>若 $rn1 &gt; rn2$ 则直线不在窗口内</li><li>得到交点为 $(x1 + p2 \times rn1, y1 + p4 \times rn1), (x1 + p2 \times rn2, y1 + p4 \times rn2)$</li></ol><h3 id="多边形的裁剪"><a href="#多边形的裁剪" class="headerlink" title="多边形的裁剪"></a>多边形的裁剪</h3><h4 id="Sutherland-Hodgeman-算法"><a href="#Sutherland-Hodgeman-算法" class="headerlink" title="Sutherland-Hodgeman 算法"></a>Sutherland-Hodgeman 算法</h4><p>适合凸多边形，对于凹多边形则需要先分解为多个凸多边形</p><p>对于窗口的所有边界，进行一轮裁剪，裁剪对象是多边形的所有的边。</p><p>对于一个多边形，可以认为是一系列的顶点集合，顶点之间的连线即为一个多边形。沿着顶点的连线，进行如下的裁剪操作</p><ul><li>若从窗口内到窗口外，则输出交点 $I$</li><li>若从窗口外到窗口内，则输出交点 $I$ 和到达点 $P$</li><li>若从窗口内到窗口内，则输出到达点 $P$</li><li>若从窗口外到窗口外，则不输出</li></ul><p><img src="/image/notebook/Computer-Graphics/Sutherland-Hodgeman-1.png" alt="Sutherland-Hodgeman-1"></p><p>将所有输出的点连接，得到新的多边形</p><p>对于窗口的所有边界都进行一次如上的操作，即可得到最终的图像，例如下图，为左边界对此多边形进行裁剪的结果</p><p><img src="/image/notebook/Computer-Graphics/Sutherland-Hodgeman-2.png" alt="Sutherland-Hodgeman-2"></p><h4 id="Weiler-Atherton-算法"><a href="#Weiler-Atherton-算法" class="headerlink" title="Weiler-Atherton 算法"></a>Weiler-Atherton 算法</h4><p>从多边形 $P_s$ 的任意一点出发，顺时针遍历所有点</p><ul><li>若出现从窗口外进入窗口内，则输出在窗口内的直线</li><li>若一直在窗口内，则输出直线</li><li>若出现从窗口内进入窗口外，则输出在窗口内的直线，并从此交点 $p_1$ 出发，顺时针的遍历窗口边界的所有点，直到找到第一个与窗口边界相交的多边形的点 $p_2$，则输出 $p_1, p_2$ 的这条路线</li></ul><h1 id="三维观察"><a href="#三维观察" class="headerlink" title="三维观察"></a>三维观察</h1><h2 id="三维变换"><a href="#三维变换" class="headerlink" title="三维变换"></a>三维变换</h2><h3 id="平移-1"><a href="#平移-1" class="headerlink" title="平移"></a>平移</h3><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & z' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & z & 1\end{matrix}\right]\left[\begin{matrix}1 & 0 & 0 & 0 \\0 & 1 & 0 & 0 \\0 & 0 & 1 & 0 \\T_x & T_y & T_z & 1\end{matrix}\right]=\left[\begin{matrix}x + T_x & y + T_y & z + T_z & 1\end{matrix}\right]</script><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & z' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & z & 1\end{matrix}\right]\left[\begin{matrix}a & 0 & 0 & 0 \\0 & e & 0 & 0 \\0 & 0 & i & 0 \\0 & 0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}ax & ey & iz & 1\end{matrix}\right]</script><h3 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h3><p>将右手大拇指指向旋转轴的正方向，然后四个手指的弯曲方向即为正旋转方向</p><p>绕<font color=red>z</font>轴旋转</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & z' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & z & 1\end{matrix}\right]\left[\begin{matrix}cos \theta & sin \theta & 0 & 0 \\-sin \theta & cos \theta & 0 & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}xcos \theta - y sin \theta & xsin \theta + ycos \theta & z & 1\end{matrix}\right]</script><p>绕<font color=red>x</font>轴旋转</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & z' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & z & 1\end{matrix}\right]\left[\begin{matrix}1 & 0 & 0 & 0 \\0 &cos \theta & sin \theta & 0 \\0 &-sin \theta & cos \theta & 0 \\0 & 0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}x & ycos \theta - zsin \theta & zsin \theta + zcos \theta & 1\end{matrix}\right]</script><p>绕<font color=red>y</font>轴旋转</p><script type="math/tex; mode=display">\left[\begin{matrix}x' & y' & z' & 1\end{matrix}\right]=\left[\begin{matrix}x & y & z & 1\end{matrix}\right]\left[\begin{matrix}cos \theta & 0 & -sin \theta & 0 \\0 & 1 & 0 & 0 \\sin \theta & 0 & cos \theta & 0 \\0 & 0 & 0 & 1\end{matrix}\right]=\left[\begin{matrix}zsin \theta + xcos \theta & y & zcos \theta - xsin \theta & 1\end{matrix}\right]</script><h2 id="三维投影"><a href="#三维投影" class="headerlink" title="三维投影"></a>三维投影</h2><h3 id="投影类型"><a href="#投影类型" class="headerlink" title="投影类型"></a>投影类型</h3><ul><li>透视投影<ul><li>一点透视</li><li>两点透视</li><li>三点透视</li></ul></li><li>正投影</li><li>斜投影</li></ul><h3 id="三维投影变换"><a href="#三维投影变换" class="headerlink" title="三维投影变换"></a>三维投影变换</h3><p>略</p><h1 id="曲线与曲面"><a href="#曲线与曲面" class="headerlink" title="曲线与曲面"></a>曲线与曲面</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>拟合：对已经存在的离散点列构造出尽可能光滑的曲线或曲面，用以直观（而忠实）地反映出实验特性、变化规律和趋势等。</li><li>插值：通过所有的特征点</li><li>逼近：不通过或部分通过特征点，并在整体上接近这些特征点</li></ul><h2 id="连续性条件"><a href="#连续性条件" class="headerlink" title="连续性条件"></a>连续性条件</h2><h3 id="参数连续"><a href="#参数连续" class="headerlink" title="参数连续"></a>参数连续</h3><ul><li>C0 连续：交点处的两条曲线段相交</li><li>C1 连续：交点处的两条曲线段相交，且此点的一阶导函数值相同</li><li>C2 连续：交点处的两条曲线段相交，且此点的一阶和二阶导函数都相同</li></ul><h3 id="几何连续"><a href="#几何连续" class="headerlink" title="几何连续"></a>几何连续</h3><ul><li>G0 连续：交点处的两条曲线段相交</li><li>G1 连续：交点处的两条曲线段相交，且此点的一阶导函数值成比例</li><li>G2 连续：交点处的两条曲线段相交，且此点的一阶和二阶导函数都成比例</li></ul><h2 id="三次样条（二维）"><a href="#三次样条（二维）" class="headerlink" title="三次样条（二维）"></a>三次样条（二维）</h2><p>对于 $n$ 个点，用 $n - 1$ 条曲线连接，对于每一条直线看，可以用一个三阶函数表示，所以得到</p><script type="math/tex; mode=display">\left\{\begin{aligned}f_1(x) & = a_1 + b_1x + c_1x^2 + d_1x^3 & x \in [x_0, x_1] \\f_2(x) & = a_2 + b_2x + c_2x^2 + d_2x^3 & x \in [x_1, x_2] \\f_3(x) & = a_3 + b_3x + c_3x^2 + d_3x^3 & x \in [x_2, x_3] \\\dots \\f_n(x) & = a_n + b_nx + c_nx^2 + d_nx^3 & x \in [x_{n - 1}, x_n]\end{aligned}\right.</script><p>则对于所有的曲线，由于所有曲线必须保证 G0 连续，所以可以得到如下等式</p><script type="math/tex; mode=display">\left\{\begin{aligned}f_0(x_0) & = & & & y_0 \\f_1(x_1) & = & f_0(x_1) & = & y_1 \\f_2(x_2) & = & f_1(x_2) & = & y_2 \\\dots \\f_n(x_n) & = & f_{n - 1}(x_n) & = & y_n \\\end{aligned}\right.</script><p>又为了保证 G1 连续，则可以得到他们的导数相同</p><script type="math/tex; mode=display">\left\{\begin{aligned}f_1'(x_1) & = & f_0'(x_1) \\f_2'(x_2) & = & f_1'(x_2) \\f_3'(x_3) & = & f_2'(x_3) \\\dots \\f_n'(x_n) & = & f_{n - 1}'(x_n) \\\end{aligned}\right.</script><p>为了保证 G2 连续，则他们的导数的导数相同，所以还可以得到</p><script type="math/tex; mode=display">\left\{\begin{aligned}f_1''(x_1) & = & f_0''(x_1) \\f_2''(x_2) & = & f_1''(x_2) \\f_3''(x_3) & = & f_2''(x_3) \\\dots \\f_n''(x_n) & = & f_{n - 1}''(x_n) \\\end{aligned}\right.</script><p>由此，可以计算出所有的参数</p><h2 id="Bezier-曲线"><a href="#Bezier-曲线" class="headerlink" title="Bézier 曲线"></a>Bézier 曲线</h2><script type="math/tex; mode=display">P(t) = \sum^n_{k=0}P_kBEN_{k, n}, t \in [0, 1]</script><script type="math/tex; mode=display">BEN_{k, n}(t) = \frac{n!}{k!(n - k)!}t^k(1 - t)^{n - k} = C^k_nt^k(1 - t) ^ {n - k}</script><h3 id="一阶导数"><a href="#一阶导数" class="headerlink" title="一阶导数"></a>一阶导数</h3><script type="math/tex; mode=display">P'(0) = n(P_1 - P_0)</script><script type="math/tex; mode=display">P'(1) = n(P_n - P_{n - 1})</script><h3 id="二阶导数"><a href="#二阶导数" class="headerlink" title="二阶导数"></a>二阶导数</h3><script type="math/tex; mode=display">P''(0) = n(n - 1)((P_2 - P_1) - (P_1 - P_0))</script><script type="math/tex; mode=display">P''(1) = n(n - 1)((P_{n - 2} - P_{n - 1}) - (P_{n - 1} - P_n))</script><h3 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h3><p>颠倒控制顶点，Bézier 曲线仍然保持，走向相反</p><h3 id="凸包性"><a href="#凸包性" class="headerlink" title="凸包性"></a>凸包性</h3><p>略</p><h3 id="几何不变性"><a href="#几何不变性" class="headerlink" title="几何不变性"></a>几何不变性</h3><p>Bézier 曲线与坐标轴无关</p><h3 id="G1-连续"><a href="#G1-连续" class="headerlink" title="G1 连续"></a>G1 连续</h3><p>由于一阶导数可知，若需要满足 G1 连续，则必须要满足第一条曲线的最后两个控制点和第二条曲线的开始两个控制点在同一条直线上，且保证不在同一侧，即</p><p><img src="/image/notebook/Computer-Graphics/Bezier-G1.png" alt="Bezier-G1"></p><script type="math/tex; mode=display">(P_n - P_{n - 1}) = \alpha (Q_1 - Q_0')</script><h3 id="G2-连续"><a href="#G2-连续" class="headerlink" title="G2 连续"></a>G2 连续</h3><script type="math/tex; mode=display">((P_{n - 2} - P_{n - 1}) - (P_{n - 1} - P_n)) = \beta ((Q_2 - Q_1) - (Q_1 - Q_0))</script><h1 id="消隐"><a href="#消隐" class="headerlink" title="消隐"></a>消隐</h1><h2 id="z-buffer"><a href="#z-buffer" class="headerlink" title="z-buffer"></a>z-buffer</h2><p>向 z 轴的负方向作为观察方向，以其 z 轴的大小作为深度值，保存每一个像素的颜色值和深度值，当此像素被再次覆盖时，若新的深度比之前保存的大，则用新的深度和颜色覆盖之前的值，否则不更换</p><h2 id="画家算法"><a href="#画家算法" class="headerlink" title="画家算法"></a>画家算法</h2><p>将物品从远到近排列，先绘制远处的图形，再由近处的图形进行覆盖</p><h2 id="光线投射算法"><a href="#光线投射算法" class="headerlink" title="光线投射算法"></a>光线投射算法</h2><p>对于屏幕上的每一个像素点，构造一条模拟视线的射线，由射线的交点来确定深度最大的点</p><h1 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h1><h2 id="光照模型"><a href="#光照模型" class="headerlink" title="光照模型"></a>光照模型</h2><p>用于物体表面采样点处光强度的计算</p><h2 id="明暗处理"><a href="#明暗处理" class="headerlink" title="明暗处理"></a>明暗处理</h2><h3 id="恒定光强的多边形绘制"><a href="#恒定光强的多边形绘制" class="headerlink" title="恒定光强的多边形绘制"></a>恒定光强的多边形绘制</h3><p>取一个平面内的任意一个点的光强来表示整个平面的光强</p><p>计算量非常小，粗糙，亮度变化大，出现马赫带效应</p><h3 id="Gouraud"><a href="#Gouraud" class="headerlink" title="Gouraud"></a>Gouraud</h3><p>根据多边形在顶点处的光强，线性插值求出平面内其他点的光强</p><p>计算量小，算法简单，出现马赫带效应，对镜面反射效果不佳</p><h3 id="Phong"><a href="#Phong" class="headerlink" title="Phong"></a>Phong</h3><p>根据多边形在顶点处的法向量，线性插值求出平面内其他点的法向量</p><p>计算量大，效果好，精度高</p><h2 id="光线跟踪算法"><a href="#光线跟踪算法" class="headerlink" title="光线跟踪算法"></a>光线跟踪算法</h2><p>基于几何光学原理，模拟光的传播路径来确定反射、折射和阴影。通过“过采样”的方式，实现反走样</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>学习</tag>
      
      <tag>课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 通过网络访问 WSL2</title>
    <link href="/2021/06/07/develop-note/wsl-localhost/"/>
    <url>/2021/06/07/develop-note/wsl-localhost/</url>
    
    <content type="html"><![CDATA[<h1 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h1><p>当使用 localhost 时，Windows 直接访问到 WSL 内的进程，即看起来似乎是一台电脑，</p><h1 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h1><p>当使用本地 IP 时，即使用 <code>127.0.0.1</code> 时，Windows 将会无法访问到 WSL，Windows 认为这是强调它自己。</p><h1 id="JVM-SpringBoot"><a href="#JVM-SpringBoot" class="headerlink" title="JVM(SpringBoot)"></a>JVM(SpringBoot)</h1><p>由于此问题是在使用 SpringBoot 时遇到的问题，并不确定是不是 JVM 的问题还是 SpringBoot 的问题</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当使用 WSL2 中的 docker 来启动一个 mongo 镜像，使用的命令是</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">docker run -itd --name mongo -p 27017:27017 mongo --auth<br>docker exec -it mongo mongo admin<br>db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&quot;readWriteAnyDatabase&quot;]&#125;);<br></code></pre></td></tr></table></figure><p>然后在 Navicat 中，可以直接使用 <code>localhost</code> 对此 mongo 进行连接，但是在 SpringBoot 中，无法连接到此 mongo 数据库，配置如下</p><p><img src="/image/develop-note/wsl-localhost/SpringBoot-Before.png" alt="SpringBoot-Before"></p><p>报错信息：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.mongodb</span><span class="hljs-selector-class">.MongoSocketOpenException</span>: <span class="hljs-selector-tag">Exception</span> <span class="hljs-selector-tag">opening</span> <span class="hljs-selector-tag">socket</span><br></code></pre></td></tr></table></figure><p>后测试发现，Navicat 也无法使用 <code>127.0.0.1</code> 来访问 WSL，由此推测，JVM 或者 SpringBoot 是否是将 <code>localhost</code> 直接解析为 <code>127.0.0.1</code> 了</p><h2 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h2><p>直接使用 WSL 的 IP 来代替 <code>localhost</code></p><p>在 WSL 中使用 <code>ifconfig</code> 来获取 VM 的 IP，例如下图中，应该选择 <code>eth0</code> 的 IP <code>172.31.18.91</code> 来代替 <code>localhost</code></p><p><img src="/image/develop-note/wsl-localhost/WSL-ifconfig.jpg" alt="WSL-ifconfig"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在 Navicat 和 SpringBoot 中，均连接数据库成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>短笔记</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生 JavaScript 实现图片裁剪</title>
    <link href="/2021/05/17/front-end/Front-end-image-cropping-effect/"/>
    <url>/2021/05/17/front-end/Front-end-image-cropping-effect/</url>
    
    <content type="html"><![CDATA[<h1 id="原生-JavaScript-实现图片裁剪"><a href="#原生-JavaScript-实现图片裁剪" class="headerlink" title="原生 JavaScript 实现图片裁剪"></a>原生 JavaScript 实现图片裁剪</h1><p>由于最近做的一个项目里，需要把用户头像上传。但是要求用户头像必须是正方形，所以需要将矩形图片裁剪为正方形</p><p>在花了接近 5 个小时之后，总算是将功能上线了，在此记录下整个思路经过</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>首先，单纯靠前端，是不可能实现将图片截取其中的部分，然后将部分上传到后端。<br>所以，需要靠伪装裁剪效果的方式来实现裁剪</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先把裁剪图片的页面进行分层</p><h3 id="思路1——clip"><a href="#思路1——clip" class="headerlink" title="思路1——clip"></a>思路1——clip</h3><div class="table-container"><table><thead><tr><th style="text-align:center">层级</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">一个灰白色的背景的 div</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">半透明的原图</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">不透明的原图的裁剪部分</td></tr></tbody></table></div><p>层级 3 的效果，打算靠 css 的 <code>clip-path</code> 来实现，</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>反手打开 Google，打开 Google 的头像上传页面，然后检查元素</p><p><img src="/image/front-end/Front-end-image-cropping-effect/googleAvatarUpload.png" alt="googleAvatarUpload"></p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-dm-Ch&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lh3.googleusercontent.com/-ij1qBucmZrI/YJ5t2R6hBPI/AAAAAAAAAJY/DyrS8qSCb4keWB2-fIvIv42m9oW8B9ZnQCLcBGAsYHQ/s180/79468803_p0_master1200.jpg&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;transform: rotate(0deg); width: 127px; height: 180px; opacity: 1; left: 279px; top: 0px; position: absolute;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 127px; height: 180px; left: 279px; top: 0px; position: absolute;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-im&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: 42px; left: 16px; width: 95px; height: 95px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-fm&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: ne-resize; left: 96px; top: 27px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-gm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-fm&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: sw-resize; left: 1px; top: 122px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-gm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-fm&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: se-resize; left: 96px; top: 122px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-gm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-fm&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: nw-resize; left: 1px; top: 27px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-gm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-km&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 127px; top: 0px; left: 0px; height: 42px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-km&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: 42px; left: 111px; width: 16px; height: 95px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-km&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left: 0px; width: 127px; top: 137px; height: 43px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-km&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left: 0px; top: 42px; width: 16px; height: 95px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ee-em&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;top: 41px; left: 15px; width: 95px; height: 95px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>首先是一个 <code>img</code> 作为底图，而且其宽和高同时被限制在 180px 中（上传了一张高大于宽的图片），这可以用 <code>max-height</code> 和 <code>max-width</code> 实现</li><li>其次是一个 <code>div</code> ，而且恰好与上面的 <code>img</code> 重合，这应该是作为覆盖在图片上，然后其中有一堆的 <code>div</code><ul><li>第一个 <code>div</code> 应该是作为上传图片时，覆盖在最中央的透明方块，用来接受鼠标的拖拽和缩放事件</li><li>第二个至第五个，是中间选择框的四个角落，用来拖拽缩放图片</li><li>第六个又是一个 <code>div</code>，内部有四个 <code>div</code>，观察后发现，这四个 <code>div</code> 分别是“左上+正上+右上”，“正右”，“右下+正下+左下”，“正左”，而且这四个 <code>div</code> 都是带有半透明属性，且背景为纯白色</li></ul></li><li>最后一个 <code>div</code> 其恰好比图片大一个像素，恰好可以作为黑色的外框</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>虽然看起来，第一个的思路更加的简单容易，但是第二个思路更合理，毕竟对于低版本的浏览器，更适合此方案</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先需要一个能够选择文件的 UI，由于 <code>&lt;input type=&quot;file&quot;&gt;</code> 的页面实在过于丑陋，于是我先对其进行美化</p><h3 id="美化-input"><a href="#美化-input" class="headerlink" title="美化 input"></a>美化 <code>input</code></h3><p>首先准备一个 <code>relative</code> 的 <code>div</code> 用于容纳新的 UI，同时将 <code>&lt;input type=&quot;file&quot;&gt;</code> 设置为 <code>absolute</code>，并使其覆盖整个 <code>div</code>，然后将不透明度调整为 <code>0</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fileInput&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.upload</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fileInput</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后找来了一个上传图片的 svg，直接丢进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">t</span>=<span class="hljs-string">&quot;1620918057417&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M1035.3664 1035.82151111h-86.47111111v-27.30666666h59.16444444v-59.16444445h27.30666667zM881.69813333 1035.82151111H747.30382222v-27.30666666h134.39431111v27.30666666z m-201.59146666 0H545.71235555v-27.30666666h134.39431112v27.30666666z m-201.59146667 0H344.12088889v-27.30666666h134.39431111v27.30666666z m-201.59146667 0H142.52942222v-27.30666666h134.39431111v27.30666666zM75.33226667 1035.82151111h-86.47111112v-86.47111111h27.30666667v59.16444445h59.16444445zM16.16782222 882.15324445h-27.30666667V747.75893333h27.30666667v134.39431112z m0-201.59146667h-27.30666667V546.16746667h27.30666667v134.39431111z m0-201.59146667h-27.30666667V344.576h27.30666667v134.39431111z m0-201.59146666h-27.30666667V142.98453333h27.30666667v134.39431112zM16.16782222 75.78737778h-27.30666667v-86.47111111h86.47111112v27.30666666h-59.16444445zM881.69813333 16.62293333H747.30382222v-27.30666666h134.39431111v27.30666666z m-201.59146666 0H545.71235555v-27.30666666h134.39431112v27.30666666z m-201.59146667 0H344.12088889v-27.30666666h134.39431111v27.30666666z m-201.59146667 0H142.52942222v-27.30666666h134.39431111v27.30666666zM1035.3664 75.78737778h-27.30666667v-59.16444445h-59.16444444v-27.30666666h86.47111111zM1035.3664 882.15324445h-27.30666667V747.75893333h27.30666667v134.39431112z m0-201.59146667h-27.30666667V546.16746667h27.30666667v134.39431111z m0-201.59146667h-27.30666667V344.576h27.30666667v134.39431111z m0-201.59146666h-27.30666667V142.98453333h27.30666667v134.39431112z&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#bfbfbf&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M599.74674456 523.1642475H424.34544577c-6.10760857 0-11.06283816-4.95062007-11.06283815-11.06283815 0-6.10760857 4.95522958-11.06283816 11.06283814-11.06283815h175.4012988c6.10760857 0 11.06283816 4.95522958 11.06283816 11.06283815 0 6.11221808-4.95062007 11.06283816-11.06283816 11.06283815z&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#bfbfbf&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512.04609516 610.86489689c-6.10760857 0-11.06283816-4.95522958-11.06283816-11.06283815V424.40075995c0-6.10760857 4.95522958-11.06283816 11.06283816-11.06283814s11.06283816 4.95522958 11.06283814 11.06283814v175.40129879c0 6.11221808-4.95522958 11.06283816-11.06283814 11.06283815z&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#bfbfbf&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fileInput&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="准备覆盖物"><a href="#准备覆盖物" class="headerlink" title="准备覆盖物"></a>准备覆盖物</h3><p>直接创建了一堆的 <code>div</code>，为了简化，我把 Google 的拖动缩放的方块改为了滚轮缩放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clip&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;overlay&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;overlayInline&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;base&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlayBase&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlay&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlay&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlay&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlay&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imageOverlayCenter&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.overlay</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2021</span><br>&#125;<br><br><span class="hljs-selector-class">.overlayInline</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">background</span>: white;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.image</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">250px</span>;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">250px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-selector-class">.imageOverlayBase</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.imageOverlay</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br><br><span class="hljs-selector-class">.imageOverlayCenter</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我准备了一个 <code>overlay</code> 用于让整个屏幕的剩下部分变成灰色，这样可以避免在拖动的时候点击到其他元素</p><p>然后就是无尽的 JavaScript 时间</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> width = <span class="hljs-number">300</span>                     <span class="hljs-comment">// 最大图片宽度</span><br><span class="hljs-keyword">let</span> height = <span class="hljs-number">300</span>                    <span class="hljs-comment">// 最大图片高度</span><br><span class="hljs-keyword">let</span> scroll = <span class="hljs-number">0.1</span>                    <span class="hljs-comment">// 单次滚轮缩放的最大比例</span><br><span class="hljs-keyword">let</span> imageWidth, imageHeight         <span class="hljs-comment">// 当前图片的大小</span><br><span class="hljs-keyword">let</span> clipLeft, clipTop, clipWidth, clipHeight<br><span class="hljs-keyword">let</span> topOverlay, bottomOverlay, leftOverlay, rightOverlay, centerOverlay<br><span class="hljs-keyword">let</span> lastX, lastY                    <span class="hljs-comment">// 记录鼠标上次位置</span><br></code></pre></td></tr></table></figure><p>其中 <code>clipLeft, clipTop, clipWidth, clipHeight</code> 分别是“裁剪图片距离左边界的百分比”，“裁剪图片距离上边界的百分比”，“裁剪图片宽度百分比”，“裁剪图片高度百分比”</p><p>而 <code>topOverlay, bottomOverlay, leftOverlay, rightOverlay, centerOverlay</code> 则是一些保存所有的元素的变量</p><p>然后是当渲染完成时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;file&quot;</span>)<br>    input.onchange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> FileReader()<br>        reader.readAsDataURL(input.files[<span class="hljs-number">0</span>])<br>        reader.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;img&quot;</span>)<br>            img.src = reader.result;<br>            img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                prepareClip()       <span class="hljs-comment">// 准备裁剪</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>获取 <code>input</code> 中的图片，并将其读出，然后让 <code>img</code> 显示出来</p><p>然后是一些渲染的准备工作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prepareClip</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取图片的尺寸</span><br>    <span class="hljs-keyword">let</span> clip = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;clip&quot;</span>)<br>    clip.style.display = <span class="hljs-string">&quot;block&quot;</span><br>    <span class="hljs-keyword">let</span> base = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;base&quot;</span>)<br>    <span class="hljs-keyword">let</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;img&quot;</span>)<br>    imageWidth = img.width<br>    imageHeight = img.height<br>    <span class="hljs-comment">// 将一个 div 移动至恰好覆盖整个图片，方便后续的相对位移的计算</span><br>    base.style.width = imageWidth<br>    base.style.height = imageHeight<br>    base.style.left = ((width - imageWidth) / <span class="hljs-number">2</span>).toString()<br>    base.style.top = ((height - imageHeight) / <span class="hljs-number">2</span>).toString()<br>    <span class="hljs-comment">// 保存下所有的遮罩 div</span><br>    topOverlay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;top&quot;</span>)<br>    bottomOverlay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bottom&quot;</span>)<br>    leftOverlay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;left&quot;</span>)<br>    rightOverlay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;right&quot;</span>)<br>    centerOverlay = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;center&quot;</span>)<br>    <span class="hljs-comment">// 为部分的 div 设置不会改变的固定值</span><br>    topOverlay.style.left = <span class="hljs-string">&quot;0&quot;</span><br>    topOverlay.style.top = <span class="hljs-string">&quot;0&quot;</span><br>    topOverlay.style.right = <span class="hljs-string">&quot;0&quot;</span><br><br>    bottomOverlay.style.left = <span class="hljs-string">&quot;0&quot;</span><br>    bottomOverlay.style.bottom = <span class="hljs-string">&quot;0&quot;</span><br>    bottomOverlay.style.right = <span class="hljs-string">&quot;0&quot;</span><br><br>    leftOverlay.style.left = <span class="hljs-string">&quot;0&quot;</span><br><br>    rightOverlay.style.right = <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-comment">// 由于项目要求，所以图片将会是正方形，在最开始的时候，裁剪图片的尺寸为最短边的 80%</span><br>    <span class="hljs-keyword">let</span> tmp = <span class="hljs-built_in">Math</span>.min(imageWidth * <span class="hljs-number">0.8</span>, imageHeight * <span class="hljs-number">0.8</span>)<br>    clipWidth = tmp / imageWidth<br>    clipHeight = tmp / imageHeight<br><br>    clipLeft = (<span class="hljs-number">1</span> - clipWidth) / <span class="hljs-number">2</span><br>    clipTop = (<span class="hljs-number">1</span> - clipHeight) / <span class="hljs-number">2</span><br><br>    <span class="hljs-comment">// 添加事件</span><br>    centerOverlay.addEventListener(<span class="hljs-string">&quot;mousedown&quot;</span>, mouseDown)<br>    centerOverlay.addEventListener(<span class="hljs-string">&quot;mousewheel&quot;</span>, mouseWheel)<br>    resetOverlay()<br>&#125;<br></code></pre></td></tr></table></figure><br>然后为每一块 <code>div</code> 计算出他们的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetOverlay</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> position = &#123;<br>        left: clipLeft * imageWidth,<br>        right: (<span class="hljs-number">1</span> - clipLeft - clipWidth) * imageWidth,<br>        top: clipTop * imageHeight,<br>        bottom: (<span class="hljs-number">1</span> - clipTop - clipHeight) * imageHeight<br>    &#125;<br>    topOverlay.style.bottom = (imageHeight - position.top).toString()<br><br>    bottomOverlay.style.top = (imageHeight - position.bottom).toString()<br><br>    leftOverlay.style.top = position.top.toString()<br>    leftOverlay.style.bottom = position.bottom.toString()<br>    leftOverlay.style.right = (imageWidth - position.left).toString()<br><br>    rightOverlay.style.top = position.top.toString()<br>    rightOverlay.style.bottom = position.bottom.toString()<br>    rightOverlay.style.left = (imageWidth - position.right).toString()<br><br>    centerOverlay.style.left = position.left.toString()<br>    centerOverlay.style.right = position.right.toString()<br>    centerOverlay.style.top = position.top.toString()<br>    centerOverlay.style.bottom = position.bottom.toString()<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是三个事件的处理过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clamp</span>(<span class="hljs-params">l, r, v</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (v &lt; l) <span class="hljs-keyword">return</span> l<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v &gt; r) <span class="hljs-keyword">return</span> r<br>    <span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseMove</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    clipLeft += (event.pageX - lastX) / imageWidth<br>    clipLeft = clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> - clipWidth, clipLeft)<br>    clipTop += (event.pageY - lastY) / imageHeight<br>    clipTop = clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> - clipHeight, clipTop)<br>    lastX = event.pageX<br>    lastY = event.pageY<br>    resetOverlay()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseUp</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    centerOverlay.removeEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, mouseMove);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseDown</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    lastX = event.pageX<br>    lastY = event.pageY<br>    centerOverlay.addEventListener(<span class="hljs-string">&quot;mousemove&quot;</span>, mouseMove)<br>    centerOverlay.addEventListener(<span class="hljs-string">&quot;mouseup&quot;</span>, mouseUp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseWheel</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> op = event.wheelDelta / <span class="hljs-built_in">Math</span>.abs(event.wheelDelta)<br>    <span class="hljs-keyword">let</span> maxDelta = op &gt; <span class="hljs-number">0</span> ?<br>        <span class="hljs-built_in">Math</span>.min(imageWidth * (<span class="hljs-number">1</span> - clipWidth), imageHeight * (<span class="hljs-number">1</span> - clipHeight), scroll * <span class="hljs-built_in">Math</span>.min(imageWidth, imageHeight)) :<br>        <span class="hljs-built_in">Math</span>.min(imageWidth * (clipWidth - <span class="hljs-number">0.1</span>), imageHeight * (clipHeight - <span class="hljs-number">0.1</span>), scroll * <span class="hljs-built_in">Math</span>.min(imageWidth, imageHeight))<br>    clipWidth += maxDelta / imageWidth * op<br>    clipHeight += maxDelta / imageHeight * op<br>    clipLeft -= maxDelta / imageWidth / <span class="hljs-number">2</span> * op<br>    clipLeft = clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> - clipWidth, clipLeft)<br>    clipTop -= maxDelta / imageHeight / <span class="hljs-number">2</span> * op<br>    clipTop = clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> - clipHeight, clipTop)<br>    resetOverlay()<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是效果图</p><p><img src="/image/front-end/Front-end-image-cropping-effect/myAvatarUpload.png" alt="myAvatarUpload"></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTML</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（计算机图形学）</title>
    <link href="/2021/03/27/interview/computer-graphics/"/>
    <url>/2021/03/27/interview/computer-graphics/</url>
    
    <content type="html"><![CDATA[<h1 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h1><ul><li>渲染流程<ul><li>应用程序阶段<ul><li>加载数据到显存</li><li>设置渲染模式</li><li>调用 DrawCall</li></ul></li><li>几何阶段<ul><li>顶点着色器：将三维的顶点坐标信息映射到 $[-1, 1]$ 的平面上</li><li>裁剪：裁剪出摄像机视野内的顶点</li><li>屏幕映射：将 $[-1, 1]$ 内的图片映射到屏幕上</li></ul></li><li>光栅化阶段<ul><li>三角形设置与三角形遍历：找出片元</li><li>片元着色器：对每一个片元进行着色，计算其颜色值</li><li>逐片元操作：模板测试，深度测试，混合</li></ul></li></ul></li></ul><h1 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h1><ul><li>高斯模糊方式<ul><li>按照与当前像素的距离值，计算出高斯函数的值作为权值，进行颜色混合</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
      <tag>计算机图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（算法）</title>
    <link href="/2021/03/27/interview/algorithm/"/>
    <url>/2021/03/27/interview/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="链表有环问题"><a href="#链表有环问题" class="headerlink" title="链表有环问题"></a>链表有环问题</h1><ul><li>判断单向链表是否有环<ul><li>定义两个指针，从链表的开始，同时沿着链表指针移动，速度分别为一个单位和两个单位。当某个时刻，两个指针指向同一个节点的时候则此链表有环</li><li>理论上，速度可以是任意的两个不同的值，因为只要速度差和环的长度有最小公倍数，则必定存在相交的时间点</li></ul></li><li>找出链表的环的交点位置<ul><li>通过上述步骤（速度取一步两步），当两个指针第一次相遇的时候，将速度为二步的指针移动至开头，并将速度调整为一步，然后两个指针继续前进，直到第一次相遇，此相遇点即为链表的环的交点</li><li>原理：把整个链表认为长度就是两步的那个指针所走过的路程，把重复的那部分复制一份，将链表展开为无环。此时可以认为整个链表长度为 $2n$，且一步的那个指针恰好位于整个链表最中间的地方，即 $n$，同时，在展开之前，这两个节点是“相同的节点”，此时如果再有一个指针以一步的速度从开头开始走，那么当这两个指针分别走到链表的正中间和最后的时候，此时这两个指针实际上相同了，而这两个指针速度相同，所以在之前应该也有一段时间已经相同了。反过来，当他们第一次重合的时候，即为环的入口</li></ul></li><li>判断两个链表是否最终交在同一个节点<ul><li>利用上述的规则，将其中一个链表的头尾相连，然后从另一个链表开头进行一步两步的判断</li></ul></li></ul><h1 id="洗牌问题"><a href="#洗牌问题" class="headerlink" title="洗牌问题"></a>洗牌问题</h1><ul><li>问题样式<ul><li>在 $n$ 个不相同的数中随机取出 $m$ 个数，使得这 $m$ 个数字不同</li><li>一个长度为 $n$ 的数组，将其打散</li></ul></li><li>解题方法<ul><li>Fisher-Yates Shuffle算法<ul><li>优点：逻辑简单</li><li>缺点：时间复杂度高($O(n^2)$)，空间复杂度也较高($O(n)$)，而且需要提前知道数组长度</li><li><ol><li>设定 $x = n$</li></ol></li><li><ol><li>获得一个在 $[1, x]$ 之间的随机数 $t$</li></ol></li><li><ol><li>将原数组中第 $t$ 个没有被取出的数据拿出</li></ol></li><li><ol><li>使得 $x = x - 1$</li></ol></li><li><ol><li>重复 2-4 步直到取出 $m$ 个整数</li></ol></li></ul></li><li>Knuth-Durstenfeld Shuffle算法<ul><li>优点：时间复杂度($O(n)$)和空间复杂度($O(1)$)都低</li><li>缺点：会修改原数组，而且需要提前知道数组长度</li><li><ol><li>设定 $x = 1$</li></ol></li><li><ol><li>获得一个在 $[x, n]$ 之间的随机数 $t$</li></ol></li><li><ol><li>交换数组中的第 $x$ 个和第 $t$ 个值</li></ol></li><li><ol><li>使得 $x = x + 1$</li></ol></li><li><ol><li>重复 2-4 步直到 $x = m + 1$</li></ol></li></ul></li><li>Inside-Out Algorithm算法<ul><li>优点：时间复杂度($O(n)$)低，不需要提前知道数组长度</li><li>缺点：空间复杂度高($O(n)$)</li><li><ol><li>将整个数据拷贝至一个新的数组 $a$</li></ol></li><li><ol><li>设定 $x = 1$</li></ol></li><li><ol><li>获取一个在 $[1, x]$ 之间的随机数 $t$</li></ol></li><li><ol><li>交换 $a_x$ 和 $a_t$</li></ol></li><li><ol><li>使得 $x = x + 1$</li></ol></li><li><ol><li>重复 3-5 步直到 $x = m + 1$</li></ol></li></ul></li></ul></li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul><li>快速排序的实现</li><li>快速排序的优缺点<ul><li>优点：平均时间复杂度 $O(Nlog_2N)$，空间复杂度 $O(1)$</li><li>缺点：不稳定，初始序列有序或基本有序时，时间复杂度降为 $O(n^2)$</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round#706(Div. 2)-Let&#39;s Go Hiking</title>
    <link href="/2021/03/11/acm/CodeforcesRound706(Div.%202)-D%20Let&#39;s%20Go%20Hiking/"/>
    <url>/2021/03/11/acm/CodeforcesRound706(Div.%202)-D%20Let&#39;s%20Go%20Hiking/</url>
    
    <content type="html"><![CDATA[<h1 id="Let’s-Go-Hiking"><a href="#Let’s-Go-Hiking" class="headerlink" title="Let’s Go Hiking"></a>Let’s Go Hiking</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有一个数组，两个人，第一步，两个人先后选择数组中的两个下标，要求两个人选择的下标不可以相同。随后按照选择顺序以此进行选择，要求选择一个新的下标，使得新的下标是原来下标的左边或者右边，且不超出数组边界，其中第一个选择的人需要保证新的下标对应的值严格小于原来的下标对应的值，而第二个选择的人则相反，需要选择严格大于的，且保证两人在任意时刻选择的下标不相同，第一个不能选择的人为失败，问第一个人第一次选择哪些下标能够使得他必赢，仅需要输出下标个数</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>按照题目要求，肯定是尽量让第一个人去选择最长的严格单调的子串的最大端，这样第一个人的可选个数最多。而若仅仅如此选择，那么作为第二手，他必定可以选择与这个下标相邻的且比第一个人选的值小的，则可以堵死第一个人的下一步选择</p><blockquote><p>例如<br>1, 2, 3, 4, 5, 6, 7<br>对于第一个人而言，他肯定是选择 7 比较好，因为他接下来可以走 6、5、4、3、2、1，拥有最多的步数<br>但是第二个人完全可以直接选择 6，使得第一个人无法走，因为不能选择相同下标</p></blockquote><p>既然单调的子串会因为第二个人的直接掐断而注定失败，那必定需要为第一个人做第二手的准备，也就是必须要构造一个峰，使得左右两侧都可以下坡，避免出现上述的情况</p><p>由于上面得到的结论，假定这个峰左侧的坡较长，而右侧较短。此时第二个人必然选择左侧的峰底，或者峰底以上的一个值。这样无论第一个人往左走还是往右走，都可以保证第一个人会率先遇到无法选择的问题</p><blockquote><p>例如<br>1, 2, 3, 4, 5, 4, 3, 2<br>作为第一个人，必定应该选 5<br>那么第二个人可以直接选 2 （左坡峰底以上的一个值）<br>若选择往左坡走，那么恰好第一个人遇到无法选择<br>若往右坡走，那么第一个人必定会把 5 腾出来，使得第二个人拥有和第一个人一样的路程，第一个人仍然输</p></blockquote><p>那么可以很简单的想到，这个峰必须是左右坡长度相同的，但似乎不一定，例如下面这个例子</p><blockquote><p>例如<br>1, 2, 3, 4, 3, 2, 1<br>作为第一个人，则必定是选 4<br>第二个人也没太多选择的余地，肯定是选 1<br>这时会发现仍然第一个人输了</p></blockquote><p>而如果是下面这个例子</p><blockquote><p>例如<br>1, 2, 3, 4, 5, 4, 3, 2, 1<br>可以容易得出，第一个人能够赢的结论</p></blockquote><p>所以答案就是找出存在的一个峰，使得它的左坡和右坡的长度恰好相等且为奇数，则为答案</p><p>但是似乎并不是很完整，如果出现下面这样的情况</p><blockquote><p>例如<br>1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5<br>按照上面的规律，第一个人只能选择 4<br>而实际上有更长的坡可以使用，所以第二个人会选择更长的坡，所以第一个人仍然输</p></blockquote><p>同时，还需要保证这个峰是独一无二的，没有其他的坡比他的要大，或者相等</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    vector&lt;int&gt; data(n), l(n), r(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br><br>    <span class="hljs-keyword">int</span> cur = <span class="hljs-number">1</span>;<br>    l[<span class="hljs-number">0</span>] = l[n - <span class="hljs-number">1</span>] = r[<span class="hljs-number">0</span>] = r[n - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (data[i] &gt; data[i - <span class="hljs-number">1</span>]) cur++;<br>        <span class="hljs-keyword">else</span> cur = <span class="hljs-number">1</span>;<br>        l[i] = cur;<br>    &#125;<br>    cur = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-keyword">if</span> (data[i] &gt; data[i + <span class="hljs-number">1</span>]) cur++;<br>        <span class="hljs-keyword">else</span> cur = <span class="hljs-number">1</span>;<br>        r[i] = cur;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">if</span> (l[i] == r[i] &amp;&amp; l[i] &amp; <span class="hljs-number">1</span>) maxLen = max(maxLen, l[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) count += (l[i] == maxLen) + (r[i] == maxLen);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; (count == <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">cout</span>.tie(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> ACM_LOCAL</span><br>    freopen(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">signed</span> localTestCount = <span class="hljs-number">1</span>, localReadPos = <span class="hljs-built_in">cin</span>.tellg();<br>    <span class="hljs-keyword">char</span> localTryReadChar;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (localTestCount &gt; <span class="hljs-number">20</span>)<br>            <span class="hljs-keyword">throw</span> runtime_error(<span class="hljs-string">&quot;Check the stdin!!!&quot;</span>);<br>        <span class="hljs-keyword">auto</span> startClockForDebug = clock();<br>        solve();<br>        <span class="hljs-keyword">auto</span> endClockForDebug = clock();<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Test &quot;</span> &lt;&lt; localTestCount &lt;&lt; <span class="hljs-string">&quot; successful&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cerr</span> &lt;&lt; <span class="hljs-string">&quot;Test &quot;</span> &lt;&lt; localTestCount++ &lt;&lt; <span class="hljs-string">&quot; Run Time: &quot;</span><br>             &lt;&lt; <span class="hljs-keyword">double</span>(endClockForDebug - startClockForDebug) / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;s&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;--------------------------------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125; <span class="hljs-keyword">while</span> (localReadPos != <span class="hljs-built_in">cin</span>.tellg() &amp;&amp; <span class="hljs-built_in">cin</span> &gt;&gt; localTryReadChar &amp;&amp; localTryReadChar != <span class="hljs-string">&#x27;$&#x27;</span> &amp;&amp;<br>             <span class="hljs-built_in">cin</span>.putback(localTryReadChar));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    solve();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（Java）</title>
    <link href="/2021/02/25/interview/java/"/>
    <url>/2021/02/25/interview/java/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><ul><li>线程池的原因<ul><li>不断的创建和删除线程，会带来较大的系统资源负载</li><li>线程缺乏统一的管理，可能会出现无限制的创建线程</li><li>线程之间抢占资源</li></ul></li><li>线程池的属性<ul><li>核心线程数：保持存在的线程数量，这些线程会一直存在，不会被删除</li><li>任务缓冲队列：当所有的核心线程都在运行时，新的任务会被加入到缓冲队列中</li><li>非核心线程数：当任务缓冲队列满后，将会创建新的线程来执行队列中的任务，且额外创建的线程数不会超过非核心线程数</li><li>空闲线程的存活时间：当非核心线程空闲时，且持续了一段时间后，此线程将会被删除</li><li>拒绝策略：当非核心线程和任务缓存队列满后，对待新的任务的策略</li></ul></li><li>Java 默认的线程池类型</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">核心线程数</th><th style="text-align:center">线程池大小</th><th style="text-align:center">非核心线程存活时间</th><th>等待队列大小</th></tr></thead><tbody><tr><td style="text-align:center">CachedThreadPool</td><td style="text-align:center">0</td><td style="text-align:center">$\infty$</td><td style="text-align:center">60s</td><td>0</td></tr><tr><td style="text-align:center">SingleThreadExecutor</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td>$\infty$</td></tr><tr><td style="text-align:center">FixedThreadPool</td><td style="text-align:center">$n$</td><td style="text-align:center">$n$</td><td style="text-align:center">0</td><td>$\infty$</td></tr><tr><td style="text-align:center">ScheduledThreadPoolExecutor</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table></div><ul><li>Java 默认的线程池有什么问题，为什么会引起 OOM 异常（OutOfMemoryError）<ul><li>CachedThreadPool 允许创建无线的线程，从而引起 OOM 异常</li><li>SingleThreadExecutor 和 FixedThreadPool 请求队列为无限长，可能会堆积大量的消息，从而引发 OOM 异常</li></ul></li></ul><h1 id="Java-内存"><a href="#Java-内存" class="headerlink" title="Java 内存"></a>Java 内存</h1><ul><li>内存模型<ul><li>主内存：线程之间共享的变量储存在主内存中</li><li>本地内存：每个线程独立拥有的内存</li><li>本地内存保存的是主内存的共享变量的副本</li></ul></li><li>垃圾回收<ul><li>根搜索算法（可达性分析算法）从 GC ROOT 节点沿着引用链搜索，无法到达的节点即为不可到达的对象</li></ul></li><li>垃圾回收器<ul><li>G1 收集器<ul><li>独特的分代垃圾回收器，分代GC：分代收集器，同时兼顾年轻代和老年代</li><li>使用分区算法，不要求eden，年轻代或老年代的空间都连续</li><li>并行性：回收期间，可由多个线程同时工作，有效利用多核cpu资源</li><li>空间整理：回收过程中，会进行适当对象移动，减少空间碎片</li><li>可预见性：G1可选取部分区域进行回收，可以缩小回收范围，减少全局停顿</li></ul></li><li>G1 收集器的过程<ul><li>初始标记（它标记了从GC Root开始直接可达的对象）Stop-The-World</li><li>并发标记（从GC Roots开始对堆中对象进行可达性分析，找出存活对象）</li><li>最终标记（标记那些在并发标记阶段发生变化的对象，将被回收）Stop-The-World</li><li>筛选回收（首先对各个Regin的回收价值和成本进行排序，根据用户所期待的GC停顿时间指定回收计划，回收一部分Region）Stop-The-World</li></ul></li></ul></li></ul><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul><li>hashMap 的结构<ul><li>采用链地址法，当发生哈希冲突时使用链表解决</li><li>当链表过长时，在 JDK 1.8 下采用红黑树代替链表，当数据量较少时，转回链表</li><li>当存储的数据量超过一个阈值后，hashMap 的哈希表长度将会扩容到原来的两倍，然后将所有的数据重新分配到新的内存中</li></ul></li><li>hashMap 的这样扩容的理由<ul><li>通过恰好两倍扩容，可以让原来在第 $i$ 个链表的值被恰好分配到第 $i$ 和第 $2i$ 个链表的位置</li><li>每一个值，只需要判断其哈希值在某个二进制位上的值即可直接完成分配</li></ul></li><li>treeMap 的结构<ul><li>treeMap 是一棵红黑树</li></ul></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>设计原则<ul><li>开闭原则：对扩展开放，对修改关闭</li><li>里氏替换原则：子类必须拥有所有的父类功能，子类可以开发自己的新功能</li><li>依赖倒置原则：高层实现不能依赖于低层实现，而是依赖于低层的抽象类</li><li>单一职责原则：一个类应当只负责一个职责</li><li>接口隔离原则：接口应该更小更具体，而不是去实现很庞大的接口来适应所有的需求</li><li>迪米特法则：避免与无关实体进行通信</li><li>合成复用原则：尽量先使用组合或者聚合等关联，其次考虑继承</li></ul></li><li>设计模式<ul><li>创建型模式<ul><li>单例模式：限制一个类只能有一个实例</li><li>原型模式：以一个此类型的实例为模板，通过拷贝内存中的二进制值来直接创建一个对象</li><li>工厂模式：将创建对象的过程由另一个类进行封装</li><li>建造者模式：将一个复杂的对象分为多个简单的对象的组合，并实现将多个小对象进行拼装的过程</li></ul></li><li>结构型模式<ul><li>代理模式：使得两个对象之间不能直接引用访问，只能通过第三方，可以保护目标对象，扩展目标对象的功能</li><li>适配器模式：将一个类的接口转换为另外一个类的接口，通常是为了适配两个接口的对接问题</li><li>桥接模式：将抽象与实现分离，使得他们可以独立变化，用组合关系来代替继承关系</li><li>装饰器模式：为类增加新的功能的同时，避免了继承</li><li>外观模式：隐藏系统的复杂性</li><li>享元模式：重复使用已经创建的同类对象</li><li>组合模式</li></ul></li><li>行为型模式<ul><li>模板方法模式：仅实现一个操作中的骨干步骤，具体步骤由其子类实现</li><li>策略模式</li><li>命令模式</li><li>责任链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul></li></ul></li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ul><li>String 类型<ul><li>String 类型是不可变的，对 String 类型进行操作的时，会重新生成新的 String 对象</li></ul></li><li>StringBuilder 和 StringBuffer<ul><li>StringBuilder 和 StringBuffer 都是可变的</li><li>StringBuilder 没有线程同步，存在线程安全问题，但是其效率略高于 StringBuffer</li><li>StringBuffer 能够保证线程安全，但效率较低</li></ul></li></ul><h1 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h1><ul><li>接口和抽象类的区别<ul><li>抽象类可以写非抽象方法，而接口类只能有抽象方法</li><li>一个类只能继承自一个抽象类，而一个类能实现多个接口</li><li>继承是一个“是不是”的关系，而 接口 实现则是“有没有”的关系</li></ul></li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li>子类实例化总是默认调用父类的无参构造方法<ul><li>为了让父类初始化属性和方法</li></ul></li></ul><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><ul><li><code>equals</code> 和 <code>==</code> 的区别<ul><li><code>==</code> 对于基本类型时，比较的是两个对象的值是否相同，而对于对象时，则比较的是这两个引用是否指向了同一个对象</li><li><code>equals</code> 则可以由类进行重写，使得其满足正常的比较关系。若不进行重写，则与 <code>==</code> 等价</li></ul></li><li><code>equals</code> 和 <code>hashCode</code> 为什么需要同时进行重写<ul><li><code>hashCode</code> 在 <code>Object</code> 类下的默认行为是将此值的地址取出作为 <code>hashCode</code>，但这与 <code>hashCode</code> 本意不同，<code>hashCode</code> 的值应当满足对于 $\forall x$ 若 <code>x.equals(y) = true</code>，则 <code>x.hashCode() = y.hashCode()</code>。所以当重写 <code>equals</code> 时，通常意味着这个值的相等概念与 <code>==</code> 不同，所以必然需要重写 <code>hashCode</code> 避免在 <code>hashMap</code> 中出现意料之外的情况</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（Git）</title>
    <link href="/2021/02/24/interview/git/"/>
    <url>/2021/02/24/interview/git/</url>
    
    <content type="html"><![CDATA[<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ul><li>revert<ul><li>重做某个版本，在当前版本后，重新将某个版本的操作重做一次，得到一个新的版本，将会保留所有其他版本的操作</li></ul></li><li>reset<ul><li>返回到某个版本，所有在这个版本之后的版本都会被撤销</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（Linux）</title>
    <link href="/2021/02/23/interview/linux/"/>
    <url>/2021/02/23/interview/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="查看进程占用系统资源情况"><a href="#查看进程占用系统资源情况" class="headerlink" title="查看进程占用系统资源情况"></a>查看进程占用系统资源情况</h1><ul><li>top</li><li>ps</li></ul><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><ul><li>session<ul><li>一个终端窗口对应一个会话(session)</li><li>一个会话包含多个进程组</li><li>一个会话只有一个前台进程组，可以有多个后台进程组</li><li>所有在终端内的输入都会发送给前台进程组</li><li>当会话关闭时，所有会话内的进程将会被终止</li></ul></li></ul><h1 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h1><ul><li>进程的 fork 过程<ul><li>给新进程分配一个标识符</li><li>在内核中分配一个PCB</li><li>复制它的父进程的环境（PCB中大部分的内容）</li><li>为其分配资源（程序、数据、栈等）</li><li>复制父进程地址空间里的内容（代码共享，数据写时拷贝）</li><li>将进程置成就绪状态，并将其放入就绪队列，等待CPU调度</li></ul></li></ul><h1 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h1><ul><li>什么是守护进程<ul><li>在后台运行的一种特殊的进程</li><li>一般在系统启动时开始运行，系统关机后结束运行</li><li>常常以 root 权限启动</li><li>不需要输入，独立与终端</li><li>名称常常以 <code>d</code> 结尾</li></ul></li><li>创建守护进程的过程<ul><li>在父进程中执行 <code>fork</code> 并 <code>exit</code> 退出</li><li>在子进程中调用 <code>setsid</code> 函数创建新的会话</li><li>在子进程中调用 <code>chdir</code> 函数，让根目录 <code>/</code> 成为子进程的工作目录</li><li>在子进程中调用 <code>umask</code> 函数，设置进程的 <code>umask</code> 为 0</li><li>在子进程中关闭任何不需要的文件描述符</li></ul></li></ul><h1 id="IO模式"><a href="#IO模式" class="headerlink" title="IO模式"></a>IO模式</h1><ul><li>IO 模式有哪些<ul><li>阻塞 IO：当进行 IO 时，线程阻塞，不再占用 CPU，直到 IO 完成</li><li>非阻塞 IO：当进行 IO 时，线程不阻塞，而是进行循环判断是否 IO 完成，一直占用 CPU</li><li>IO 多路复用：允许同时进行多个 IO，线程仍然阻塞</li><li>异步 IO：在 IO 时不会阻塞，也不会关心 IO 状态，而是继续执行代码，直到 IO 完成再回来执行 IO 完成的代码</li></ul></li><li>IO 多路复用的机制<ul><li>select：当有任意一个 IO 完成时，通知程序。缺点在于单个进程只能打开有限的文件，同时其采用轮番查询，效率较低，而且仅通知程序有 IO 完成，并不知道到底哪个文件的 IO 完成了</li><li>poll：与 select 相同，但其提供了无限制的文件打开数量</li><li>epoll：可以自定义打开的文件数量，同时当 IO 完成时会已消息的形式通知程序，包括了到底是哪个 IO 完成了</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（数据库）</title>
    <link href="/2021/02/23/interview/database/"/>
    <url>/2021/02/23/interview/database/</url>
    
    <content type="html"><![CDATA[<h1 id="B-树和-B-树"><a href="#B-树和-B-树" class="headerlink" title="B 树和 B+ 树"></a>B 树和 B+ 树</h1><ul><li>B 树的特点<ul><li>一个节点上包含至多 $m - 1$ 个值</li><li>根节点至少有两个孩子</li><li>非叶子节点如果包含了 $k$ 个值，则其包含了 $k + 1$ 个孩子节点</li><li>所有叶子节点都位于同一层</li></ul></li><li>B+ 树的特点<ul><li>所有的非叶子节点不再保存值，而是只保存了中间值</li><li>所有值保存在叶子节点上</li><li>所有的叶子节点通过链表按照顺序进行连接</li></ul></li><li>为什么数据库会采用 B+ 树而不是 B 树或者 AVL 树<ul><li>AVL 的节点访问次数更多，而对于数据库而言，每个节点通常被存储在一个文件中，所以需要读取的文件数量更多，导致效率低</li><li>在数据库中有时需要进行范围的搜索，此时 B+ 树的链表结构可以快速的找到某个节点的下一个节点位置</li></ul></li></ul><h1 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h1><ul><li>什么是联合索引<ul><li>多个列同时组成索引</li></ul></li></ul><h1 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h1><ul><li>聚簇索引<ul><li>叶子节点上直接保存值</li></ul></li><li>非聚簇索引<ul><li>叶子节点上保存的是值所在的地址</li></ul></li><li>聚簇索引的优点<ul><li>理论上速度更快，因为聚簇索引少一次文件的读取过程</li></ul></li><li>非聚簇索引的优点<ul><li>更新主键的代价低</li><li>主键插入的顺序可以混乱</li></ul></li></ul><h1 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h1><ul><li>类型<ul><li>全局锁</li><li>表级锁</li><li>行级锁</li></ul></li><li>读写锁<ul><li>读锁：可以与其他的读锁共存，但是不可以与写锁共存</li><li>写锁：不可以与其他任何锁共存</li></ul></li><li>悲观锁<ul><li>普通的锁，锁定此行/表/数据库以防止其他操作进行修改，会导致其他事务被阻塞</li></ul></li><li>乐观锁<ul><li>通过比较版本号的区别的方法，来确定此数据是否经过修改，如果修改则需要读取最新的值</li></ul></li></ul><h1 id="MyISAM和InnoDB"><a href="#MyISAM和InnoDB" class="headerlink" title="MyISAM和InnoDB"></a>MyISAM和InnoDB</h1><ul><li>区别<ul><li>MyISAM 是 MySQL 之前默认数据库，不支持事务、行级锁和外键，崩溃后无法安全恢复，支持全文索引，强调性能</li><li>InnoDB 是 MySQL 目前的默认数据库，支持了ACID兼容的事务，支持行级锁，不支持全文索引</li></ul></li><li>适合范围<ul><li>MyISAM 适合读密集场所</li><li>InnoDB 适合写密集场所</li></ul></li></ul><h1 id="数据库联合查询和连接查询"><a href="#数据库联合查询和连接查询" class="headerlink" title="数据库联合查询和连接查询"></a>数据库联合查询和连接查询</h1><ul><li>联合查询(JOIN)<ul><li>将两张表按照一定规律进行拼接组成结果并返回</li><li><code>SELECT table1.*, table2.* FROM table1 JOIN table2 ON table1.id=table2.id</code></li><li><code>INNER JOIN</code> 仅当左右两个表同时存在对应的数据时才返回</li><li><code>LEFT JOIN</code> 当左边的表存在则返回</li><li><code>RIGHT JOIN</code> 当右边的表存在则返回</li></ul></li><li>连接查询(UNION)<ul><li>将两个或更多查询的结果集组合为单个结果集，查询来自同一个表的相同列</li><li><code>UNION ALL</code> 不做重复性检查</li></ul></li></ul><h1 id="数据库的索引类型"><a href="#数据库的索引类型" class="headerlink" title="数据库的索引类型"></a>数据库的索引类型</h1><ul><li>普通索引<ul><li>没有限制，普通的索引</li></ul></li><li>唯一索引<ul><li>索引列的值必须唯一，但允许有空值</li></ul></li><li>主键索引<ul><li>特殊的唯一索引，不允许有空值</li></ul></li><li>全文索引<ul><li>对全文的索引，耗时耗空间</li></ul></li></ul><h1 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h1><div class="table-container"><table><thead><tr><th style="text-align:center">隔离级别</th><th style="text-align:center">脏读（Dirty Read）</th><th style="text-align:center">不可重复读（NonRepeatable Read）</th><th style="text-align:center">幻读（Phantom Read）</th></tr></thead><tbody><tr><td style="text-align:center">未提交读（Read uncommitted）</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td></tr><tr><td style="text-align:center">已提交读（Read committed）</td><td style="text-align:center">不可能</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td></tr><tr><td style="text-align:center">可重复读（Repeatable read）</td><td style="text-align:center">不可能</td><td style="text-align:center">不可能</td><td style="text-align:center">可能</td></tr><tr><td style="text-align:center">可串行化（Serializable）</td><td style="text-align:center">不可能</td><td style="text-align:center">不可能</td><td style="text-align:center">不可能</td></tr></tbody></table></div><ul><li>隔离级别<ul><li>未提交读：最朴素的数据库形式</li><li>已提交读：在事务完成之后再更新数据库的值</li><li>可重复读：每个事务开始前锁定所更新的行</li><li>可串行化：单一线程，所有事务必须按照顺序进行</li></ul></li><li>三种错误<ul><li>脏读：读取到其他事务正在修改过程中的值</li><li>不可重复读：一个事务中，同一条语句得到的对应行的内容不同</li><li>幻读：一个事务中，同一条语句得到的数据数量不同</li></ul></li></ul><h1 id="MySQL-的存储引擎"><a href="#MySQL-的存储引擎" class="headerlink" title="MySQL 的存储引擎"></a>MySQL 的存储引擎</h1><ul><li>MySQL 的存储引擎类型<ul><li>InnoDB（默认）：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）</li><li>MyISAM（旧版本的 MySQL 默认）：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比较低，也可以使用</li><li>Memory：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择 Memory。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表</li></ul></li></ul><h1 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h1><ul><li>MySQL 主从复制作用<ul><li>实现数据的多处自动备份</li><li>实现读写分离还能进一步提升数据库的负载性能</li></ul></li><li>MySQL 主从复制的原理<ul><li>从服务器将日志与主服务器同步，同时重放日志的内容实现数据同步</li></ul></li></ul><h1 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h1><ul><li>MySQL 的索引逻辑<ul><li>MySQL 会为主键保存一棵聚集索引数树（叶子节点上保存了此节点的所有属性值），而其他的索引则为普通的索引树，普通的索引树进仅保存了主键值而没有保存属性值</li><li>当需要进行查询且 WHERE 条件不是主键时，需要先通过查询对应的索引，然后通过索引得到主键值，然后再去聚集索引树上搜索对应的主键值，所以需要查询两次索引，效率低</li></ul></li><li>覆盖索引<ul><li>如果使用 <code>SELECT</code> 的时候，恰好只需要主键和此搜索值，则可以不搜索聚集索引树，因为仅靠普通索引树即可得到答案</li><li>为了避免回表，可以通过建议一些可能的联合索引，使得进行 <code>SELECT</code> 的时候不会进行回表操作</li></ul></li></ul><h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><ul><li>为什么使用连接池<ul><li>与 Java 的线程池相同，为了节约系统资源</li></ul></li><li>常用的连接池<ul><li>DBCP：使用量最大的连接池</li><li>C3P0</li></ul></li></ul><h1 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h1><ul><li>水平分表<ul><li>将一个表的记录分割到数个表中，可以减少索引的大小，加快索引</li></ul></li><li>垂直分表<ul><li>将部分字段划分至其他的表，部分字段数据量大，进行索引时会带来大量的 IO 负担，进行分表有利于查询效率</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（计算机网络）</title>
    <link href="/2021/02/23/interview/computer-network/"/>
    <url>/2021/02/23/interview/computer-network/</url>
    
    <content type="html"><![CDATA[<h1 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h1><ul><li>哪七层<ul><li>应用层：协议与端口</li><li>表示层</li><li>会话层</li><li>传输层：TCP、UDP</li><li>网络层：IP、ARP</li><li>数据链路层：mac地址</li><li>物理层：物理字节流传输</li></ul></li></ul><h1 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h1><ul><li>ARP 协议的作用<ul><li>将 IP 地址转为下一跳的 mac 地址</li></ul></li></ul><h1 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h1><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据发送内容</th><th style="text-align:center">发送方向</th><th style="text-align:center">客户端状态</th><th style="text-align:center">服务器状态</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">CLOSED</td><td style="text-align:center">LISTEN</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">SYN=1 seq=x</td><td style="text-align:center">客户端 -&gt; 服务器</td><td style="text-align:center">发送后转为 SYN_SENT</td><td style="text-align:center">接收后转为 SYN_RCVD</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">SYN=1 ACK=1 ack=x+1 seq=y</td><td style="text-align:center">服务器 -&gt; 客户端</td><td style="text-align:center">接收后转为 ESTABLISHED</td><td style="text-align:center">SYN_RCVD</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">ACK=1 ack=y+1</td><td style="text-align:center">客户端 -&gt; 服务器</td><td style="text-align:center">ESTABLISHED</td><td style="text-align:center">接收后转为 ESTABLISHED</td></tr></tbody></table></div><ul><li><p>为什么需要最后一次握手</p><ul><li>在最后一次握手前，不能确定服务器本身不能确定自己发送的数据能否被客户端所接收到</li></ul></li><li><p>如果最后一次的 ACK 包服务器没有接收到，即客户端已经进入了 ESTABLISHED 而服务器仍然没有进入到 ESTABLISHED，此时会发生什么</p><ul><li>服务器：由于仍然处于 SYN_RCVD 状态下，当超过一定时间后，服务器会重新发送 SYN+ACK 包，直到达到次数上限后，直接关闭本次连接</li><li>客户端：因为已经进入了 ESTABLISHED，所以实际上已经可以发送数据了，当发送数据给服务器时，服务器会发现此连接并未建立，此时服务器将会按照 TCP 规则，发送 RST 包给客户端，当客户端接收到此 RST 包后，关闭连接</li></ul></li></ul><h1 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h1><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据发送内容</th><th style="text-align:center">发送方向</th><th style="text-align:center">客户端状态</th><th style="text-align:center">服务器状态</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">ESTABLISHED</td><td style="text-align:center">ESTABLISHED</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">FIN=1 seq=x</td><td style="text-align:center">客户端 -&gt; 服务器</td><td style="text-align:center">发送后转为 FIN_WAIT_1</td><td style="text-align:center">接收后转为 CLOSE_WAIT</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">ACK=1 ack=x+1</td><td style="text-align:center">服务器 -&gt; 客户端</td><td style="text-align:center">接收后转为 FIN_WAIT_2</td><td style="text-align:center">CLOSE_WAIT</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">FIN=1 seq=y</td><td style="text-align:center">服务器 -&gt; 客户端</td><td style="text-align:center">接收后转为 TIME_WAIT</td><td style="text-align:center">发送后转为 LAST_ACK</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">ACK=1 ack=y+1</td><td style="text-align:center">客户端 -&gt; 服务器</td><td style="text-align:center">发送后等待 2MSL 后转为 CLOSED</td><td style="text-align:center">接收后转为 CLOSED</td></tr></tbody></table></div><ul><li>四次挥手的理解<ul><li>四次挥手可以认为是两次+两次，一次是由客户端发起的，客户端表示自己的数据已经发送完毕了，通过 FIN 包通知服务器，而服务器接收到后通过 ACK 包向客户端回复表示收到。另一次是由服务器发起的，因为客户端发送完成数据并不代表服务器发送完成数据了，所以还有服务器单独发起的 FIN 包，此时客户端发送 ACK 包表示确定</li></ul></li></ul><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><ul><li>特点<ul><li>基于 TCP/IP （从 HTTP 3.0 开始，改为采用 UDP 协议）</li><li>由客户端发起请求，服务器进行响应</li><li>通过 URL 来区分服务</li><li>无状态</li><li>无连接</li><li>提供了八种方法，其中最常见的两种为 <code>GET</code> 和 <code>POST</code></li></ul></li><li>端口<ul><li>HTTP 协议默认为 80 端口，HTTPS 协议为 443 端口</li></ul></li><li>状态码</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">1XX</td><td style="text-align:center">信息状态码</td></tr><tr><td style="text-align:center">2XX</td><td style="text-align:center">成功状态码</td></tr><tr><td style="text-align:center">3XX</td><td style="text-align:center">重定向状态码</td></tr><tr><td style="text-align:center">4XX</td><td style="text-align:center">客户端错误码</td></tr><tr><td style="text-align:center">5XX</td><td style="text-align:center">服务器错误码</td></tr></tbody></table></div><ul><li>常见的状态码</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">200</td><td style="text-align:center">成功</td></tr><tr><td style="text-align:center">302</td><td style="text-align:center">重定向</td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">客户端的 URL 不存在</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">服务器错误</td></tr></tbody></table></div><ul><li>HTTP 和 HTTPS 的区别<ul><li>HTTP 采用明文传输的方式，而 HTTPS 采用的是加密的方式传输</li><li>HTTPS 通常需要申请证书</li></ul></li><li>GET 和 POST 的区别<ul><li>GET 通常用于获取数据，GET 的请求参数会附在 URL 后，用 <code>?</code> 分割 URL 和参数，用 <code>&amp;</code> 分割多个参数，特殊字符进行 base64 转码，以明文的方式显示</li><li>POST 通常用于更新数据，POST 的请求参数会放在数据包的 Body 部分，相对更加安全，浏览器不会进行保存</li></ul></li><li>HTTP 1.0 和 1.1 的区别<ul><li>持久连接</li><li>管道机制：同一个连接中，客户端可以发送多个请求</li><li>分块传输：服务器每产生一个数据，就发送一个数据</li><li>新增了部分请求方式</li></ul></li><li>HTTP 1.1 和 2.0 的区别<ul><li>完全采用二进制进行传输</li><li>完全多路复用</li><li>报头压缩</li></ul></li></ul><h1 id="TCP-的可靠传输"><a href="#TCP-的可靠传输" class="headerlink" title="TCP 的可靠传输"></a>TCP 的可靠传输</h1><ul><li>TCP 的可靠传输的实现<ul><li>数据校验</li><li>数据的合理分片和排序</li><li>滑动窗口机制<ul><li>发送方保留了已经发送的数据的副本，用于重传</li><li>发送方接收到 ACK 确认包后才会丢弃副本</li><li>发送方维护一个重传时间，当没有接收到 ACK 确认包时将会进行重传</li><li>通过拥塞控制来管理滑动窗口的大小</li><li>发送方和接收方商讨发送速度，通过控制发送速度保证接收方有足够的内存空间来接受数据</li></ul></li></ul></li><li>TCP “粘包” 现象<ul><li>原因：TCP 是面向字节流的，而且在遇到多个连续的数据包时，会合并至一个数据包内发送，此时接收方将难以识别并读取内部的数据</li><li>解决办法：在每个数据包前加上数据包的长度，使得每次读取数据时可以获取到数据包的长度而读出足够长的数据再进行解析</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（操作系统）</title>
    <link href="/2021/02/23/interview/operating-system/"/>
    <url>/2021/02/23/interview/operating-system/</url>
    
    <content type="html"><![CDATA[<h1 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h1><ul><li>什么时候从用户态转为内核态<ul><li>程序在用户态执行时，当需要进行系统调用的时候，或者遇到异常，或者外围设备引发的中断，如文件读取与写入，程序报错，键盘输入，网络操作等行为时，程序会从用户态转为内核态，直到执行此行为结束时，再返回用户态</li></ul></li><li>为什么要转至内核态<ul><li>通过限制用户态的权利，使得有限的系统资源能够受到系统的控制与管理，由系统进行资源的分配</li></ul></li><li>用户态和内核态的切换原理<ul><li>实质上就是中断，保存当前用户态的所有寄存器信息等，然后将代码指针指向中断处理程序</li></ul></li></ul><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><ul><li>区别<ul><li>进程是相对于操作系统的最小单位，每个进程都有唯一一个 PID 与之对应，每个进程都有独立的内存空间，代码段，数据段。进程之间相互独立且不会相互影响，一个进程可以包含多个线程。CPU在多个进程之间切换时会带来较大的开销。进程可以由CPU单独启动</li><li>线程是相对于处理器的最小单位，单个CPU只能同时处理一个线程，相同进程的线程之间共用内存空间，共用代码段和数据段，线程不可以单独执行，线程没有 PID 用于区别，线程出现错误或者异常时会影响此进程内的所有线程，CPU在同一个进程的线程内切换所带来的开销相对较小</li></ul></li><li>进程之间的通信<ul><li>管道（无名和有名管道）</li><li>消息队列</li><li>共享内存<ul><li>不同的进程可以同时将同一个内存页面映射到自己的地址空间中</li></ul></li><li>信号</li><li>套接口（网络）</li></ul></li><li>线程之间的通信<ul><li>锁机制（互斥锁、读写锁）</li><li>wait 和 notify</li><li>violate</li></ul></li><li>进程切换代价<ul><li>切换页目录</li><li>切换内核栈</li><li>切换上下文</li></ul></li><li>线程切换代价<ul><li>切换内核栈</li><li>切换上下文</li></ul></li></ul><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><ul><li>内存寻址是如何实现的<ul><li>段页式，程序进行分段，包括代码段，数据段等等，每一段再分页，并由 MMU 保存页表</li><li>MMU 通过页表将逻辑地址转为物理地址</li></ul></li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>缓存列<ul><li>每次计算机读取数据放入缓存的单位长度</li></ul></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><ul><li>iNode 结构<ul><li>文件树结构保存了一个目录的子文件/目录的名称以及对应的 iNode 号码</li><li>需要访问文件内容时，需要通过 iNode 号码来获取文件的详细信息</li><li>iNode 不包含文件名信息，指包含文件的 “元信息”</li></ul></li></ul><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习（C++）</title>
    <link href="/2021/02/22/interview/cpp/"/>
    <url>/2021/02/22/interview/cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="C-的特性与轨迹"><a href="#C-的特性与轨迹" class="headerlink" title="C++的特性与轨迹"></a>C++的特性与轨迹</h1><ul><li>C++ 的特性（C++11及以上）<ul><li>需要在不同的平台上进行编译</li><li>编译后的程序可以在操作系统上直接运行</li><li>可以面对过程和面对对象两种设计方式</li><li>可以直接操作本地的系统库</li><li>可以直接使用操作系统提供的接口</li><li>编译后仅对变量的类型进行了存储，不可以进行类似反射的操作</li><li>支持无符号整型</li><li>变量类型的字节长度受操作系统影响</li><li>支持指针、引用、值传递</li><li>没有默认提供的 GC 系统</li><li>由程序员负责管理变量所储存的位置</li><li>严格的 RAII</li><li>支持重写、重载，包括运算符的重载</li><li>多重继承</li><li>支持预编译，编译宏定义</li><li>支持函数指针，函数对象，lambda 表达式</li></ul></li><li>C++ 11 新增的特性<ul><li><code>foreach</code></li><li><code>auto</code> 自动类型推断</li><li><code>lambda</code> 匿名函数</li><li>后置返回类型</li><li><code>override</code> 关键字</li><li><code>nullptr</code> 代替原来的 NULL<ul><li>当存在 <code>void a(int x);</code> 和 <code>void a(char *x)</code> 时，若使用 <code>a(NULL)</code> 则会调用前者，这与通常的理解不同，而使用 <code>a(nullptr)</code> 则会明确的调用后者</li></ul></li><li>元组 tuple，可以使用 <code>get&lt;&gt;()</code> 取出其中的一个值，或者使用 <code>tie()</code> 装包或解包</li></ul></li></ul><h1 id="struct-和-class"><a href="#struct-和-class" class="headerlink" title="struct 和 class"></a>struct 和 class</h1><ul><li>区别<ul><li>struct 默认使用 public 而 class 默认使用 private</li><li>struct 可以直接使用 <code>&#123;&#125;</code> 进行初始化，而 class 则需要所有成员变量都是 public 的时候才可以使用</li></ul></li></ul><h1 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h1><ul><li>操作系统角度<ul><li>堆是操作系统为进程所分配的空间，在 C、C++ 语言中用来存放全局变量。由程序员管理，主动申请以及释放的空间，可能会出现内存泄漏。在进程结束后，由操作系统回收</li><li>栈是由编译器进行管理，由编译器进行申请，释放的空间，通常比堆要小很多，在 C、C++ 语言中，当调用一个函数时会创建一个栈，当函数结束时则会回收栈的空间</li></ul></li><li>数据结构的角度<ul><li>堆是一棵完全二叉树，常见的有最大堆和最小堆，以最大堆为例，其满足二叉树中的任意一个节点的孩子节点都比此节点小。通常用来实现优先队列的效果，插入和删除的复杂度均为 O(logN)</li><li>栈是一种线性数据结构，满足先进后出的特点，即最先进入的数据最后离开，常见于 DFS 中。也可以通过单调栈的方式求解一些问题。插入和删除的复杂度均为 O(1)</li></ul></li></ul><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><ul><li>虚函数<ul><li>虚函数由 virtual 标记</li><li>普通的虚函数仍然需要进行实现，所有继承此类的派生类可以重新实现此函数也可以不实现</li></ul></li><li>纯虚函数<ul><li>纯虚函数在普通的虚函数后，加上 <code>=0</code></li><li>当一个类拥有纯虚函数后，则此类变成抽象类，不可以进行实例化</li><li>纯虚函数不需要实现，且所有继承自此类的派生类必须实现此函数，否则派生类也是抽象类，不可以实例化</li></ul></li><li>虚函数的实现原理<ul><li>在类中保存一张虚函数表，表内保存了函数所在的代码段</li><li>当其他类继承自此类时，复制一份此虚函数表。当其中的虚函数进行实现后，将虚函数表中此函数的指针指向新的函数的地址</li><li>定义类的实例的时候，在类的开头保存了一个指向此虚函数表的指针，当需要调用此函数的时候，通过此指针找到对应的函数地址</li></ul></li></ul><h1 id="静态函数和虚函数"><a href="#静态函数和虚函数" class="headerlink" title="静态函数和虚函数"></a>静态函数和虚函数</h1><ul><li>静态函数和虚函数的区别<ul><li>静态函数在编译时就确定了运行的时机，而虚函数则是在运行的过程中动态的得知虚函数地址</li></ul></li></ul><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ul><li>扩容规则<ul><li>当空间不足的时候，vector 会扩容至当前空间的 2(GCC下)/1.5(MSVC)</li></ul></li><li>为什么这样扩容<ul><li>以两倍空间为例，当扩容次数为 30 次左右时，vector 的空间达到 1e9 （十亿）而通常每次扩容，都会需要在堆上重新分配空间，需要重新移动整个数组到新的空间。由此，可以得出重新分配空间的次数越少越好，同时也要节约内存的占用，因为按照此增长，其内存的重复的分配次数始终在常数范围内，所以采用了上述的扩容方式。</li></ul></li><li>MSVC下的 1.5 倍的空间相对于 GCC 下的 2 倍有什么好处和坏处<ul><li>好处：因为 2 倍空间下，任意一个空间都大于之前所有分配过的空间之和，这就意味着每次进行扩容的时候都需要分配一个新的空间。而在 1.5 倍下，可以重复使用之前的空间，1.5 倍相对会节约内存</li><li>坏处： 1.5 倍下的重新分配次数更多，也就意味着需要更多的重新分配空间和重新移动的次数，更加浪费时间</li></ul></li><li>clear 的复杂度<ul><li>复杂度与已有的元素数量成线性，因为每个元素都需要析构</li><li>clear 后，并不会改变 vector 的容量上限，只会更新 vector 内的 size 大小</li></ul></li></ul><h1 id="队列和堆栈的模拟"><a href="#队列和堆栈的模拟" class="headerlink" title="队列和堆栈的模拟"></a>队列和堆栈的模拟</h1><ul><li>用两个堆栈模拟队列<ul><li>将两个堆栈命名为 A、B</li><li>若 B 堆栈为空，则将 A 堆栈的所有值都推入 B 中</li><li>若需要推入，则推入到 A 中</li><li>若需要推出，则从 B 中推出</li></ul></li><li>用两个队列模拟堆栈<ul><li>将两个队列命名为 A、B</li><li>若需要推入，则推入到 A 中</li><li>若需要弹出，则将 A 中的值除了最后一个，其他都推入到 B 中，且仅留下一个值，然后弹出这个值，并将 A、B 队列命名为 B、A 队列</li></ul></li></ul><h1 id="四个类型转换"><a href="#四个类型转换" class="headerlink" title="四个类型转换"></a>四个类型转换</h1><div class="table-container"><table><thead><tr><th style="text-align:center">转换</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">static_cast</td><td style="text-align:center">普通的转换，与普通的 C 语言的强制类型转换相同，在编译期间进行转换，所以会检查转换是否合法</td></tr><tr><td style="text-align:center">const_cast</td><td style="text-align:center">去除 const 属性，但是不能去除其本身的 const 属性</td></tr><tr><td style="text-align:center">reinterpret_cast</td><td style="text-align:center">无条件强制转换</td></tr><tr><td style="text-align:center">dynamic_cast</td><td style="text-align:center">将基类转换为派生类</td></tr></tbody></table></div><h1 id="三个访问限制"><a href="#三个访问限制" class="headerlink" title="三个访问限制"></a>三个访问限制</h1><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">私有的，仅此类可以访问此属性</td></tr><tr><td style="text-align:center">protect</td><td style="text-align:center">保护的，仅此类已经此类的派生类可以访问此属性</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">公有的，任意对象和方法可以访问此属性</td></tr></tbody></table></div><h1 id="下面这段代码最终结果是"><a href="#下面这段代码最终结果是" class="headerlink" title="下面这段代码最终结果是"></a>下面这段代码最终结果是</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">main () &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br>    fork();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>为 <code>xxxxxx</code></li><li>由于有输出缓存，实际上在 fork 的时候，并没有输出至屏幕，而是保存在缓存中，当程序结束时，将缓存中的值输出至终端，所以得到 <code>xxxxxx</code></li></ul><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>static 变量的特点<ul><li>该变量在全局数据区分配内存</li><li>未经初始化的静态全局变量会被程序自动初始化为0（自动变量的值是随机的，除非它被显式初始化）</li><li>静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的</li></ul></li></ul><h1 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h1><ul><li>指针和引用的区别<ul><li>指针有自己的内存空间，是一个变量类型，而引用没有占用内存空间，只是一个别名</li><li>使用 <code>sizeof</code> 可以求得在 32 位操作系统下，指针的大小为 $4$ 个字节，而引用则为原对象的大小</li><li>指针可以初始化为任意正整数值，而引用必须初始化为一个已经存在的变量</li><li>参数传递时，指针需要先进行指针转为引用然后再使用，而引用可以直接操作原对象</li><li>指针可以有 const 属性，而引用没有 const 属性</li><li>指针可以重新赋值，而引用不可以更改</li><li>指针可以进行多级指针，而引用只有一级</li><li>指针可以引用进行 ++（自增）操作的逻辑和结果都不同</li><li>当需要返回动态内存分配的对象时，需要使用指针而不是引用，因为引用可能会产生内存泄漏</li></ul></li></ul><h1 id="平面几何问题"><a href="#平面几何问题" class="headerlink" title="平面几何问题"></a>平面几何问题</h1><ul><li>判断一个点是否在一个三角形内<ul><li>定义三角形为 $ \vartriangle ABC$，点为 $P$，计算 <script type="math/tex">S_{\vartriangle ABC} = S_{\vartriangle ABP} + S_{\vartriangle ACP} + S_{\vartriangle BCP}</script> 是否成立。而三角形面积可以通过割补法或者叉积求</li></ul></li></ul><h1 id="c-智能指针"><a href="#c-智能指针" class="headerlink" title="c++智能指针"></a>c++智能指针</h1><ul><li><code>auto_ptr</code>（已弃用）<ul><li>采用所有权模式，任何一个 <code>new</code> 的对象只能由一个 <code>auto_ptr</code> 来指向，进行赋值操作会使得原来的指针丢失指向的对象</li></ul></li><li><code>unique_ptr</code><ul><li>与 <code>auto_ptr</code> 相同，但是进行赋值操作时，会直接报错，而 <code>auto_ptr</code> 不会</li></ul></li><li><code>shared_ptr</code><ul><li>共享指针，允许多个指针指向此对象，同时当所有指向此对象的指针都被析构后，此对象将会被删除</li></ul></li><li><code>weak_ptr</code><ul><li>弱共享指针，允许指向其他的 <code>shared_ptr</code> 对象，此指针不会影响 <code>shared_ptr</code> 的析构行为，通常用来避免相互指向问题</li></ul></li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li>构造函数有哪些特征<ul><li>名字和类名相同</li><li>没有返回值</li><li>生成类的自动执行，不需要调用</li></ul></li><li>为什么构造函数不可以是虚函数<ul><li>因为虚函数表指针是在构造函数期间创建的，没有虚函数表就没有办法调用虚函数</li></ul></li></ul><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><ul><li>析构函数的作用<ul><li>如果一个类中有指针，且这个指针指向了一段由此类的实例请求分配的空间，那么需要由析构函数来实现对这块区域的释放，否则会造成内存泄漏</li></ul></li><li>C++ 为什么习惯把析构函数定义为虚函数<ul><li>当这个类需要作为父类派生的时候，如果程序得到的是此父类的指针，那么此时就无法析构子类，出现内存泄漏</li></ul></li><li>C++ 为什么默认的析构函数不是虚函数<ul><li>虚函数需要额外的虚函数表和虚函数表指针，对于不会派生的类而言，浪费空间</li></ul></li></ul><h1 id="重载和覆盖"><a href="#重载和覆盖" class="headerlink" title="重载和覆盖"></a>重载和覆盖</h1><ul><li>重载和覆盖的区别<ul><li>重载：两个相同的函数名，但是参数列表不同</li><li>覆盖：父类创建的虚函数，派生类重新定义</li></ul></li></ul><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><ul><li>C++ 中的锁类型<ul><li>互斥锁：对于同一个变量只允许一个线程进行读写，若不满足时则会进入阻塞，并且 CPU 不会进入忙等</li><li>条件锁：当满足某个条件时，再唤醒此线程，否则一直处于阻塞状态</li><li>自旋锁：不断的检查锁是否满足条件，不释放 CPU，比较耗费 CPU</li><li>读写锁：允许有读锁的时候再加读锁，但是有写锁时不再能加任何锁</li><li>递归锁：允许同一个线程对同一个锁进行多次加锁</li></ul></li></ul><h1 id="new和malloc"><a href="#new和malloc" class="headerlink" title="new和malloc"></a>new和malloc</h1><ul><li>new 和 malloc 的区别<ul><li>new 是一个 c++ 关键字，不需要头文件支持，而 malloc 是一个函数，需要头文件支持</li><li>malloc 需要给出需要的空间大小，而 new 不需要</li><li>new 返回的是对象的指针，而 malloc 返回的是 void* 类型的指针</li><li>new 分配失败时会抛出错误，而 malloc 失败时返回空指针</li><li>new 会调用被构造的类型的构造函数，而 malloc 只是分配内存空间</li><li>可以重载 new 操作，但是不能重载 malloc 操作</li></ul></li><li>delete 和 free 的区别<ul><li>delete 会调用析构函数，而 free 直接回收空间</li></ul></li></ul><h1 id="C-编译"><a href="#C-编译" class="headerlink" title="C++ 编译"></a>C++ 编译</h1><ul><li>从源文件到可执行文件的过程<ul><li>预处理，宏定义替换</li><li>编译，生成汇编代码</li><li>汇编，将汇编代码转为机器代码，生成目标文件</li><li>链接，将多个目标文件连接成最终可执行文件</li></ul></li></ul><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><ul><li>C++ 的内存分布<ul><li>代码段：存储机器代码和字符串常量</li><li>数据段：存储程序中已初始化的全局变量和静态变量</li><li>BSS段：存储未初始化的全局变量和静态变量，以及所有被初始化为 0 的全局变量和静态变量</li><li>堆区：调用 <code>new/malloc</code> 函数时动态管理分配的内存，同时需要用 <code>delete/free</code> 来手动释放</li><li>栈区：使用栈空间存储的函数的变量和返回值等</li><li>映射区：存储动态链接库以及调用 <code>mmap</code> 函数进行的文件映射</li></ul></li><li>C++ 内存泄漏检查<ul><li>通过 valgrind 检查一个调试程序</li><li>valgrind 可以检查出内存泄漏、越界访问、未初始化内存</li></ul></li></ul><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><ul><li>静态方法和实例方法有何不同<ul><li>调用时，静态方法既可以用 <code>类名.方法名</code> 和 <code>对象名.方法名</code>，而实例方法只能用后者</li><li>静态方法只能访问静态变量，而实例方法可以访问静态变量和成员变量</li></ul></li></ul><h1 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h1><ul><li>如何确定一个值是左值还是右值<ul><li>提供了地址的为左值，左值可以没有值，但是一定有地址</li><li>提供了值的为右值，右值可以没有地址，但是一定有值</li></ul></li><li>右值引用的功能<ul><li>移动语句</li><li>完美转发</li></ul></li></ul><h1 id="C-hash"><a href="#C-hash" class="headerlink" title="C++ hash"></a>C++ hash</h1><ul><li>C++ 的内置 <code>hash</code> 函数的实现<ul><li>对于基础变量，<code>hash</code> 函数返回值为此变量的值，不做修改</li><li>对于 <code>string</code>，<code>hash</code> 函数对每四个字节(64位操作系统下)进行位运算最终得到结果，实际的内部过程使用了两个特殊的固定值，下面是 C++ 的字符串 <code>hash</code> 函数的实际内部实现（C++11）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> <span class="hljs-title">unaligned_load</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p)</span> </span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> result;<br>    __builtin_memcpy(&amp;result, p, <span class="hljs-keyword">sizeof</span>(result));<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">size_t</span> _Hash_bytes(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> len, <span class="hljs-keyword">size_t</span> seed = <span class="hljs-number">0xc70f6907</span>UL) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> m = <span class="hljs-number">0x5bd1e995</span>;<br>    <span class="hljs-keyword">size_t</span> hash = seed ^len;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *buf = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *&gt;(ptr);<br><br>    <span class="hljs-comment">// Mix 4 bytes at a time into the hash.</span><br>    <span class="hljs-keyword">while</span> (len &gt;= <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">size_t</span> k = unaligned_load(buf);<br>        k *= m;<br>        k ^= k &gt;&gt; <span class="hljs-number">24</span>;<br>        k *= m;<br>        hash *= m;<br>        hash ^= k;<br>        buf += <span class="hljs-number">4</span>;<br>        len -= <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Handle the last few bytes of the input array.</span><br>    <span class="hljs-keyword">switch</span> (len) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            hash ^= <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>&gt;(buf[<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">16</span>;<br>            [[gnu::fallthrough]];<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            hash ^= <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>&gt;(buf[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>;<br>            [[gnu::fallthrough]];<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            hash ^= <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>&gt;(buf[<span class="hljs-number">0</span>]);<br>            hash *= m;<br>    &#125;;<br><br>    <span class="hljs-comment">// Do a few final mixes of the hash.</span><br>    hash ^= hash &gt;&gt; <span class="hljs-number">13</span>;<br>    hash *= m;<br>    hash ^= hash &gt;&gt; <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">return</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试准备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round#699 (Div. 2)</title>
    <link href="/2021/02/06/acm/CodeforcesRound699(Div.%202)/"/>
    <url>/2021/02/06/acm/CodeforcesRound699(Div.%202)/</url>
    
    <content type="html"><![CDATA[<p><em>暂时还没有 AK，留坑</em></p><h1 id="A-Space-Navigation"><a href="#A-Space-Navigation" class="headerlink" title="A. Space Navigation"></a>A. Space Navigation</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一段在棋盘上的移动指令，问能否通过在不改变原指令顺序，仅删除部分或者全部或者不删除的情况下，到达某个指定地点</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可以通过指令直接得出可以到达的范围，比如删除所有的“向左”指令后，能够到达的最右，同理可以得到四个方向的极值，最后判断目标地点是否在极值范围内即可</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-built_in">string</span> str;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; str;<br>        <span class="hljs-keyword">int</span> cnt[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : str) &#123;<br>            <span class="hljs-keyword">switch</span> (item) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;R&#x27;</span>:<br>                    cnt[<span class="hljs-number">0</span>]++;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>                    cnt[<span class="hljs-number">1</span>]++;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;U&#x27;</span>:<br>                    cnt[<span class="hljs-number">2</span>]++;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                    cnt[<span class="hljs-number">3</span>]++;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (-cnt[<span class="hljs-number">1</span>] &lt;= x &amp;&amp; x &lt;= cnt[<span class="hljs-number">0</span>] &amp;&amp; -cnt[<span class="hljs-number">3</span>] &lt;= y &amp;&amp; y &lt;= cnt[<span class="hljs-number">2</span>]) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-New-Colony"><a href="#B-New-Colony" class="headerlink" title="B. New Colony"></a>B. New Colony</h1><h2 id="大致题意-1"><a href="#大致题意-1" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一段台阶，然后你从第一阶开始往下面滚砖块，砖块遇到下坡就走到下一阶，遇到上坡就停止，并增加这一阶的高度。给你 $n$ 个砖块，请问最后一块砖块停止在哪里</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>首先这道题如果不能使用暴力的话，是很麻烦的一道题。但是注意观察这道题的数据范围，<script type="math/tex">1 \leq n \leq 100, 1 \leq k \leq 10^9, 1 \leq h_i \leq 100, \sum n \leq 100</script></p><p>假如阶梯是一直下坡或者平坡，那么砖块就会直接掉出阶梯。而如果砖块没有掉出阶梯，那么它一定会不会处于整个阶梯的最高处。所以考虑一个可能，即不断的滚落的方块将整个阶梯都填满成平地，则最多需要 $n \times h_i = 10000$ 个砖块</p><p>也就是说，当 $k &gt; 10000$ 时，则最后一块砖块必然掉出阶梯。那么当 $k \leq 10000$ 时，暴力求解即可</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">10000</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> last = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>                <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (cur &lt; n - <span class="hljs-number">1</span> &amp;&amp; data[cur + <span class="hljs-number">1</span>] &lt;= data[cur]) cur++;<br>                <span class="hljs-keyword">if</span> (cur == n - <span class="hljs-number">1</span>) last = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    data[cur]++;<br>                    last = cur + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; last &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Fence-Painting"><a href="#C-Fence-Painting" class="headerlink" title="C. Fence Painting"></a>C. Fence Painting</h1><h2 id="大致题意-2"><a href="#大致题意-2" class="headerlink" title="大致题意"></a>大致题意</h2><p>一个篱笆有 $n$ 个木条组成，每个木条有一个初始的颜色。每一个木条都有一个指定的目标颜色。有 $m$ 个油漆工，每个油漆工都只携带一种颜料，按照顺序来给这个篱笆上色，他们每次必须选择一块且恰好一块木板，把它的颜色变成油漆工所携带的颜色。问每个油漆工应该选择哪一块，使得最后的木条都变成指定的颜色</p><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>首先，肯定找出目前没有达到目标的木条，然后找到合适的油漆工给它上色。如果找不到合适的油漆工，那么肯定没戏</p><p>接下来是剩下的多出来的没有使用的油漆工，也需要为他们找一块木板去上色。</p><p>注意到，由于后来的可以覆盖前面的颜色，所以可以直接考虑最后那个油漆匠。</p><p>如果根据上面的操作，这个油漆匠已经有了一块木板去上色的话，那么剩下多出来的油漆工可以都给这块木板上色，这样的话，无论最后上色是什么，最后一个油漆匠一定能把这块木板染回指定的颜色。</p><p>而如果最后一个油漆工也在那些没有使用的油漆工内，那么他只需要找到一块最终颜色和自己所携带的颜色相同的，然后指定他去给这块木板上色。剩下的那些没有使用的油漆工也去给这块木板上色即可。</p><h2 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        vector&lt;int&gt; a(n), b(n), c(m), res(m, 0);<br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; data;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; b[i];<br>            <span class="hljs-keyword">if</span> (a[i] != b[i]) data[b[i]].push_back(i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; c[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>            <span class="hljs-keyword">auto</span> iter = data.find(c[i]);<br>            <span class="hljs-keyword">if</span> (iter == data.end()) <span class="hljs-keyword">continue</span>;<br>            res[i] = iter-&gt;second.back();<br>            iter-&gt;second.pop_back();<br>            <span class="hljs-keyword">if</span> (iter-&gt;second.size() == <span class="hljs-number">0</span>) data.erase(iter);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (res.back() == <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">if</span> (c.back() == b[i]) res.back() = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : res) <span class="hljs-keyword">if</span> (item == <span class="hljs-number">0</span>) item = res.back();<br>        <span class="hljs-keyword">if</span> (res.back() == <span class="hljs-number">0</span> || !data.empty()) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.size(); ++i) <span class="hljs-built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == res.size() - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-AB-Graph"><a href="#D-AB-Graph" class="headerlink" title="D. AB Graph"></a>D. AB Graph</h1><h2 id="大致题意-3"><a href="#大致题意-3" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一个完全有向图，每条边都有一个字母标记，标记的字母只有可能是 “a” 或者 “b”。你需要找出一条可以包含重复点重复边的路径，满足这条路径的长度等于给定的要求，并且这条路径组成的字符串为回文串</p><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>首先，由于可以有重复点和重复边，那么考虑下面的情况</p><h3 id="如果这个图只有两个点。"><a href="#如果这个图只有两个点。" class="headerlink" title="如果这个图只有两个点。"></a>如果这个图只有两个点。</h3><p>此时只有两条边。如果这两条边恰好字母还相同(例如下面的 mermaid 图)，那么任意长度的路径都可以画出来，只需要在这两个点之间来回走即可</p><pre><code class=" mermaid">graph LRA -- a --&gt; BB -- a --&gt; A</code></pre><p>如果这两条边的字母还不相同(例如下面的 mermaid 图)，那么来回的路径为奇数的时候，可以画出来，只需要在这两个点之间来回走即可</p><pre><code class=" mermaid">graph LRA -- a --&gt; BB -- b --&gt; A</code></pre><h3 id="如果这个图至少有三个点"><a href="#如果这个图至少有三个点" class="headerlink" title="如果这个图至少有三个点"></a>如果这个图至少有三个点</h3><p>取出整个图中任意三个点，假定这三个点为 $a, b, c$，这里定义 $g(a, b)$ 为从点 $a$ 到点 $b$ 的路径的标记字母。那么我们可以知道，一定满足 $g(a, b) = g(b, c)$ 或 $g(b, c) = g(c, a)$ 或 $g(c, a) = g(a, b)$ 其中至少一个</p><blockquote><p>证明<br>反证法，假设上述不成立，则<br>由上述得 $g(a, b) \not = g(b, c)$，那么 $g(a, b)$ 与 $g(b, c)$ 相异。<br>由上述得 $g(b, c) \not = g(c, a)$，那么 $g(b, c)$ 与 $g(c, a)$ 相异。由于 $g(a, b)$ 与 $g(b, c)$ 相异，而所有边只有两种可能，所以 $g(c, a)$ 与 $g(b, c)$ 必定相同<br>由上述得 $g(c, a) \not = g(a, b)$，那么 $g(c, a)$ 与 $g(a, b)$ 相异，这与上面的结论相反，所以假设不成立，即，上述结论成立</p></blockquote><p>这时，通过交换 $a, b, c$ 三个点，使得 $g(a, b) = g(b, c)$ 得到满足，则可以得到下图</p><pre><code class=" mermaid">graph LRa -- x --&gt; bb -- x --&gt; cc -- y --&gt; a</code></pre><p>这里，我们不需要关心 $y$ 的情况，无论它是否与 $x$ 相同</p><p>这里，只需要进行 $a \rightarrow b \rightarrow c \rightarrow a$ 这样的循环，即可实现一个回文串。只需要确定是从哪一个节点开始循环即可</p><ul><li>若从 $a$ 开始循环，则得到的串为 $xxyxxyxxyxx \dots$ 当长度为 $3t + 2$　时为回文串</li><li>若从 $b$ 开始循环，则得到的串为 $xyxxyxxyxxyx \dots$ 当长度为 $3t$ 时为回文串</li><li>若从 $c$ 开始循环，则得到的串为 $yxxyxxyxxyxxy \dots$ 当长度为 $3t + 1$ 时为回文串</li></ul><p>所以只需要判断所需要的字符串长度与 $3$ 取模即可</p><h2 id="AC-code-3"><a href="#AC-code-3" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">g</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : g) item.reserve(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; g[i];<br><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (g[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] == g[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] || m % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m + <span class="hljs-number">1</span>; ++i) <span class="hljs-built_in">cout</span> &lt;&lt; (i % <span class="hljs-number">2</span>) + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == m];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; tmp(<span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) tmp[i] = i;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (g[tmp[<span class="hljs-number">0</span>]][tmp[<span class="hljs-number">1</span>]] == g[tmp[<span class="hljs-number">1</span>]][tmp[<span class="hljs-number">2</span>]]) <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">while</span> (next_permutation(tmp.begin(), tmp.end()));<br><br>            assert(g[tmp[<span class="hljs-number">0</span>]][tmp[<span class="hljs-number">1</span>]] == g[tmp[<span class="hljs-number">1</span>]][tmp[<span class="hljs-number">2</span>]]);<br>            <span class="hljs-keyword">int</span> cur = (m + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span>;<br><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m + <span class="hljs-number">1</span>; ++i) <span class="hljs-built_in">cout</span> &lt;&lt; tmp[(i + cur) % <span class="hljs-number">3</span>] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == m];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-Sorting-Books"><a href="#E-Sorting-Books" class="headerlink" title="E. Sorting Books"></a>E. Sorting Books</h1><h2 id="大致题意-4"><a href="#大致题意-4" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一段数列，进行如下的操作使得整个序列中相同的数字处于连续的子段中</p><p>操作：将这个数字放到整个字符串的最后</p><p>问，最少需要进行多少次操作</p><h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>首先，如果进行 $n$ 次操作，那么必然可以使得整个序列满足上述的要求。因为只需要按照排序后的顺序来移动所有的数字，则必定可以满足条件</p><p>那么接下来就是想办法减少次数。</p><p>如果我选出一个值，当数字与这个值相同的时候，不对其进行操作。由于其他值被移动到了最后。所以与这个值相同的值都自然而然的被移动到了最前面，例如下面这个序列</p><script type="math/tex; mode=display">1, 3, 2, 2, 1, 3</script><p>如果我选择 $3$ 作为固定值，那么当 $1, 2$ 都进行过移动后，$3$ 自然而然的也就满足了条件</p><p>再进一步，如果稍微修改一下这个序列，将其改为</p><script type="math/tex; mode=display">1, 3, 1, 2, 3, 2</script><p>这时，发现当我仅对 $3$ 进行移动之后，$1, 2$ 自然而然的也满足条件了。由此，可以得到一个这样的推广结论：</p><p>在某一个子区间内，如果这个子区间内存在某一个数值 $x$，满足整个区间的所有 $x$ 都在这个子区间内，那么，这个 $x$ 可以固定不动，且这个子区间内的其他所有值都需要进行操作。</p><p>所以此时可以进行 dp 求解，方法如下：</p><ul><li>找出所有值所对应的最小子区间</li><li>假如这个子区间内选择这个值作为固定值，那么它所带来的代价就是这个子区间的长度减去这个值的个数</li><li>由于需要进行减法比较麻烦，可以改变思路用加法，即求出有多少个值是可以固定不操作的</li><li>则对于每一个区间的固定值，那么其带来的固定值数量就是这个区间内的值的个数</li><li>对每一位进行 dp 求解即可</li></ul><h2 id="AC-code-4"><a href="#AC-code-4" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    vector&lt;int&gt; data(n), l(n + 1, n), r(n + 1), dp(n + 1), cnt(n + 1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; data[i];<br>        l[data[i]] = min(l[data[i]], i);<br>        r[data[i]] = max(r[data[i]], i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        cnt[data[i]]++;<br>        dp[i] = max(dp[i + <span class="hljs-number">1</span>], cnt[data[i]]);<br>        <span class="hljs-keyword">if</span> (l[data[i]] == i) dp[i] = max(dp[i], cnt[data[i]] + dp[r[data[i]] + <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; n - dp[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清理 WSL2 的磁盘占用</title>
    <link href="/2021/01/27/develop-note/wsl-clean/"/>
    <url>/2021/01/27/develop-note/wsl-clean/</url>
    
    <content type="html"><![CDATA[<p>方法来源：<a href="https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168">https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168</a></p><p>由于 vhdx 格式的磁盘镜像文件只支持自动扩容但不支持自动缩容，所以需要手动来实现缩容，即利用 Windows 自带的 diskpart 来实现</p>]]></content>
    
    
    
    <tags>
      
      <tag>短笔记</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round#697 (Div. 3)</title>
    <link href="/2021/01/26/acm/CodeforcesRound697(Div.%203)/"/>
    <url>/2021/01/26/acm/CodeforcesRound697(Div.%203)/</url>
    
    <content type="html"><![CDATA[<p><em>自南京区域赛结束之后就一直在准备期末考试，直到最近结束考试之后开始了复建的生活，这场 Div3 除了 D 题因为爆了 int 然后卡了，G题真的没在比赛期间想出来，其他题目都是非常顺利的解决掉了，且只用了一个小时</em></p><h1 id="A-Odd-Divisor"><a href="#A-Odd-Divisor" class="headerlink" title="A. Odd Divisor"></a>A. Odd Divisor</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个整数，请问它是否存在一个不为 1 的奇因子</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为除 1 以外的所有奇因子都可以分解出至少一个奇质因子，那么只需要找到那些不包含奇质因子的数进行排查就行。而不包含奇质因子的数字很明显就是所有的 2 的幂次，所以打表就可以了。注意别忘记范围超过了 int</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; err;<br>    <span class="hljs-keyword">int</span> cur = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">62</span>; ++i) &#123;<br>        err.insert(cur);<br>        cur &lt;&lt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> tmp;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (err.count(tmp) ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-New-Year’s-Number"><a href="#B-New-Year’s-Number" class="headerlink" title="B. New Year’s Number"></a>B. New Year’s Number</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个数，请问它是不是 n 个 2020 和 m 个 2021 相加得到的</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>把 2021 看成 2020 + 1，那么就变成了 (n + m) 个 2020 和 m 个 1 相加得到，由于 n 肯定是自然数，则只要满足这个数除以 2020 的商(也就是 n + m 部分)大于等于余数(也就是 m)即可</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> tmp;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (tmp / <span class="hljs-number">2020</span> &gt;= tmp % <span class="hljs-number">2020</span> ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Ball-in-Berland"><a href="#C-Ball-in-Berland" class="headerlink" title="C. Ball in Berland"></a>C. Ball in Berland</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>有两组人，分别为 a 和 b ，有 k 对组合，每对组合都是从 a 中选出一个，从 b 中选出一个。你现在需要选出两对组合，使得这两对组合不会发生冲突，即不会出现 a 中的人同时参与了这两个组合或者 b 中的人同时参与了这两个组合或者两者都同时参与</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>可以用类似容斥的办法解决。因为保证了每一对组合都不同，所以当我选出一对的时候，那么还有 <code>k - cnt[a] - cnt[b] + 1</code> 对我可以选，其中的 <code>cnt</code> 为这个人参与的组合数量。只需要遍历所有的组合，然后对于每对组合进行求解即可</p><h2 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> a, b, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; k;<br>        vector&lt;int&gt; ca(a + 1), cb(b + 1);<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; p(k);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>            <span class="hljs-keyword">int</span> u;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u;<br>            p[i].first = u;<br>            ca[u]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>            <span class="hljs-keyword">int</span> u;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u;<br>            p[i].second = u;<br>            cb[u]++;<br>        &#125;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) ans += k - ca[p[i].first] - cb[p[i].second] + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans / <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Cleaning-the-Phone"><a href="#D-Cleaning-the-Phone" class="headerlink" title="D. Cleaning the Phone"></a>D. Cleaning the Phone</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有一组物品，他们有各自的代价和价值，其中代价只有 1 或者 2 两种，请问如何选择物品，使得代价尽可能小的情况下满足所需要的价值</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>直接考虑枚举，比如枚举选择了 x 件代价为 1 的物品，求出这时候至少需要多少件代价为 2 的物品，然后枚举所有情况，输出最小的情况即可。</p><h2 id="AC-code-3"><a href="#AC-code-3" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mem</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; data[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; mem[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> op;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; op;<br>            data[op - <span class="hljs-number">1</span>].push_back(mem[i]);<br>        &#125;<br>        sort(data[<span class="hljs-number">0</span>].begin(), data[<span class="hljs-number">0</span>].end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br>        sort(data[<span class="hljs-number">1</span>].begin(), data[<span class="hljs-number">1</span>].end(), greater&lt;<span class="hljs-keyword">int</span>&gt;());<br>        <span class="hljs-keyword">int</span> ans = INT_MAX;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; data[<span class="hljs-number">0</span>].size(); ++i) data[<span class="hljs-number">0</span>][i] += data[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; data[<span class="hljs-number">1</span>].size(); ++i) data[<span class="hljs-number">1</span>][i] += data[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">auto</span> iter = lower_bound(data[<span class="hljs-number">1</span>].begin(), data[<span class="hljs-number">1</span>].end(), m);<br>        <span class="hljs-keyword">if</span> (iter != data[<span class="hljs-number">1</span>].end()) ans = min(ans, (<span class="hljs-keyword">int</span>) (iter - data[<span class="hljs-number">1</span>].begin() + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>);<br><br>        iter = lower_bound(data[<span class="hljs-number">0</span>].begin(), data[<span class="hljs-number">0</span>].end(), m);<br>        <span class="hljs-keyword">if</span> (iter != data[<span class="hljs-number">0</span>].end()) ans = min(ans, (<span class="hljs-keyword">int</span>) ((iter - data[<span class="hljs-number">0</span>].begin() + <span class="hljs-number">1</span>)));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data[<span class="hljs-number">0</span>].size(); ++i) &#123;<br>            iter = lower_bound(data[<span class="hljs-number">1</span>].begin(), data[<span class="hljs-number">1</span>].end(), m - data[<span class="hljs-number">0</span>][i]);<br>            <span class="hljs-keyword">if</span> (iter != data[<span class="hljs-number">1</span>].end()) ans = min(ans, (<span class="hljs-keyword">int</span>) ((iter - data[<span class="hljs-number">1</span>].begin() + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + i + <span class="hljs-number">1</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data[<span class="hljs-number">1</span>].size(); ++i) &#123;<br>            iter = lower_bound(data[<span class="hljs-number">0</span>].begin(), data[<span class="hljs-number">0</span>].end(), m - data[<span class="hljs-number">1</span>][i]);<br>            <span class="hljs-keyword">if</span> (iter != data[<span class="hljs-number">0</span>].end()) ans = min(ans, (<span class="hljs-keyword">int</span>) ((iter - data[<span class="hljs-number">0</span>].begin() + <span class="hljs-number">1</span>) + <span class="hljs-number">2</span> * (i + <span class="hljs-number">1</span>)));<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (ans == INT_MAX ? <span class="hljs-number">-1</span> : ans) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-Advertising-Agency"><a href="#E-Advertising-Agency" class="headerlink" title="E. Advertising Agency"></a>E. Advertising Agency</h1><h2 id="大致题意-1"><a href="#大致题意-1" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一组数据，要求你从中取出 k 个数据，使得这 k 个数据的之和最大，问有几种取法</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>首先取最大必然只能从大到小取，直到取满 k 个。但是在取最后几个相同的值的时候，由于有多个选择，则可以产生多个方案。而这个方案数量很明显即为组合数。</p><h2 id="AC-code-4"><a href="#AC-code-4" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1100</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = res * a % mod;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br>ll fac[N], ifac[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> siz)</span> </span>&#123;<br>    fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= siz; i++)<br>        fac[i] = i * fac[i - <span class="hljs-number">1</span>] % mod;<br>    ifac[siz] = qpow(fac[siz], mod - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = siz; i &gt;= <span class="hljs-number">1</span>; i--) ifac[i - <span class="hljs-number">1</span>] = ifac[i] * i % mod;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(ll n, ll m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span> || n == m) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (m &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    init(<span class="hljs-number">1050</span>);<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n, k;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> tmp;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>            mp[tmp]++;<br>        &#125;<br><br>        <span class="hljs-keyword">auto</span> iter = mp.rbegin();<br>        <span class="hljs-keyword">while</span> (iter != mp.rend()) &#123;<br>            <span class="hljs-keyword">if</span> (k &gt; iter-&gt;second) &#123;<br>                k -= iter-&gt;second;<br>                iter++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; C(iter-&gt;second, k) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-Unusual-Matrix"><a href="#F-Unusual-Matrix" class="headerlink" title="F. Unusual Matrix"></a>F. Unusual Matrix</h1><h2 id="大致题意-2"><a href="#大致题意-2" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你两个 01 矩阵，问能否通过下面两个方式将第一个矩阵转为和第二个矩阵一样</p><ul><li>将一行的值翻转</li><li>将一列的值翻转</li></ul><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>由于是翻转相同，那么首先直接对这两个矩阵做异或，可以得到一个矩阵，接下来只需要把这个矩阵给转为只有 0 或者只有 1 的矩阵即可</p><p>这时候其实可以模拟，假定这行第一个值为 1 则翻转，否者不翻转，然后最后判定是否为纯 0 矩阵</p><p>但是这样太麻烦了，其实可以直接判断相邻两行之间是否相同或者相异，即任意两行或者两列的异或结果全为 0 或者 全为 1 则可以，否则不可以</p><h2 id="AC-code-5"><a href="#AC-code-5" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        vector&lt;string&gt; data1(n), data2(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data1[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; data2[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) data1[i][j] = (data1[i][j] - <span class="hljs-string">&#x27;0&#x27;</span>) ^ (data2[i][j] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">char</span> tmp = data1[i][<span class="hljs-number">0</span>] ^ data1[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> ((data1[i][j] ^ data1[i - <span class="hljs-number">1</span>][j]) != tmp) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; (flag ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-Strange-Beauty"><a href="#G-Strange-Beauty" class="headerlink" title="G. Strange Beauty"></a>G. Strange Beauty</h1><h2 id="大致题意-3"><a href="#大致题意-3" class="headerlink" title="大致题意"></a>大致题意</h2><p>给你一组数列，请问至少需要删除几个数字，使得整个数列的任意两个值满足大数取模小数为 0</p><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>利用素数筛的方式来 dp 求算最多能有多少个值能满足此条件，相减就能得到答案</p><h2 id="AC-code-6"><a href="#AC-code-6" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> _;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; _;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ts = <span class="hljs-number">0</span>; ts &lt; _; ++ts) &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        vector&lt;int&gt; cnt(2e5 + 1), dp(2e5 + 1);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> tmp;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; tmp;<br>            cnt[tmp]++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2e5</span>; ++i) &#123;<br>            dp[i] += cnt[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt;= <span class="hljs-number">2e5</span>; j += i) dp[j] = max(dp[j], dp[i]);<br>            ans = max(ans, dp[i]);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; n - ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 下的 NTFS 驱动器索引 BUG</title>
    <link href="/2021/01/18/develop-note/windows-ntfs/"/>
    <url>/2021/01/18/develop-note/windows-ntfs/</url>
    
    <content type="html"><![CDATA[<h1 id="NTFS-BUG"><a href="#NTFS-BUG" class="headerlink" title="NTFS BUG"></a>NTFS BUG</h1><div class="note note-danger">            <font color=red size=5>警告，请千万不要在 Windows 下的命令行中运行此命令，或者以其他等价的方式访问</font>          </div><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> c:\:<span class="hljs-variable">$i30</span>:<span class="hljs-variable">$bitmap</span><br></code></pre></td></tr></table></figure><div class="note note-danger">            <font color=red size=5>警告，请千万不要在 Windows 下的命令行中运行此命令，或者以其他等价的方式访问</font>          </div><p>当你试图进入、访问此目录时，就有机会导致 NTFS 驱动器索引损坏，此问题的触发方式包括但不限于</p><ul><li>在极低权限的命令行中执行此命令</li><li>在 powershell 中执行此命令</li><li>在浏览器中试图访问此 <code>c:\:$i30:$bitmap</code> 地址</li><li>其他试图访问此地址的程序</li></ul><p>触发后，系统将会提示磁盘错误，需要修复，并提示重启电脑。重启后，电脑将会进入磁盘修复，Windows 将会试图修复此问题</p><p>部分电脑可以修复此问题，并且正常进入系统，而部分电脑将会无法修复此 BUG，且无法进入系统。</p><h1 id="我的经历"><a href="#我的经历" class="headerlink" title="我的经历"></a>我的经历</h1><p>当我第一次得到此命令的时候，我尝试在 Google 中搜索此地址含义，我直接将其输入到 chrome 的地址栏里，然后我直接按下了回车键！！！</p><p>然后悲剧诞生了，我的电脑提示我，磁盘出错需要修复</p><h2 id="尝试修复-1"><a href="#尝试修复-1" class="headerlink" title="尝试修复-1"></a>尝试修复-1</h2><p>使用 Windows 的磁盘修复工具。</p><ul><li>驱动卷-属性-工具-检查驱动器中的文件系统错误</li><li>提示我需要重启电脑，重启</li><li>进入系统前尝试修复错误</li><li>没有找到错误，但是无法进入系统</li></ul><h2 id="尝试修复-2"><a href="#尝试修复-2" class="headerlink" title="尝试修复-2"></a>尝试修复-2</h2><p>直接删除 C 盘，然后通过 DG 等软件重建分区表</p><ul><li>进入 DG，备份分区表</li><li>直接删除 C 盘</li><li>使用 DG 直接找回分区表</li><li>找回了分区表，但是重启之后仍然无法进入系统</li></ul><h2 id="尝试修复-3"><a href="#尝试修复-3" class="headerlink" title="尝试修复-3"></a>尝试修复-3</h2><p>仔细想想，为什么我不能进入 Windows，但是 PE 可以进入 C 盘呢？同样是同一块硬盘，如果真的是 NTFS 的问题，那为什么我的 PE 仍然能够正确的读取出我的硬盘内的文件内容？使用了好几个不同的软件试图扫描 NTFS 的结果均为正常、无错误</p><p>开始怀疑这是不是 Windows 因为遇到了这个问题而产生的 BUG 而并非 NTFS 的问题</p><ul><li>使用 Dism++，进行恢复系统受损</li><li>修复完成重启系统</li><li>手动跳过磁盘检查</li><li><font color=red>成功</font>进入系统</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>短笔记</tag>
      
      <tag>Windows</tag>
      
      <tag>NTFS</tag>
      
      <tag>BUG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/2021/01/07/notebook/Compilation-principle/"/>
    <url>/2021/01/07/notebook/Compilation-principle/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ul><li>编译：将高级语言翻译成汇编语言或机器语言的过程</li></ul><h2 id="编译过程的五个阶段"><a href="#编译过程的五个阶段" class="headerlink" title="编译过程的五个阶段"></a>编译过程的五个阶段</h2><ol><li>词法分析</li><li>语法分析</li><li>词义分析与中间代码生成</li><li>优化</li><li>目标代码生成</li></ol><h2 id="编译过程的八个部分"><a href="#编译过程的八个部分" class="headerlink" title="编译过程的八个部分"></a>编译过程的八个部分</h2><ol><li>词法分析程序</li><li>语法分析程序</li><li>语义分析程序</li><li>中间代码生成</li><li>代码优化程序</li><li>目标代码生成程序</li><li>错误检查和处理程序</li><li>信息表管理程序</li></ol><h1 id="文法和语言"><a href="#文法和语言" class="headerlink" title="文法和语言"></a>文法和语言</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="字母表"><a href="#字母表" class="headerlink" title="字母表"></a>字母表</h3><p>字母表 $\sum$ 是一个<font color=red>有穷的符号集合</font>，符号包括了字母、数字、标点符号……</p><h3 id="字母表上的运算"><a href="#字母表上的运算" class="headerlink" title="字母表上的运算"></a>字母表上的运算</h3><ul><li>乘积：<script type="math/tex">\sum_1 \sum_2 = \{ab | a \in \sum_1 , b \in \sum_2 \}</script>。即从 $\sum_1$ 中选择一个字符串，和 $\sum_2$ 中的一个字符串连接</li><li>幂：即多次进行自我乘积的过程。字母表的 $n$ 次幂指长度为 $n$ 的符号串构成的集合</li><li>正闭包：长度正数的符号串构成的集合（任意一个合理的符号串均属于字母表的正闭包）记作：$\sum^+$</li><li>克林闭包：允许长度为 $0$ 的正闭包，记作：$\sum^*$</li></ul><h3 id="串"><a href="#串" class="headerlink" title="串"></a>串</h3><ul><li>串是字母表的克林闭包的一个元素，是字母表中符号的一个有穷序列</li><li>串的长度通常记作 $|s|$，指的是串 $s$ 中的符号个数</li><li>空串是长度为 $0$ 的串，用 $\varepsilon$ 表示，$|\varepsilon | = 0$</li></ul><h3 id="串上的运算"><a href="#串上的运算" class="headerlink" title="串上的运算"></a>串上的运算</h3><ul><li>连接</li><li>幂</li></ul><h2 id="文法的定义"><a href="#文法的定义" class="headerlink" title="文法的定义"></a>文法的定义</h2><p>对于文法 $G$，可以定义为 $G = (V_T, V_N, P, S)$</p><ul><li>$V_T$：终结符集合，表示的是一系列不可以被符号替换的符号，例如“宾语”不是一个终结符，而“水果”则是一个终结符。非空有穷集</li><li>$V_N$：非终结符集合，表示的是一系列一定可以被符号替换的符号，在等式中至少会出现一次在等号左侧的符号。非空有穷集</li><li>$P$：产生式/规则，表示的是替换过程，可以表示为 $\alpha \rightarrow \beta$，其中 $\alpha \in (V_N \cup V_T)^*$且至少包含一个非终结符。$\beta \in (V_N \cup V_T)^*$。非空有穷集</li><li>$S$：开始符号，表示的是该文法中最大的语法成分，例如 $S = 句子$</li></ul><h3 id="产生式的简写"><a href="#产生式的简写" class="headerlink" title="产生式的简写"></a>产生式的简写</h3><p>对于含有相同左部的产生式，可以通过“或”运算简写<br>例如对于</p><script type="math/tex; mode=display">\alpha \rightarrow \beta_1 , \alpha \rightarrow \beta_2 , \dots , \alpha \rightarrow \beta_n</script><p>可以简写为</p><script type="math/tex; mode=display">\alpha \rightarrow \beta_1 | \beta_2 | \dots | \beta_n</script><h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><ul><li>下列符号是终结符<ul><li>字母表中排在前面的小写字母，如 a、b、c</li><li>运算符，如+、*等</li><li>标点符号，如括号、逗号</li><li>数字，0、1、……、9</li><li>粗体字符串，如<strong>id</strong>、<strong>if</strong></li></ul></li><li>下列符号是非终结符<ul><li>字母表中排在前面的大写字母，如 A、B、C</li><li>字母 S，通常表示开始符号</li><li>小写、斜体的名字，如<em>expr</em>、<em>stmt</em></li><li>代表程序构造的大写字母，如 $E$(表达式)、$T$(项)、$F$(因子)</li></ul></li><li>字母表中排在后面的大写字母表示文法符号(终结符或非终结符)，如 $X、Y、Z$</li><li>字母表中排在后面的小写字母表示终结符号串，如 $u、v、\dots 、z$</li><li>小写希腊字母表示文法符号串 $\alpha 、\beta 、 \gamma$</li><li>除非特别说明，第一个产生式的左部就是开始符号</li></ul><h2 id="语言的定义"><a href="#语言的定义" class="headerlink" title="语言的定义"></a>语言的定义</h2><h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>从语言的规则<font color=red>推导</font>生成语言的过程</p><p>根据规则，可以将符号串推成另一个符号串的过程称为推导。用产生式的右部替换产生式的左部</p><p>如果是经过多次推导得到，则记为 $a_0 \Rightarrow^n a_n$</p><p>$a_0 \Rightarrow^+ a_n$ 表示经过至少一步推导得到<br>$a_0 \Rightarrow^* a_n$ 表示经过任意步数推导得到</p><h3 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h3><p>根据语言的规则<font color=red>识别</font>语言的过程</p><p>根据规则，可以将符号串还原成。将产生式的右部替换为产生式的左部</p><h3 id="句型和句子"><a href="#句型和句子" class="headerlink" title="句型和句子"></a>句型和句子</h3><ul><li>如果 $S \Rightarrow^* \alpha, \alpha \in (V_T \cup V_N)^*$ 则称 $\alpha$ 是语法 $G$ 的一个句型</li><li>一个句型中既可以包含终结符，也可以包含非终结符，也可以是空串</li><li>如果 $S \Rightarrow^* w, w \in V_T^*$ 则称 $w$ 是 $G$ 的一个句子</li><li>句子是不包含任何非终结符的句型</li><li>由文法推导出的所有句子构成的集合称为：文法 $G$ 生成的语言，记为 $L(G)$，即</li></ul><script type="math/tex; mode=display">L(G) = \{w | S \Rightarrow^* w, w \in V_T^* \}</script><h2 id="文法的分类"><a href="#文法的分类" class="headerlink" title="文法的分类"></a>文法的分类</h2><h3 id="0型文法"><a href="#0型文法" class="headerlink" title="0型文法"></a>0型文法</h3><p>对于 $\forall \alpha \rightarrow \beta \in P$，满足 $\alpha$ 中至少包含一个非终结符</p><h3 id="1型文法-上下文有关文法"><a href="#1型文法-上下文有关文法" class="headerlink" title="1型文法(上下文有关文法)"></a>1型文法(上下文有关文法)</h3><p>对于 $\forall \alpha \rightarrow \beta \in P$，满足 $|\alpha| \leq |\beta|$</p><p>也可以理解为对于 $\forall \alpha A \beta \rightarrow \alpha \gamma \beta \in P$，其中 $\alpha$、$\beta$ 可以为 $\varepsilon$，满足 $\gamma \neq \varepsilon$(在 $A = S$ 的情况下，此等式可以成立)</p><h3 id="2型文法-上下文无关文法"><a href="#2型文法-上下文无关文法" class="headerlink" title="2型文法(上下文无关文法)"></a>2型文法(上下文无关文法)</h3><p>对于 $\forall \alpha \rightarrow \beta \in P$，满足 $\alpha$ 是一个非终结符</p><h3 id="3型文法-正规文法"><a href="#3型文法-正规文法" class="headerlink" title="3型文法(正规文法)"></a>3型文法(正规文法)</h3><p>对于 $\forall \alpha \rightarrow \beta \in P$，满足 $\alpha$ 是一个非终结符，而 $\beta$ 只能是空串、一个终结符号或者一个终结符号和一个非终结符号</p><h2 id="CFG-分析树"><a href="#CFG-分析树" class="headerlink" title="CFG 分析树"></a>CFG 分析树</h2><p>分析树是推导的图形化表示</p><p><img src="/image/notebook/Compilation-principle/1.png" alt="CFG"></p><h3 id="二义性文法"><a href="#二义性文法" class="headerlink" title="二义性文法"></a>二义性文法</h3><p>如果一个文法可以为某个句子生成多棵分析树，则称这个文法是二义性的</p><h1 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(简称：RE)是一种描述正则语言的表示方法，正则表达式可以由较小的正则表达式按照特定规则递归地构建。每个正则表达式 $r$ 定义(表示)一个语言，记为 $L(r)$。这个语言也是根据 $r$ 的子表达式所表示的语言递归定义的</p><h3 id="正则表达式的定义"><a href="#正则表达式的定义" class="headerlink" title="正则表达式的定义"></a>正则表达式的定义</h3><ul><li>$\varepsilon$ 是一个 RE，<script type="math/tex">L(\varepsilon) = \{ \varepsilon \}</script></li><li>如果 $a \in \sum(字母表)$，则 $a$ 是一个 RE，<script type="math/tex">L(a) = \{a\}</script></li><li><p>加入 $r$ 和 $s$ 都是 RE，表示的语言分别是 $L(r)$ 和 $L(s)$，则</p><ul><li>$r|s$ 是一个 RE，$L(r|s) = L(r) \cup L(s)$</li><li>$rs$ 是一个 RE，$L(rs) = L(r)L(s)$</li><li>$r^*$ 是一个 RE，$L(r^*) = (L(r))^*$</li><li>$(r)$ 是一个 RE，$L((r)) = L(r)$</li></ul></li><li><p>可以用RE定义的语言叫做正则语言(regular language)或正则集合(regular set)</p></li><li>对任何正则文法 $G$，存在定义同一语言的正则表达式 $r$</li><li>对任何正则表达式 $r$，存在生成同一语言的正则文法 $G$</li></ul><h3 id="正则定义"><a href="#正则定义" class="headerlink" title="正则定义"></a>正则定义</h3><p>给一些RE命名，并在之后的RE中像使用字母表中的符号一样使用这些名字</p><h2 id="有穷自动机"><a href="#有穷自动机" class="headerlink" title="有穷自动机"></a>有穷自动机</h2><p>具有一系列离散的输入输出信息和有穷数目的内部状态的系统</p><h3 id="有穷自动机的分类"><a href="#有穷自动机的分类" class="headerlink" title="有穷自动机的分类"></a>有穷自动机的分类</h3><ul><li>确定的有穷自动机</li><li>不确定的有穷自动机</li></ul><h3 id="确定的有穷自动机-DFA"><a href="#确定的有穷自动机-DFA" class="headerlink" title="确定的有穷自动机(DFA)"></a>确定的有穷自动机(DFA)</h3><p>对于任意的一个输入，自动机都唯一地确定了下一个状态</p><p>定义 $M=(S, \sum, \delta, s_0, F)$ 为一个确定的有穷自动机</p><ul><li>$S$：有穷状态集</li><li>$\sum$：输入的字母表，即输入的符号集合($\varepsilon \notin \sum $)</li><li>$\delta$：$\forall s \in S, a \in \sum, \delta(s, a)$ 表示从状态 $s$ 出发，沿着标记为 $a$ 的边所能到达的状态</li><li>$s_0$：开始状态，$s_0 \in S$</li><li>$F$：接收状态(终止状态)的集合，$F \subseteq S$</li></ul><p>确定的有穷自动机可以通过状态图来表示</p><p><img src="/image/notebook/Compilation-principle/2.png" alt="DFA状态图"></p><p>初始结点通常用 $\Rightarrow$ 表示，终态结点通常为双圈表示</p><p>确定的有穷自动机还可以使用表格来表示其状态，例如上述的状态图可以表示为</p><div class="table-container"><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">0</th><th style="text-align:center">1</th></tr></thead><tbody><tr><td style="text-align:center">$S_0$</td><td style="text-align:center">$S_1$</td><td style="text-align:center">$S_0$</td><td>0</td></tr><tr><td style="text-align:center">$S_1$</td><td style="text-align:center">$S_1$</td><td style="text-align:center">$S_2$</td><td>0</td></tr><tr><td style="text-align:center">$S_2$</td><td style="text-align:center">$S_1$</td><td style="text-align:center">$S_0$</td><td>1</td></tr></tbody></table></div><p>通常，在表格对应行的右端通过01的标注表示这个状态为终态</p><p>对于 $\sum^*$ 中的任意符号串 $t$，如果在状态图中存在一条从初态到某一终态的路径，且这条路径上所有弧的标记符连接起来等于 $t$，则称 $t$ 可以被此 DFA 接受</p><h3 id="不确定的有穷自动机-NFA"><a href="#不确定的有穷自动机-NFA" class="headerlink" title="不确定的有穷自动机(NFA)"></a>不确定的有穷自动机(NFA)</h3><p>收到一个符号，可能进入不同的状态</p><p>定义 $M=(S, \sum, \delta, s_0, F)$ 为一个确定的有穷自动机</p><ul><li>$S$：是一个有穷集，它的每一个元素称为一个状态</li><li>$\sum$：是一个有穷字母表，它的每一个元素称为一个输入符号</li><li>$\delta$：表示一个转移函数，可以描述为<script type="math/tex">S \times (\sum \cup \{\varepsilon \}) \rightarrow P(S)</script>。$P(S)$ 是 $S$ 的一个子集</li><li>$s_0$：$S_0 \in S$，表示自动机的初始态</li><li>$F$：接收状态(终止状态)的集合，$F \subseteq S$</li></ul><p>NFA 也可以通过状态图来表示和表格进行表示，与 DFA 的状态图类似</p><h3 id="DFA-和-NFA-的等价性"><a href="#DFA-和-NFA-的等价性" class="headerlink" title="DFA 和 NFA 的等价性"></a>DFA 和 NFA 的等价性</h3><ul><li>对任何非确定的有穷自动机 N ，存在定义同一语言的确定的有穷自动机 D</li><li>对任何确定的有穷自动机 D ，存在定义同一语言的非确定的有穷自动机 N</li></ul><h3 id="从正则表达式转为-NFA"><a href="#从正则表达式转为-NFA" class="headerlink" title="从正则表达式转为 NFA"></a>从正则表达式转为 NFA</h3><p>参考下面两张图<br><img src="/image/notebook/Compilation-principle/3.png" alt="RE转NFA-1"></p><p><img src="/image/notebook/Compilation-principle/4.png" alt="RE转NFA-2"></p><h3 id="NFA-转-DFA"><a href="#NFA-转-DFA" class="headerlink" title="NFA 转 DFA"></a>NFA 转 DFA</h3><p>步骤：</p><ol><li>从起始状态开始，通过所有的路径，得到新的状态集的组合</li><li>将所有新的状态集组合重新通过路径，重复操作直到没有新的组合</li><li>将状态集作为 DFA 的结点，建成 DFA 状态机</li><li>如果新的状态包含原来的可接受状态(终止状态)，则认为新的状态也是可接受状态</li></ol><blockquote><p>以下图为例<br><img src="/image/notebook/Compilation-principle/NFA-example-1.png" alt="NFA示例"><br>画出如下的表格</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">状态</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0,1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0,1</td><td style="text-align:center">0,1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><blockquote><p>将序号代替状态，重新绘图<br><img src="/image/notebook/Compilation-principle/NFA2DFA-2.png" alt="NFA转DFA-1"></p></blockquote><h3 id="DFA-最小化"><a href="#DFA-最小化" class="headerlink" title="DFA 最小化"></a>DFA 最小化</h3><ul><li>删除从起始结点开始的不可到达的状态</li><li>合并所有的等价状态<ul><li>两个状态必须同时是可接受状态或不可接受状态</li><li>对于所有输入的符号，两个状态都必须转换到等价的状态里</li></ul></li></ul><blockquote><p>以上方的图为例，易得状态 1 和状态 2 是等价状态，所以合并得到</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">状态</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><blockquote><p>最终得到<br><img src="/image/notebook/Compilation-principle/NFA2DFA-1.png" alt="DFA最小化-2"></p></blockquote><h1 id="自顶向下语法分析方法"><a href="#自顶向下语法分析方法" class="headerlink" title="自顶向下语法分析方法"></a>自顶向下语法分析方法</h1><h2 id="自顶向下的分析思想"><a href="#自顶向下的分析思想" class="headerlink" title="自顶向下的分析思想"></a>自顶向下的分析思想</h2><p>从分析树的顶部（根节点）向底部（叶节点）方向构造分析树，可以看成是从文法开始符号S推导出词串w的过程</p><h3 id="最左推导"><a href="#最左推导" class="headerlink" title="最左推导"></a>最左推导</h3><p>在最左推导中，总是选择每个句型的最左非终结符进行替换，即优先满足表达式左侧<br><img src="/image/notebook/Compilation-principle/leftmost-derivation.png" alt="最左推导"></p><h3 id="最右推导"><a href="#最右推导" class="headerlink" title="最右推导"></a>最右推导</h3><p>在最右推导中，总是选择每个句型的最右非终结符进行替换，即优先满足表达式右侧<br><img src="/image/notebook/Compilation-principle/rightmost-derivation.png" alt="最右推导"></p><p>自顶向下的语法分析采用最左推导方式</p><h3 id="预测分析"><a href="#预测分析" class="headerlink" title="预测分析"></a>预测分析</h3><ul><li>预测分析是递归下降分析技术的一个特例，通过在输入中向前看固定个数（通常是一个）符号来选择正确的A-产生式。</li><li>可以对某些文法构造出向前看k个输入符号的预测分析器，该类文法有时也称为LL(k) 文法类</li><li>预测分析不需要回溯，是一种确定的自顶向下分析方法</li></ul><h2 id="文法转换"><a href="#文法转换" class="headerlink" title="文法转换"></a>文法转换</h2><h3 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h3><h4 id="直接左递归"><a href="#直接左递归" class="headerlink" title="直接左递归"></a>直接左递归</h4><p>当出现了类似如下的推导公式时</p><script type="math/tex; mode=display">A \rightarrow A \alpha | \beta</script><p>时，此时可以出现左递归的情况，这会导致无法正确的进行最左推导，因为可以出现下面的情况：</p><script type="math/tex; mode=display">A \Rightarrow A \alpha \Rightarrow A \alpha\alpha \Rightarrow A \alpha\alpha\alpha \Rightarrow A \alpha\alpha\alpha\alpha \dots</script><p>此时可以将上述的推导公式转换为</p><script type="math/tex; mode=display">\begin{cases}A \rightarrow \beta A' \\A' \rightarrow \alpha A' | \varepsilon\end{cases}</script><p>将左递归的公式转换为右递归即可</p><p>这样的操作的代价是</p><ul><li>引入了非终结符</li><li>$\varepsilon$ 产生式</li></ul><h4 id="间接左递归"><a href="#间接左递归" class="headerlink" title="间接左递归"></a>间接左递归</h4><p>例如</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow Aa | b \\A \rightarrow Sd | \varepsilon\end{cases}</script><p>此时可以产生这样的推导</p><script type="math/tex; mode=display">S \rightarrow Aa \rightarrow Sda \rightarrow Aada \rightarrow Sdada \dots</script><p>这时，应该将改为先进行替换得到</p><script type="math/tex; mode=display">A \rightarrow Aad | bd | \varepsilon</script><script type="math/tex; mode=display">\begin{cases}A \rightarrow bdA' | A' \\A' \rightarrow abA' | \varepsilon\end{cases}</script><h3 id="多个候选式"><a href="#多个候选式" class="headerlink" title="多个候选式"></a>多个候选式</h3><p>当出现</p><script type="math/tex; mode=display">S \rightarrow aAd | aBe</script><p>之类的结构，当读入的第一个字符为 $a$ 时，无法确定应该选择哪个产生式的时候，应该进行左公因子提取，即改编为</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow aS' \\S' \rightarrow Ad|Be\end{cases}</script><h2 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1) 文法"></a>LL(1) 文法</h2><h3 id="FIRST-集"><a href="#FIRST-集" class="headerlink" title="FIRST 集"></a>FIRST 集</h3><p>$FIRST(A)$ 集表示非终结符 $A$ 能够推导出的所有等式的第一个终结符的集合</p><script type="math/tex; mode=display">FIRST(\alpha) = \{ a | \alpha \Rightarrow a \beta, a \in V_T ， \alpha, \beta \in V^* \}</script><p>这条等式可以用下面三个原则来求算</p><p>对于一个产生式 $A \rightarrow B$而言</p><ul><li>若 $B$ 的第一个符号是终结符，则将此终结符加入到 $FIRST(A)$ 中</li><li>若 $B$ 的第一个符号是非终结符，则将此非终结符的 $FIRST$ 中除了 $\varepsilon$ 的加入到 $FIRST(A)$ 中</li><li>若 $B$ 的第一个符号是非终结符，它的 $FIRST$ 集中含有 $\varepsilon$ 则将下一个符号也进行这三条规则的判断，如果没有，下一个字符了，则将 $\varepsilon$ 加入到 $FIRST(A)$ 中</li></ul><h3 id="FOLLOW-集"><a href="#FOLLOW-集" class="headerlink" title="FOLLOW 集"></a>FOLLOW 集</h3><p>$FOLLOW(A)$ 集表示非终结符 $A$ 后可以跟随哪些终结符</p><script type="math/tex; mode=display">FOLLOW(A) = \{ a | S \Rightarrow^* \dots A a \dots，a \in V_T \}</script><script type="math/tex; mode=display">若 A \Rightarrow^* \dots A，则 \# \in FOLLOW(A)</script><p>这两条等式可以用下面三个原则来求算</p><ul><li>对于文法开始符号 $S$，则 <script type="math/tex">\# \in FOLLOW(S)</script></li><li>若存在类似 $B \rightarrow \alpha A \beta$ 的表达式，则 <script type="math/tex">FIRST(\beta) - \{\varepsilon\} \subseteq FOLLOW(A)</script></li><li>若存在类似 $B \rightarrow \alpha A$ 或者 $B \rightarrow \alpha A \beta 且 \beta \Rightarrow^* \varepsilon$，则 <script type="math/tex">FOLLOW(B) \subseteq FOLLOW(A)</script></li></ul><h3 id="SELECT-集"><a href="#SELECT-集" class="headerlink" title="SELECT 集"></a>SELECT 集</h3><p>表示使用某个产生式的选择符号</p><script type="math/tex; mode=display">\begin{cases}SELECT(A \rightarrow \alpha) = (FIRST(\alpha) - \{\varepsilon\}) \cup FOLLOW(A)，\alpha \Rightarrow^* \varepsilon \\SELECT(A \rightarrow \alpha) = FIRST(\alpha)，\alpha \not\Rightarrow^* \varepsilon\end{cases}</script><p>同时满足</p><script type="math/tex; mode=display">SELECT(A \rightarrow \alpha) \cap SELECT(A \rightarrow \beta) = \varnothing</script><h3 id="LL-1"><a href="#LL-1" class="headerlink" title="LL(1)"></a>LL(1)</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>满足 LL(1) 的文法有下面三个条件：</p><p>若文法存在语句</p><script type="math/tex; mode=display">A \rightarrow \alpha | \beta</script><p>则</p><ul><li>不存在终结 $a$ 使得 $\alpha$ 和 $\beta$ 都能推导出以 $a$ 开头的串，即 $FIRST(\alpha) \cap FIRST(\beta) = \varnothing$</li><li>$\alpha$ 和 $\beta$ 至多有一个能推导出 $\varepsilon$</li><li>满足下面的等式</li></ul><script type="math/tex; mode=display">\begin{cases}FIRST(\alpha) \cap FOLLOW(A) = \varnothing, \beta \Rightarrow^* \varepsilon \\FIRST(\beta) \cap FOLLOW(A) = \varnothing, \alpha \Rightarrow^* \varepsilon\end{cases}</script><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><script type="math/tex; mode=display">对于所有的 A \rightarrow \alpha | \beta</script><p>若满足</p><script type="math/tex; mode=display">SELECT(A \rightarrow \alpha) \cap SELECT(A \rightarrow \beta) = \varnothing</script><p>则为 LL(1)</p><h3 id="非递归的预测分析法-表驱动的预测分析"><a href="#非递归的预测分析法-表驱动的预测分析" class="headerlink" title="非递归的预测分析法(表驱动的预测分析)"></a>非递归的预测分析法(表驱动的预测分析)</h3><p>首先需要根据 $SELECT$ 集来构建一个分析表。通过表的信息实现语法分析</p><h3 id="LL-1-文法分析示例"><a href="#LL-1-文法分析示例" class="headerlink" title="LL(1) 文法分析示例"></a>LL(1) 文法分析示例</h3><p>以下面的表达式文法为例</p><script type="math/tex; mode=display">\begin{cases}E \rightarrow E + T | T \\T \rightarrow T * F | F \\F \rightarrow i | (E)\end{cases}</script><h4 id="消除左递归-1"><a href="#消除左递归-1" class="headerlink" title="消除左递归"></a>消除左递归</h4><p>首先，消除左递归，易得，前两个式子均为左递归<br>得到</p><script type="math/tex; mode=display">\begin{cases}E \rightarrow TE' \\E' \rightarrow +TE' | \varepsilon \\T \rightarrow FT' \\T' \rightarrow *FT' | \varepsilon \\F \rightarrow i | (E)\end{cases}</script><h4 id="求出-FIRST"><a href="#求出-FIRST" class="headerlink" title="求出 FIRST"></a>求出 FIRST</h4><p>得到各个符号的 FIRST 集：</p><p>首先根据2、4、5式得到</p><script type="math/tex; mode=display">\begin{cases}FIRST(E') = \{+, \varepsilon\} \\FIRST(T') = \{*, \varepsilon\} \\FIRST(F) = \{i, (\}\end{cases}</script><p>然后根据 FIRST 集的求出剩下的 FIRST 集</p><script type="math/tex; mode=display">\begin{cases}FIRST(E) = \{i, ( \} \\FIRST(T) = \{i, ( \}\end{cases}</script><h4 id="求出-FOLLOW-集"><a href="#求出-FOLLOW-集" class="headerlink" title="求出 FOLLOW 集"></a>求出 FOLLOW 集</h4><p>然后再求出 FOLLOW 集</p><p>首先</p><script type="math/tex; mode=display">\# \in FOLLOW(E)</script><p>然后根据第一个等式得到</p><script type="math/tex; mode=display">FIRST(E') - \varepsilon \subseteq FOLLOW(T) \Rightarrow FOLLOW(T) = \{+\}</script><script type="math/tex; mode=display">FOLLOW(E) \subseteq FOLLOW(E') \Rightarrow FOLLOW(E') = \{\#\}</script><p>然后继续重复做，直到没有 FOLLOW 集发生更新为止，最终得到</p><script type="math/tex; mode=display">\begin{cases}FOLLOW(E) = \{ \#, ) \} \\FOLLOW(E') = \{ \#, ) \} \\FOLLOW(T) = \{ \#, +, )\} \\FOLLOW(T') = \{ \#, +, )\} \\FOLLOW(F) = \{ \#, +, ), *\}\end{cases}</script><h4 id="求出-SELECT-集"><a href="#求出-SELECT-集" class="headerlink" title="求出 SELECT 集"></a>求出 SELECT 集</h4><p>再得到 SELECT 集</p><script type="math/tex; mode=display">\begin{cases}SELECT(E \rightarrow TE') = FIRST(TE') = FIRST(T) = \{i, ( \} \\SELECT(E' \rightarrow +TE') = FIRST(+TE') = FIRST(+) = \{+\} \\SELECT(E' \rightarrow \varepsilon) = (FIRST(\varepsilon) - \{\varepsilon \}) \cup FOLLOW(E') = \{ \#, ) \} \\SELECT(T \rightarrow FT') = FIRST(FT') = FIRST(F) = \{i, (\} \\SELECT(T' \rightarrow * FT') = FIRST(*FT') = FIRST(*) = \{*\} \\SELECT(T' \rightarrow \varepsilon) = (FIRST(\varepsilon) - \{\varepsilon \}) \cup FOLLOW(T') = \{ \#, +, )\} \\SELECT(F \rightarrow i) = FIRST(i) = \{ i \} \\SELECT(F \rightarrow (E)) = FIRST((E)) = FIRST(() = \{ ( \} \\\end{cases}</script><p>此时，判断是否为 LL(1) 文法</p><script type="math/tex; mode=display">\begin{cases}SELECT(E' \rightarrow +TE') \cup SELECT(E' \rightarrow \varepsilon) = \varnothing \\SELECT(T' \rightarrow * FT') \cup SELECT(T' \rightarrow \varepsilon) = \varnothing \\SELECT(F \rightarrow i) \cup SELECT(F \rightarrow (E)) = \varnothing\end{cases}</script><p>所以是 LL(1)文法</p><h4 id="求出分析表"><a href="#求出分析表" class="headerlink" title="求出分析表"></a>求出分析表</h4><p>根据 SELECT 得出下表</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center">+</th><th style="text-align:center">*</th><th style="text-align:center">(</th><th style="text-align:center">)</th><th style="text-align:center">#</th></tr></thead><tbody><tr><td style="text-align:center">E</td><td style="text-align:center">$\rightarrow TE’$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow TE’$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">E’</td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow +TE’$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow \varepsilon$</td><td style="text-align:center">$\rightarrow \varepsilon$</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">$\rightarrow FT’$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow FT’$</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">T’</td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow \varepsilon$</td><td style="text-align:center">$\rightarrow *FT’$</td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow \varepsilon$</td><td style="text-align:center">$\rightarrow \varepsilon$</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">$\rightarrow i$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$\rightarrow (E)$</td><td style="text-align:center"></td></tr></tbody></table></div><h4 id="分析输入串"><a href="#分析输入串" class="headerlink" title="分析输入串"></a>分析输入串</h4><p>采用三列分析法来分析，使用 <code>#</code> 表示尾部，假设输入的串为 <code>i+i*i</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">栈</th><th style="text-align:center">剩余输入</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center"><code>E#</code></td><td style="text-align:center"><code>i+i*i#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>TE&#39;#</code></td><td style="text-align:center"><code>i+i*i#</code></td><td style="text-align:center">匹配了表中的 $\rightarrow TE’$</td></tr><tr><td style="text-align:center"><code>FT&#39;E&#39;#</code></td><td style="text-align:center"><code>i+i*i#</code></td><td style="text-align:center">$\rightarrow FT’$</td></tr><tr><td style="text-align:center"><code>iT&#39;E&#39;#</code></td><td style="text-align:center"><code>i+i*i#</code></td><td style="text-align:center">$\rightarrow i$</td></tr><tr><td style="text-align:center"><code>T&#39;E&#39;#</code></td><td style="text-align:center"><code>+i*i#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>E&#39;#</code></td><td style="text-align:center"><code>+i*i#</code></td><td style="text-align:center">$\rightarrow \varepsilon$</td></tr><tr><td style="text-align:center"><code>+TE&#39;#</code></td><td style="text-align:center"><code>+i*i#</code></td><td style="text-align:center">$\rightarrow +TE’$</td></tr><tr><td style="text-align:center"><code>TE&#39;#</code></td><td style="text-align:center"><code>i*i#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>FT&#39;E&#39;#</code></td><td style="text-align:center"><code>i*i#</code></td><td style="text-align:center">$\rightarrow FT’$</td></tr><tr><td style="text-align:center"><code>iT&#39;E&#39;#</code></td><td style="text-align:center"><code>i*i#</code></td><td style="text-align:center">$\rightarrow i$</td></tr><tr><td style="text-align:center"><code>T&#39;E&#39; #</code></td><td style="text-align:center"><code>*i#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>*FT&#39;E&#39;#</code></td><td style="text-align:center"><code>*i#</code></td><td style="text-align:center">$\rightarrow *FT’$</td></tr><tr><td style="text-align:center"><code>FT&#39;E&#39;#</code></td><td style="text-align:center"><code>i#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>iT&#39;E&#39;#</code></td><td style="text-align:center"><code>i#</code></td><td style="text-align:center">$\rightarrow i$</td></tr><tr><td style="text-align:center"><code>T&#39;E&#39;#</code></td><td style="text-align:center"><code>#</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>E&#39;#</code></td><td style="text-align:center"><code>#</code></td><td style="text-align:center">$\rightarrow \varepsilon$</td></tr><tr><td style="text-align:center"><code>#</code></td><td style="text-align:center"><code>#</code></td><td style="text-align:center">$\rightarrow \varepsilon$</td></tr></tbody></table></div><p>匹配成功</p><h2 id="LL-1-分析中的出错处理"><a href="#LL-1-分析中的出错处理" class="headerlink" title="LL(1) 分析中的出错处理"></a>LL(1) 分析中的出错处理</h2><p>略</p><h1 id="自底向上优先分析"><a href="#自底向上优先分析" class="headerlink" title="自底向上优先分析"></a>自底向上优先分析</h1><h2 id="自底向下的分析思想"><a href="#自底向下的分析思想" class="headerlink" title="自底向下的分析思想"></a>自底向下的分析思想</h2><p>从分析树的底部(叶节点)向顶部(根节点)方向构造分析树，可以看成是将输入串w归约为文法开始符号S的过程，自底向上的语法分析采用最左归约方式（反向构造最右推导）</p><h1 id="LR-0-和-SLR-1-分析法"><a href="#LR-0-和-SLR-1-分析法" class="headerlink" title="LR(0) 和 SLR(1) 分析法"></a>LR(0) 和 SLR(1) 分析法</h1><ul><li>L: 对输入进行从左到右的扫描</li><li>R: 反向构造出一个最右推导序列</li></ul><p><strong><font color=red>由于 SLR(1) 的操作和 LR(0) 分析法相似，且兼容，所以这里直接写 SLR(1) 的操作过程，LR(0) 文法也可以直接用此方法，得到的结果完全相同</font></strong></p><p>以此文法为例</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow L*L | L \\L \rightarrow LB | B \\B \rightarrow 0 | 1\end{cases}</script><h2 id="构造分析表"><a href="#构造分析表" class="headerlink" title="构造分析表"></a>构造分析表</h2><h3 id="将所有的或运算式子转换为多个式子"><a href="#将所有的或运算式子转换为多个式子" class="headerlink" title="将所有的或运算式子转换为多个式子"></a>将所有的或运算式子转换为多个式子</h3><p>得到</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow L*L \\S \rightarrow L \\L \rightarrow LB \\L \rightarrow B \\B \rightarrow 0 \\B \rightarrow 1\end{cases}</script><h3 id="合并相同开始符号"><a href="#合并相同开始符号" class="headerlink" title="合并相同开始符号"></a>合并相同开始符号</h3><p>LR分析法不适用于有多个开始符号的产生式，所以应当对上面的产生式进行处理得到</p><script type="math/tex; mode=display">\begin{cases} 0) S' \rightarrow S \\ 1) S \rightarrow L*L \\ 2) S \rightarrow L \\ 3) L \rightarrow LB \\ 4) L \rightarrow B \\ 5) B \rightarrow 0 \\ 6) B \rightarrow 1\end{cases}</script><p><em>每行开头的为编号，后续通过编号来指代产生式</em></p><h3 id="建立状态"><a href="#建立状态" class="headerlink" title="建立状态"></a>建立状态</h3><p>对于一个状态，首先，判断<code>.</code>后面是否为非终结符号。如果是，那我们就得找所有由此非终结符推出的产生式，并将它们添加进入此状态里。循环做即可。</p><p><em>使用 <code>.</code> 表示当前匹配到的位置</em></p><p>首先建立初状态，将第一个表达式加入初状态 State 0</p><h4 id="State-0"><a href="#State-0" class="headerlink" title="State 0"></a>State 0</h4><p>此状态中有 $S’ \rightarrow .S$</p><p>检查 <code>.</code> 后是否为非终结符，得到 $S$，由于 $S$ 是非终结符，所以将 $S$ 的产生式加入此状态得到</p><script type="math/tex; mode=display">\begin{cases}S' \rightarrow .S \\S \rightarrow .L*L \\S \rightarrow .L \\\end{cases}</script><p>再检查新加入的，得到 $L$ 也需要加入此状态</p><script type="math/tex; mode=display">\begin{cases}S' \rightarrow .S \\S \rightarrow .L*L \\S \rightarrow .L \\L \rightarrow .LB \\L \rightarrow .B \\\end{cases}</script><p>最后发现 $B$ 也是需要加入此状态的得到 State 0 的最终结果</p><script type="math/tex; mode=display">\begin{cases}S' \rightarrow .S \\S \rightarrow .L*L \\S \rightarrow .L \\L \rightarrow .LB \\L \rightarrow .B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><p>接下来的每个状态都是从 State 转换过来的，即将小数点向后移动，可以得到不同的状态<br>根据其状态内的产生式，可以得到 State 0 可以有 $S, L, B, 0, 1$ 这五个转移方式</p><h4 id="State-1"><a href="#State-1" class="headerlink" title="State 1"></a>State 1</h4><p>设定 State 1 是从 State 0 通过 $S$ 转移过来的</p><p>所以可以得到，仅</p><script type="math/tex; mode=display">S' \rightarrow S.</script><p>满足，所以 State 1 即只有此产生式，且不可以再转移</p><p>注意，State 1 是第一个产生式的最后的结果，所以此状态作为 <code>Accept</code> 状态，简称 <code>acc</code></p><h4 id="State-2"><a href="#State-2" class="headerlink" title="State 2"></a>State 2</h4><p>设定 State 2 是从 State 0 通过 $L$ 转移过来</p><p>所以可以直接得到的有</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow L.*L \\S \rightarrow L. \\L \rightarrow L.B \\\end{cases}</script><p>对于第三个式子，其满足条件(<code>.</code>后为非终结符)，所以需要把 $B$ 加入此状态</p><p>即得到</p><script type="math/tex; mode=display">\begin{cases}S \rightarrow L.*L \\S \rightarrow L. \\L \rightarrow L.B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><h4 id="其他-State"><a href="#其他-State" class="headerlink" title="其他 State"></a>其他 State</h4><p>不断重复上述步骤，得到下面的图和结果</p><script type="math/tex; mode=display">State 0 =\begin{cases}S' \rightarrow .S \\S \rightarrow .L*L \\S \rightarrow .L \\L \rightarrow .LB \\L \rightarrow .B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><script type="math/tex; mode=display">State 1 =\begin{cases}S' \rightarrow S.\end{cases}</script><script type="math/tex; mode=display">State 2 =\begin{cases}S \rightarrow L.*L \\S \rightarrow L. \\L \rightarrow L.B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><script type="math/tex; mode=display">State 3 =\begin{cases}L \rightarrow B.\end{cases}</script><script type="math/tex; mode=display">State 4 =\begin{cases}B \rightarrow 0.\end{cases}</script><script type="math/tex; mode=display">State 5 =\begin{cases}B \rightarrow 1.\end{cases}</script><script type="math/tex; mode=display">State 6 =\begin{cases}S \rightarrow L*.L \\L \rightarrow .LB \\L \rightarrow .B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><script type="math/tex; mode=display">State 7 =\begin{cases}L \rightarrow LB.\end{cases}</script><script type="math/tex; mode=display">State 8 =\begin{cases}S \rightarrow L*L. \\L \rightarrow L.B \\B \rightarrow .0 \\B \rightarrow .1\end{cases}</script><pre><code class=" mermaid">graph LRA[State 0] -- S --&gt; B[State 1]A[State 0] -- L --&gt; C[State 2]A[State 0] -- B --&gt; D[State 3]A[State 0] -- 0 --&gt; E[State 4]A[State 0] -- 1 --&gt; F[State 5]C[State 2] -- * --&gt; G[State 6]C[State 2] -- B --&gt; H[State 7]C[State 2] -- 0 --&gt; E[State 4]C[State 2] -- 1 --&gt; F[State 5]G[State 6] -- L --&gt; I[State 8]G[State 6] -- B --&gt; D[State 3]G[State 6] -- 0 --&gt; E[State 4]G[State 6] -- 1 --&gt; F[State 5]I[State 8] -- B --&gt; H[State 7]I[State 8] -- 0 --&gt; E[State 4]I[State 8] -- 1 --&gt; F[State 5]B[State 1] --&gt; Accept([Accept])</code></pre><p><em>Accept通常状态不需要画出</em></p><h3 id="创建LR分析表"><a href="#创建LR分析表" class="headerlink" title="创建LR分析表"></a>创建LR分析表</h3><p>由此图和上面的集合可以画出表格</p><table border="0" cellpadding="0" cellspacing="0" width="576" style="border-collapse: collapse;table-layout:fixed;width:432pt">    <colgroup>        <col class="x22" width="72" span="8" style="mso-width-source:userset;width:54pt">    </colgroup>    <tbody>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r0">            <td rowspan="2" height="38" class="x21" width="72" style="height:28.5pt;width:54pt;">状态</td>            <td colspan="4" class="x21" width="288">ACTION</td>            <td colspan="3" class="x21" width="216">GOTO</td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r1">            <td class="x22">0</td>            <td class="x22">1</td>            <td class="x22">*</td>            <td class="x22">$</td>            <td class="x22">S</td>            <td class="x22">L</td>            <td class="x22">B</td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r2">            <td height="19" class="x22" style="height:14.25pt;">0</td>            <td class="x22">s4</td>            <td class="x22">s5</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22">1</td>            <td class="x22">2</td>            <td class="x22">3</td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r3">            <td height="19" class="x22" style="height:14.25pt;">1</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22">acc</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r4">            <td height="19" class="x22" style="height:14.25pt;">2</td>            <td class="x22">s4</td>            <td class="x22">s5</td>            <td class="x22">s6</td>            <td class="x22">r2</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22">7</td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r5">            <td height="19" class="x22" style="height:14.25pt;">3</td>            <td class="x22">r4</td>            <td class="x22">r4</td>            <td class="x22">r4</td>            <td class="x22">r4</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r6">            <td height="19" class="x22" style="height:14.25pt;">4</td>            <td class="x22">r5</td>            <td class="x22">r5</td>            <td class="x22">r5</td>            <td class="x22">r5</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r7">            <td height="19" class="x22" style="height:14.25pt;">5</td>            <td class="x22">r6</td>            <td class="x22">r6</td>            <td class="x22">r6</td>            <td class="x22">r6</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r8">            <td height="19" class="x22" style="height:14.25pt;">6</td>            <td class="x22">s4</td>            <td class="x22">s5</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22">8</td>            <td class="x22">3</td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r9">            <td height="19" class="x22" style="height:14.25pt;">7</td>            <td class="x22">r3</td>            <td class="x22">r3</td>            <td class="x22">r3</td>            <td class="x22">r3</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22"></td>        </tr>        <tr height="19" style="mso-height-source:userset;height:14.25pt" id="r10">            <td height="19" class="x22" style="height:14.25pt;">8</td>            <td class="x22">s4</td>            <td class="x22">s5</td>            <td class="x22"></td>            <td class="x22">r1</td>            <td class="x22"></td>            <td class="x22"></td>            <td class="x22">7</td>        </tr>        <!--[if supportMisalignedColumns]-->        <tr height="0" style="display:none">            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>            <td width="72" style="width:54pt"></td>        </tr>        <!--[endif]-->    </tbody></table><p>表的构建原则：</p><ul><li>首先，表头分为两列，ACTION 和 GOTO，在 ACTION 下均为终结符，而在 GOTO 下均为非终结符，其中在 ACTION 下还需要加上 <code>$</code> 状态标识匹配结束符(在LL(1)文法中，使用了 <code>#</code> 作为结束符，实际上两种方法均可作为结束符，只需要在题目中注明即可)</li><li>对于每一个状态，如果它在图中存在任何转移的方向，则将此转移方向填入表格中。如果转移状态为非终结符，则直接填入对应状态的序号，如果为终结符，则格式为 <code>sn</code> 其中 <code>n</code> 为转移的目标状态<ul><li>以图中 State 0 为例，其可以通过 $B$ 转移至 State 3，而 $B$ 是一个非终结符，所以在状态为 0 的那一行的第 $B$ 类填上 <code>3</code> 即可</li><li>以图中 State 0 为例，其可以通过 $0$ 转移至 State 4，所以在状态为 0 的那一行的第 $0$ 列填上 <code>s4</code></li></ul></li><li>若此状态中存在任何一个产生式满足 <code>.</code> 在此产生式的最后<ul><li>假定此状态内的等式有两类，则进行如下操作(此时可以确定，此文法不可能为 LR(0)，但是可以是SLR(1))<blockquote><p>既有满足条件的，又有不满足条件的时候</p><script type="math/tex; mode=display">\begin{cases}A_1 \rightarrow \alpha_1 . a_1 \beta_1 \\A_2 \rightarrow \alpha_2 . a_2 \beta_2 \\\dots \\B_1 \rightarrow \gamma_1 . \\B_2 \rightarrow \gamma_2 . \\\dots\end{cases}</script><p>显然，前面的产生式为不满足条件的产生式，后面的产生式均为满足条件的产生式<br>若均满足下列条件，则认为可以通过 SLR 分析法处理，否则认为不可解</p><script type="math/tex; mode=display">\begin{cases}\forall FOLLOW(B_i) \cap \{a_1, a_2 \dots \}  = \varnothing \\\forall FOLLOW(B_i) \cap \forall FOLLOW(B_j) = \varnothing\end{cases}</script><p>若满足上述条件，则对于 <code>ACTION</code> 列中的每一项 $a$<br>若 $a \in {a_1, a_2 \dots }$，则采用 <code>sn</code> 的标识方式，即<br>若 $a \in FOLLOW(B_i)$，则在所在列标注上 <code>rn</code>，其中 <code>n</code> 指代第几号产生式，这条产生式为 $B_i \rightarrow \gamma_i$</p></blockquote></li><li>若此状态内的等式只有一类，即只有满足条件的，则在其所有的 ACTION 列中用 <code>rn</code> 标注(若只有此条件的状态，则此时可以称文法为 LR(0) 文法)<blockquote><p>以 State 2 为例，有四个式子不满足条件，仅一个式子满足条件。其中 $S \rightarrow L.$ 为满足条件的式子，剩下四个均不满足条件。所以我们先求出 $S$ 的 <script type="math/tex">FOLLOW(S) = \{\$\}</script>，满足等式 <script type="math/tex">FOLLOW(S) \cap \{*, B, 0, 1\} = \varnothing</script><br>接着遍历所有 <code>ACTION</code> 内的符号，对于 $0$ 而言，其属于 <script type="math/tex">\{*, B, 0, 1\}</script> 所以，写入 <code>s4</code><br>对于 $\$$ 而言，其属于 FOLLOW(S)，所以写上 $S \rightarrow L$ 这个产生对应的序号，即 <code>r2</code></p></blockquote></li></ul></li></ul><!-- ## LR(1) 和 LALR(1)提出了后继符号概念定义每一个产生式应当描述为$$A \rightarrow \alpha . \beta, a$$其中，前半部分为普通的产生式，后面紧跟一个<font color=red>展望符</font>。其表示 $A$ 后面必须紧跟的终结符，其通常是 FOLLOW(A) 的真子集。 - LR(1) 中的 1 表示的即为此展望符的长度 - 当 $\beta \neq \varepsilon$ 时，此展望符没有任何作用 - 当 $\beta = \varepsilon$ 时，当且仅当下一个符号属于 $a$ 时，才可以用此产生式进行规约 - 若存在 $B \rightarrow \gamma$ 则其展望符为 $FIRST(\beta a)$，当 $\beta \Rightarrow^* \varepsilon$ 时，此时展望符为 $a$此时，再进行类似 LL(0) 文法的分析操作，以下面的文法为例$$\begin{cases}S \rightarrow L=R | R \\L \rightarrow *R | id \\R \rightarrow L\end{cases}$$此处省略过程，直接得到答案### 处理后的产生式为$$\begin{cases} 0) S' \rightarrow S \\ 1) S \rightarrow L=R \\ 2) S \rightarrow R \\ 3) L \rightarrow *R \\ 4) L \rightarrow id \\ 5) R \rightarrow L\end{cases}$$### 每个状态的产生式为$$State 0\begin{cases}S' \rightarrow .S, \$ \\S \rightarrow .L=R, \$ \\S \rightarrow .R, \$ \\L \rightarrow .*R, =/\$ \\L \rightarrow .id, =/\$ \\R \rightarrow .L, =/\$\end{cases}$$$$State 1\begin{cases}S' \rightarrow S.,\$\end{cases}$$$$State 2\begin{cases}S \rightarrow L.=R,\$ \\R \rightarrow L.,\$\end{cases}$$$$State 3\begin{cases}S \rightarrow R.,\$\end{cases}$$$$State 4\begin{cases}L \rightarrow *.R,=/\$ \\R \rightarrow .L, =/\$ \\L \rightarrow .*R, =/\$ \\L \rightarrow .id, =/\$\end{cases}$$$$State 4\begin{cases}S \rightarrow L=.R,\$ \\R \rightarrow .L, \$ \\L \rightarrow .*R, \$ \\L \rightarrow .id, \$\end{cases}$$ --><h1 id="LR-1-和-LALR-1"><a href="#LR-1-和-LALR-1" class="headerlink" title="LR(1) 和 LALR(1)"></a>LR(1) 和 LALR(1)</h1><p>略</p><h1 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h1><p>即将上面的那些产生式带入实际的使用中</p><p>例如可以通过下面的文法来描述 <code>C</code> 语言的定义一个变量的过程</p><div class="table-container"><table><thead><tr><th style="text-align:center">产生式</th><th style="text-align:center">语义规则</th></tr></thead><tbody><tr><td style="text-align:center">$S \rightarrow TL$</td><td style="text-align:center">L的类型为T</td></tr><tr><td style="text-align:center">$T \rightarrow int$</td><td style="text-align:center">T为int</td></tr><tr><td style="text-align:center">$T \rightarrow double$</td><td style="text-align:center">T为double</td></tr><tr><td style="text-align:center">$L \rightarrow L, id$</td><td style="text-align:center">创建一个新的 <script type="math/tex">L_{右}</script>，将其类型设置为 <script type="math/tex">L_{左}</script> 相同的类型。并创建一个变量，其类型为 <script type="math/tex">L_{左}</script> 的类型，名字为 <script type="math/tex">id</script></td></tr><tr><td style="text-align:center">$L \rightarrow id$</td><td style="text-align:center">创建一个变量，其类型为 <script type="math/tex">L_{左}</script> 的类型，名字为 <script type="math/tex">id</script></td></tr></tbody></table></div><p>改为用属性来描述，则可以得到如下表格</p><div class="table-container"><table><thead><tr><th style="text-align:center">产生式</th><th style="text-align:center">语义规则</th></tr></thead><tbody><tr><td style="text-align:center">$S \rightarrow TL$</td><td style="text-align:center"><code>L.type = T.type</code></td></tr><tr><td style="text-align:center">$T \rightarrow int$</td><td style="text-align:center"><code>T.type = int</code></td></tr><tr><td style="text-align:center">$T \rightarrow double$</td><td style="text-align:center"><code>T.type = double</code></td></tr><tr><td style="text-align:center">$L \rightarrow L, id$</td><td style="text-align:center"><code>L(右).type = L.type</code><br><code>CreateVar(type = L.type, name = id.name)</code></td></tr><tr><td style="text-align:center">$L \rightarrow id$</td><td style="text-align:center"><code>CreateVar(type = L.type, name = id.name)</code></td></tr></tbody></table></div><ul><li>语法制导定义(SDD)</li><li>语法制导翻译方案(SDT)</li></ul><h2 id="SDD-语法制导定义"><a href="#SDD-语法制导定义" class="headerlink" title="SDD(语法制导定义)"></a>SDD(语法制导定义)</h2><h3 id="综合属性和继承属性"><a href="#综合属性和继承属性" class="headerlink" title="综合属性和继承属性"></a>综合属性和继承属性</h3><p>对于一个产生式产生的语义规则中，如果产生式左部的属性是仅通过右部的属性得到的，则称此属性为<font color=red>综合属性</font>。而如果产生式右部的属性是通过右部的属性或者左部的属性得到的，则称为<font color=red>继承属性</font></p><p><img src="/image/notebook/Compilation-principle/L-SDD.png" alt="L-SDD"></p><h3 id="S-属性定义-与-L-属性定义"><a href="#S-属性定义-与-L-属性定义" class="headerlink" title="S-属性定义 与 L-属性定义"></a>S-属性定义 与 L-属性定义</h3><h4 id="S-属性文法"><a href="#S-属性文法" class="headerlink" title="S-属性文法"></a>S-属性文法</h4><p>仅仅使用综合属性的SDD称为S属性的SDD，或S-属性定义、S-SDD</p><h4 id="L-属性文法"><a href="#L-属性文法" class="headerlink" title="L-属性文法"></a>L-属性文法</h4><p>一个SDD是L-属性定义(L-SDD)，当且仅当它的每个属性要么是一个综合属性，要么是满足如下条件的继承属性：假如存在一个产生式 $A \rightarrow X_1 X_2 X_3 \dots$，若存在一个 $X_i$，它的一个属性值与下面的有关</p><ul><li>$A$ 的继承属性</li><li>来自 <script type="math/tex">X_1, X_2, X_3, \dots , X_{i-1}</script> 的属性</li><li>$X_i$ 自身的属性，但不能形成死循环</li></ul><p>例如上面的图片即为 L-SDD</p><h2 id="SDT-语法制导翻译方案"><a href="#SDT-语法制导翻译方案" class="headerlink" title="SDT(语法制导翻译方案)"></a>SDT(语法制导翻译方案)</h2><p>语法制导翻译方案(SDT)是在产生式右部中嵌入了程序片段(称为语义动作)的CFG(上下文无关文法)</p><p>例如</p><script type="math/tex; mode=display">\begin{cases}D \rightarrow T \{L.type = T.type \} L \\T \rightarrow int \{T.type = int \} \\T \rightarrow double \{T.type = double \} \\L \rightarrow \{ L_1.type = L.type \} L_1, id\end{cases}</script><p>嵌入规则如下</p><ul><li>将计算某个非终结符号A的继承属性的动作插入到产生式右部中紧靠在A的本次出现之前的位置上</li><li>将计算一个产生式左部符号的综合属性的动作放置在这个产生式右部的最右端</li></ul><p>使用时，当在进行规约操作时，需要同时执行此程序片段</p><h1 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h1><h2 id="中间代码举例"><a href="#中间代码举例" class="headerlink" title="中间代码举例"></a>中间代码举例</h2><ul><li>AST，抽象语法树</li><li>TAC，三地址码，四元式</li><li>P-code，特别用于 Pasal 语言实现</li><li>Bytecode，Java 编译器的输出</li><li>SSA，静态单赋值形式</li></ul><h2 id="典型语句的翻译-四元式"><a href="#典型语句的翻译-四元式" class="headerlink" title="典型语句的翻译(四元式)"></a>典型语句的翻译(四元式)</h2><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x = b * (c + d) + a<br></code></pre></td></tr></table></figure><ol><li><code>(+, c, d, t1)</code></li><li><code>(*, b, t1, t2)</code></li><li><code>(+, t2, a, t3)</code></li><li><code>(=, t3,  , x)</code></li></ol><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(a &gt; b) &amp;&amp; (c &lt; d) || (e &lt; f) &amp;&amp; (!g)<br></code></pre></td></tr></table></figure><ol><li><code>(j&gt;, a, b, 3)</code></li><li><code>(j, , ,5)</code></li><li><code>(j&lt;, c, d, true)</code></li><li><code>(j, , , 5)</code></li><li><code>(j&lt;, e, f, 7)</code></li><li><code>(j, , , false)</code></li><li><code>(jnz, g, , true)</code></li><li><code>(j, , , false)</code></li></ol><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>) x = x + <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> x = <span class="hljs-number">4</span> * (x - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ol><li><code>(j&gt;, a, 0, 3)</code></li><li><code>(j, , , 6)</code></li><li><code>(+, x, 1, t1)</code></li><li><code>(=, t1, , x)</code></li><li><code>(j, , , 9)</code></li><li><code>(-, x, 1, t2)</code></li><li><code>(*, 4, t2, t3)</code></li><li><code>(=, t3, , x)</code><br>9.</li></ol><h1 id="运行存储分配"><a href="#运行存储分配" class="headerlink" title="运行存储分配"></a>运行存储分配</h1><ul><li>对于那些在编译时刻就可以确定大小的数据对象，可以在编译时刻就为它们分配存储空间，这样的分配策略称为<font color=red>静态存储分配</font></li><li>反之，如果不能在编译时完全确定数据对象的大小，就要采用<font color=red>动态存储分配</font>的策略。即在编译时仅产生各种必要的信息，而在运行时刻，再动态地分配数据对象的存储空间</li></ul><p><img src="/image/notebook/Compilation-principle/memory.png" alt="memory"></p><ul><li>使用过程(或函数、方法)作为用户自定义动作的单元的语言，其编译器通常以过程为单位分配存储空间</li><li>过程体的每次执行称为该过程的一个<font color=red>活动</font>(activation)</li><li>过程每执行一次，就为它分配一块连续存储区，用来管理过程一次执行所需的信息，这块连续存储区称为<font color=red>活动记录</font>(activation record)</li></ul><h2 id="静态存储分配"><a href="#静态存储分配" class="headerlink" title="静态存储分配"></a>静态存储分配</h2><ul><li>静态存储分配中，由编译器决定其在程序中的位置，每次运行时，其位置都相同</li><li>限制条件<ul><li>数组上下界均为常数</li><li>不允许过程的递归调用</li><li>不允许动态建立数据实体</li></ul></li></ul><h3 id="顺序分配法"><a href="#顺序分配法" class="headerlink" title="顺序分配法"></a>顺序分配法</h3><p>为每个静态过程都逐段分配存储空间，每个过程的内存空间都相互独立且不相交</p><p>优点：处理上简单<br>缺点：对内存空间的使用不够经济合理</p><h3 id="层次分配法"><a href="#层次分配法" class="headerlink" title="层次分配法"></a>层次分配法</h3><p>通过对过程间的调用关系进行分析，凡属无相互调用关系的并列过程，尽量使其局部数据<font color=red>共享</font>存储空间</p><h2 id="栈式存储分配"><a href="#栈式存储分配" class="headerlink" title="栈式存储分配"></a>栈式存储分配</h2><p>将内存认为是一个栈空间</p><p>当一个过程被调用时，向栈中推入一个活动记录，当此过程结束时，该记录被弹出栈</p><h2 id="活动树"><a href="#活动树" class="headerlink" title="活动树"></a>活动树</h2><p>用来描述程序运行期间控制进入和离开各个活动的情况的树称为活动树。在表示过程 p 的某个活动的结点上，其子结点对应于被 p的这次活动调用的各个过程的活动。按照这些活动被调用的顺序，自左向右地显示它们。一个子结点必须在其右兄弟结点的活动开始之前结束</p><h2 id="调用序列和返回序列"><a href="#调用序列和返回序列" class="headerlink" title="调用序列和返回序列"></a>调用序列和返回序列</h2><p>暂略</p><h2 id="非局部数据的访问"><a href="#非局部数据的访问" class="headerlink" title="非局部数据的访问"></a>非局部数据的访问</h2><p>暂略</p><h2 id="堆式存储分配"><a href="#堆式存储分配" class="headerlink" title="堆式存储分配"></a>堆式存储分配</h2><p>暂略</p><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>暂略</p><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><h2 id="流图"><a href="#流图" class="headerlink" title="流图"></a>流图</h2><h3 id="基本块"><a href="#基本块" class="headerlink" title="基本块"></a>基本块</h3><ul><li>控制流只能从基本块的第一个指令进入该块。也就是说，没有跳转到基本块中间或末尾指令的转移指令</li><li>除了基本块的最后一个指令，控制流在离开基本块之前不会跳转或者停机</li></ul><p>划分方法：</p><ul><li>确定首指令<ul><li>第一个指令是首指令</li><li>任何一个条件或无条件转移的指令的目标指令是一个首指令</li><li>紧跟在一个条件或无条件转移指令之后的指令是一个首指令</li></ul></li><li>任意两个相邻的首指令之间的记为一个基本块</li></ul><p>例如对于代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">i = m - <span class="hljs-number">1</span>;<br>j = n;<br>v = a[n];<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">do</span> i = i + <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span>(a[i] &lt; v);<br>    <span class="hljs-keyword">do</span> j = j - <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span>(a[j] &gt; v);<br>    <span class="hljs-keyword">if</span> (i &gt;= j) <span class="hljs-keyword">break</span>;<br>    x = a[i];<br>    a[i] = a[j];<br>    a[j] = x;<br>&#125;<br>x = a[i];<br>a[i] = a[n];<br>a[n] = x;<br></code></pre></td></tr></table></figure><p>可以划分出 6 个基本块</p><p>B1:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">i = m - <span class="hljs-number">1</span>;<br>j = n;<br>v = a[n];<br></code></pre></td></tr></table></figure><br>B2:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">i = i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> a[i] &lt; v <span class="hljs-keyword">goto</span> B2<br></code></pre></td></tr></table></figure><br>B3:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">j = j - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> a[j] &gt; v <span class="hljs-keyword">goto</span> B3<br></code></pre></td></tr></table></figure><br>B4:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> i &gt;= j <span class="hljs-keyword">goto</span> B6<br></code></pre></td></tr></table></figure><br>B5:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x = a[i];<br>a[i] = a[j];<br>a[j] = x;<br><span class="hljs-keyword">goto</span> B2<br></code></pre></td></tr></table></figure><br>B6:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x = a[i];<br>a[i] = a[n];<br>a[n] = x;<br></code></pre></td></tr></table></figure></p><h3 id="流图-1"><a href="#流图-1" class="headerlink" title="流图"></a>流图</h3><p>根据上面的基本块，再根据其转跳关系，可以绘制流图<br><pre><code class=" mermaid">graph LRB1 --&gt; B2B2 --&gt; B2B2 --&gt; B3B3 --&gt; B3B3 --&gt; B4B4 --&gt; B5B4 --&gt; B6B5 --&gt; B2</code></pre></p><h2 id="常用的代码优化方法"><a href="#常用的代码优化方法" class="headerlink" title="常用的代码优化方法"></a>常用的代码优化方法</h2><p>暂略</p><h2 id="基本块的优化"><a href="#基本块的优化" class="headerlink" title="基本块的优化"></a>基本块的优化</h2><p>将基本块通过 DAG(有向无环图) 表示</p><p>例如对于代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">a = b + c;<br>b = b - d;<br>c = c + d;<br>e = b + c;<br></code></pre></td></tr></table></figure><p>可以绘制出如下的 DAG 图(通常在图上标注运算符号而不是字母，这里为了更容易理解标注了字母)</p><pre><code class=" mermaid">graph LRb0((b)) --&gt; a0((a))c0((c)) --&gt; a0((a))b0((b)) --&gt; b1((b))d0((d)) --&gt; b1((b))c0((c)) --&gt; c1((c))d0((d)) --&gt; c1((c))c1((c)) --&gt; e0((e))b1((b)) --&gt; e0((e))</code></pre><p>若结果 <code>e</code> 是需要返回的值，即其他基本块需要使用的值，则通过 DAG 图可知，变量 <code>a</code> 是无用的，可以删除</p><p>得到新的图为<br><pre><code class=" mermaid">graph LRb0((b)) --&gt; b1((b))d0((d)) --&gt; b1((b))c0((c)) --&gt; c1((c))d0((d)) --&gt; c1((c))c1((c)) --&gt; e0((e))b1((b)) --&gt; e0((e))</code></pre><br>所以可以得到优化后的代码为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">b = b - d;<br>c = c + d;<br>e = b + c;<br></code></pre></td></tr></table></figure></p><h2 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h2><p>略</p><h2 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h2><p>暂略</p><h2 id="代码优化技术"><a href="#代码优化技术" class="headerlink" title="代码优化技术"></a>代码优化技术</h2><ul><li>依优化范围划分<ul><li>窥孔优化：局部的几条指令范围内的优化</li><li>局部优化：基本块范围内的优化</li><li>全局优化：流图范围内的优化</li><li>过程间优化：整个程序范围内的优化</li></ul></li><li>依优化对象划分<ul><li>目标代码优化：面向代码优化</li><li>中间代码优化：面向程序的中间表示</li><li>源级优化：面向源程序</li></ul></li><li>依优化侧面划分<ul><li>指令调度</li><li>寄存器分配</li><li>存储层次优化</li><li>存储布局优化</li><li>循环优化</li><li>控制流优化</li><li>过程优化</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>课程</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络复习</title>
    <link href="/2021/01/07/notebook/Computer-network/"/>
    <url>/2021/01/07/notebook/Computer-network/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ul><li>21世纪的重要特征是：数字化、网络化、信息化，以网络为核心的信息时代</li><li>三类网络：电信网络、有线电视网络、计算机网络</li><li>互联网的特点：连通性和共享<ul><li>连通性：互联网使得上网用户之间，不管相距多远，都可以非常便捷、非常经济地交换信息</li><li>共享：信息共享、软件共享、硬件共享</li></ul></li></ul><h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h2><ul><li>计算机网络由若干结点(node)和连接这些结点的链路(link)组成</li><li>internet 是一个通用名词，它泛指由多个计算机网络互连而成的计算机网络</li><li>Internet 是一个专有名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定互连网，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET</li><li>互联网的三个阶段<ul><li>从单个网络 ARPANET 向互连网发展的过程，TCP/IP 协议成为 ARPANET 上的标准协议</li><li>建成了三级结构的互联网，分为主干网、地区网、校园网(企业网)</li><li>形成了多层次 ISP 结构的互联网</li></ul></li><li>ISP：网络服务提供商，例如中国电信<ul><li>ISP分为不同的层次：主干 ISP、地区 ISP、本地 ISP</li><li>主干 ISP 服务面积大，拥有高速主干网</li><li>地区 ISP 通过一个或多个主干 ISP 连接起来，部分大公司直接接入地区 ISP</li><li>本地 ISP 负责给用户提供直接的服务，用户数据经由本地 ISP、地区 ISP、主干 ISP、地区 ISP、本地 ISP 发送至目标用户</li></ul></li><li>IXP：互联网交换点，将两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。使得互联网上的数据流量分布更加合理，减少了分组转发的迟延时间，降低了分组转发的费用</li></ul><p><img src="/image/notebook/Computer-network/1.png" alt="ISP"></p><ul><li>万维网(WWW)被广泛使用在互联网上，大大方便广大非网络专业人员对网络的使用</li><li>互联网的标准化工作由互联网协会(ISOC)进行管理<ul><li>互联网体系结构委员会(IAB)：负责管理互联网有关协议的开发<ul><li>互联网工程部(IETF)</li><li>互联网研究部(IRTF)</li></ul></li></ul></li></ul><h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><ul><li>边缘部分：由所有连接在互联网上的主机(端系统 end system)组成。这部分是用户直接使用的，用来进行通信和资源共享</li><li>核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的</li></ul><h3 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h3><p>互联网的<font color=red>通信方式</font>：</p><ul><li>客户(Client)-服务器(Server)(C/S方式)：主机A运行客户程序而主机B运行服务器程序，在这种情况下，A是客户而B是服务器。客户A向服务器发出服务请求，而服务器B向客户A提供服务。<font color=red>客户是服务请求方，而服务器是服务提供方</font>。</li><li>对等方式(P2P方式 peer-to-peer)：两台主机都运行了对等连接软件(P2P软件)，他们可以进行平等的、对等连接通信</li></ul><h3 id="互联网的核心部分-通信交换方式"><a href="#互联网的核心部分-通信交换方式" class="headerlink" title="互联网的核心部分(通信交换方式)"></a>互联网的核心部分(通信交换方式)</h3><p>在互联网核心部分起特殊作用的是路由器。路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能</p><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>使用电路交换通话之前，必须先拨号请求连接。当被叫用户听到交换机振铃音并摘机后，从主叫端到被叫端就建立了一条连接，也就是一条专用的物理通路。这条连接保证了双方通话时所需的通信资源，而这些资源在双方通信时不会被其他用户占用。<font color=red>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</font>。以下三个步骤称为电路交换</p><ul><li>建立连接(占用通信资源)</li><li>通话(一直占用通信资源)</li><li>释放资源(归还通信资源)</li></ul><p>如果用户在拨号呼叫时电信网的资源已不足以支持此次呼叫，则主叫用户会听到忙音，表示电信网不接受用户的呼叫(例如对方正在通话中)</p><p>但使用电路交换来传送计算机数据时，其<strong>线路的的传输效率往往很低</strong>。这是因为计算机的数据是突发式地出现在传输线路上的，因此线路上真正用来传送的数据时间往往不到10%，甚至1%。浪费通信线路资源</p><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组交换采用存储转发技术，我们把要发送的整块数据称为一个报文(message)，在发送端，先把较长的报文划分成较短的、固定长度的数据段，每一个数据段前面添加上首部(header)构成分组(packet)。分组又称为包，分组的首部也可以称为包头。以下三个步骤</p><ul><li>路由器/交换机接受数据包(存储)</li><li>路由器/交换机查看数据段的首部，决定数据包接下来应该发送给哪个路由器</li><li>路由器/交换机发送数据包(转发)</li></ul><p>优点：</p><ul><li>高效：在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用</li><li>灵活：为每一个分组独立地选择最合适的转发路由</li><li>迅速：以分组作为传送单位，可以不先建立连接就能向其他主机发送分组</li><li>可靠：保证可靠的网络协议，分布式多路由的分组交换网，使网络有很好的生存性</li></ul><p>缺点：</p><ul><li>分组在各路由器存储转发时需要排队，会造成一定的时延</li><li>分组交换需要携带控制信息</li></ul><p><img src="/image/notebook/Computer-network/2.png" alt="分组交换"></p><p><em>注：图中的报文交换即为将报文不拆分为较短的、固定长度的数据段的报文交换方式</em></p><h2 id="计算机网络类别"><a href="#计算机网络类别" class="headerlink" title="计算机网络类别"></a>计算机网络类别</h2><ul><li>按照作用范围分<ul><li>广域网(WAN)：广域网的作用范围通常为几十到几千公里，是互联网的核心部分，其任务是通过长距离运送主机发送给的数据，速度高、通信量大</li><li>城域网(MAN)：作用范围通常为一个城市，可以跨越几个街区甚至整个城市。目前城域网很多采用以太网技术，因此有时也常常并入局域网的范围</li><li>局域网(LAN)：一般工作范在1km左右</li><li>个人区域网(PAN)：个人网络，通常只有10m左右</li></ul></li><li>按照使用者分<ul><li>公用网(public network)：指电信公司出资建造的大型网络，这种网络通常是提供给所有愿意缴纳费用的人</li><li>专用网(private network)：某个部门为了满足本单位的需要而建造的网络，这种网络不向本单位以外的人提供服务</li></ul></li><li>用来把用户接入到互联网的网络<ul><li>这种网络称为接入网(AN)，即与宽带接入技术有关的网络</li></ul></li></ul><h2 id="网络性能"><a href="#网络性能" class="headerlink" title="网络性能"></a>网络性能</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>速率的单位为 <code>bit/s</code>，有时写作<code>bps</code>，含义为：<font color=red>每秒传输的比特位个数</font>。<strong>注意，这与通常提及的网速单位不同，通常网速的单位为 B/s 而不是 b/s</strong></p><script type="math/tex; mode=display">1Gbps = 1000Mbps = 10^6 Kbps = 10^9 bps</script><script type="math/tex; mode=display">1 B/s = 8 bps</script><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>通常带宽指代某个<strong>信号具有的频带宽度</strong>，单位为<code>Hz</code></p><p>在计算机网络中，带宽和速率同义，单位为<code>bit/s</code></p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>在单位时间内，通过某个网络的实际数据量</p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>指数据从网络的一段传送到另一端所需要的时间</p><ul><li>发送时延：主机或路由器发送数据帧需要的时间。从发送数据帧的第一个比特开始到最后一个比特发送完毕所需要的时间 $发送时延 = \frac{数据帧长度(bit)}{速率(bit/s)}$</li><li>传播时延：电磁波在信道中传播一定的距离需要花费的时间 $传播时延 = \frac{链路长度(m)}{数据在链路上的传播速度(m/s)}$</li><li>处理时延：主机或路由器收到分组后需要花费时间进行处理。包括分析数据首部、提取数据部分、差错检验、寻找下一个路由</li><li>排队时延：分组经过网络传输时，在进入路由器后需要在输入队列中等待处理，待路由器确定了转发接口后，还要在输出队列中等待转发</li></ul><script type="math/tex; mode=display">总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</script><p><strong>提高数据的发送速率只能减小数据的发送时延</strong></p><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>表示通信管道链路中总共可以容纳多少个比特</p><script type="math/tex; mode=display">时延带宽积 = 传播时延 \times 带宽</script><h3 id="往返时间-RTT"><a href="#往返时间-RTT" class="headerlink" title="往返时间 RTT"></a>往返时间 RTT</h3><script type="math/tex; mode=display">有效数据率 = \frac{数据长度}{发送时间 + RTT}</script><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>利用率有信道利用率和网络利用率两种</p><ul><li>信道利用率：某信道有百分之几的时间是被利用的(有数据通过)。信道利用率并非越高越好，信道利用率越大，则该信道的时延就会增加。令 $D_0$ 表示网络空闲时的时延，$D$ 表示网络当前的时延，信道利用率用$U$表示，则<script type="math/tex; mode=display">D = \frac{D_0}{1-U}</script>通常较大的主干网的 ISP 的信道利用率不超过 50%</li><li>网络利用率：全网络的信道利用率的加权平均值</li></ul><h3 id="其他非性能特征"><a href="#其他非性能特征" class="headerlink" title="其他非性能特征"></a>其他非性能特征</h3><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可拓展性和可升级性</li><li>易于管理和维护</li></ul><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p>规定了所交换数据的格式以及有关的同步问题规则称为网络协议，主要由下面三个要素构成</p><ul><li>语法：数据与控制信息的结构或格式</li><li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li><li>同步：事件实现顺序的详细说明</li></ul><h3 id="网络层次"><a href="#网络层次" class="headerlink" title="网络层次"></a>网络层次</h3><p>分层的好处：</p><ul><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>能促进标准化工作<ul><li>差错控制</li><li>流量控制</li><li>分段和重装</li><li>复用和分用</li><li>连接建立和释放</li></ul></li></ul><h3 id="五层协议结构"><a href="#五层协议结构" class="headerlink" title="五层协议结构"></a>五层协议结构</h3><h4 id="应用层-application-layer"><a href="#应用层-application-layer" class="headerlink" title="应用层(application layer)"></a>应用层(application layer)</h4><p>通过应用进程间的交互来完成特定网络应用。对于不同的网络应用需要有不同的应用层协议。例如 DNS(域名系统)，HTTP(万维网应用)，SMTP(电子邮件协议)</p><h4 id="运输层-transport-layer"><a href="#运输层-transport-layer" class="headerlink" title="运输层(transport layer)"></a>运输层(transport layer)</h4><p>负责向两台主机中进程通信提供通用的数据传输服务。主要有两种协议：</p><ul><li>TCP(传输控制协议)：面向连接的、可靠的数据传输服务。其数据传输的单位是<strong>报文段</strong></li><li>UDP(用户数据报协议)：提供无连接的、尽最大努力的数据传输服务，不保证数据传输的可靠性。其数据传输的单位是用户<strong>数据报</strong></li></ul><h4 id="网络层-network-layer"><a href="#网络层-network-layer" class="headerlink" title="网络层(network layer)"></a>网络层(network layer)</h4><p>负责为<a href="#分组交换">分组交换</a>网上的不同主机提供通信服务，将运输层产生的报文段或用户数据封装成分组或包进行传送。IP 协议</p><h4 id="数据链路层-data-link-layer"><a href="#数据链路层-data-link-layer" class="headerlink" title="数据链路层(data link layer)"></a>数据链路层(data link layer)</h4><p>将IP数据报组装成帧(framing)，添加控制信息(同步信息、地址信息、差错控制)。检查所收到的帧中是否有差错。与 mac 地址有关</p><h4 id="物理层-physical-layer"><a href="#物理层-physical-layer" class="headerlink" title="物理层(physical layer)"></a>物理层(physical layer)</h4><p>传输比特流</p><h3 id="实体、协议、服务-和服务访问点："><a href="#实体、协议、服务-和服务访问点：" class="headerlink" title="实体、协议、服务 和服务访问点："></a>实体、协议、服务 和服务访问点：</h3><ul><li>实体(entity)——表示任何可发送或接收信息的硬件或软件进程。</li><li>协议——控制两个对等实体进行通信的规则的集合。</li><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。</li><li>下面的协议对上面的服务用户是透明的。</li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li><li>服务是“垂直的”，即服务是由下层向上层通 过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)</li><li>协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的，必须非常仔细地检查这个协议能否应付各种异常情况。</li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>物理层的主要任务是<font color=red>确定与传输媒体的接口有关的一些特性</font></p><ul><li>机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等</li><li>电器特性：指明在接口电缆的各条线上出现的电压的范围</li><li>功能特性：指明某条线上出现的某一电平的电压的意义</li><li>过程特性：指明对于不同功能的各种可能事件出现的顺序</li></ul><h2 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h2><h3 id="数据通信模型"><a href="#数据通信模型" class="headerlink" title="数据通信模型"></a>数据通信模型</h3><p>一个数据通信系统可以划分为三大部分</p><ul><li>源系统<ul><li>源点：源点设备产生要传输的数据</li><li>发送器：调制器(调制解调器)</li></ul></li><li>传输系统</li><li>目标系统<ul><li>接收器：解调器(调制解调器)</li><li>终点</li></ul></li></ul><h3 id="通信系统中的术语"><a href="#通信系统中的术语" class="headerlink" title="通信系统中的术语"></a>通信系统中的术语</h3><ul><li>消息(message)：运送消息的实体</li><li>信号(signal)：数据的电气或电磁的表现<ul><li>模拟信号(连续信号)：消息的参数取值是连续的</li><li>数字信号(离散信号)：消息的参数取值是离散的</li></ul></li><li>单向通信(单工通信)：只能有一个方向的通信而没有反方向的交互</li><li>双向交替通信(半双工通信/单工)：双方都可以发送信息，但是双方不能同时发送信息</li><li>双向同时通信(全双工通信)：双方可以同时发送给和接受信息</li><li>基带信号：由源点产生的信号。通常包含有低频甚至直流成分，需要通过调制器进行调制(modulation)</li><li>调制：对基带信号进行的变换<ul><li>基带调制(编码)：仅仅对基带信号的波形进行变换，使它能够与信道特性相适应，变换后仍然是基带信号<ul><li>不归零制：正电平表示1，负电平表示0</li><li>归零制：正脉冲表示1，负脉冲表示0</li><li>曼切斯特编码：周期中心向上跳为0，周期中心向下跳为1</li><li>差分曼切斯特编码：位开始边界有跳位0，没有跳变为1。每个位中间必须进行一次跳变<br><img src="/image/notebook/Computer-network/3.png" alt="编码"></li></ul></li><li>带通调制：使用载波(carrier)进行调制，将基带的信号频率范围搬移到高频率段，并转换为模拟信号(为了达到更高的信息传输速率，通常采用复杂的多元振幅相位混合调制方法QAM)<ul><li>调幅(AM)：载波的振幅随着基带数字信号变化而变化</li><li>调频(FM)：载波的频率随着基带数字信号变化而变化</li><li>调相(PM)：载波的初始相位随基带数字信号变化而变化</li></ul></li></ul></li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><ul><li>信道能够通过的频率范围：在任何信道中，，码元传输的速率是有上线的，传输速率超过此上线，就会出现严重的码间串扰的问题，使接收端对码元的识别称为不可能</li><li>信噪比：所有电子设备和通信信道中，会随机产生噪音。如果信号相对较强，则噪音的影响就相对较小。<script type="math/tex; mode=display">信噪比(dB) = 10 \times log_{10}(\frac{信号的平均功率(S)}{噪音的平均功率(N)}) (dB)</script></li><li>信道极限信息传输速率$C$为<script type="math/tex; mode=display">C = W \times log_2(1 + \frac{S}{N}) (bit/s)</script>其中，$W$ 为信道的带宽(Hz)，$S$ 为信道内所传信号的平均功率，$N$ 信道内部的(高斯)噪音的功率</li></ul><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><ul><li>导引型传输媒体：<ul><li>双绞线：屏蔽双绞线，无屏蔽双绞线</li><li>同轴电缆</li><li>光缆<ul><li>单模光纤：纤芯细，光线不会经过多次反射，成本高，传输距离远</li><li>多模光纤：可以同时传输多个光路，容易失真，只适合近距离传输</li></ul></li></ul></li><li>非导引型传输媒体<ul><li>短波</li><li>微波</li><li>卫星</li></ul></li></ul><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><ul><li>频分复用：所有用户在同样的时间占用不同的带宽（频率带宽）资源</li><li>时分复用：将时间划分为一段段等长的时分复用帧(TDM 帧)。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。每一个用户所占用的时隙是周期性地出现(其周期就是 TDM 帧的长度)。TDM 信号也称为等时(isochronous)信号。时分复用的所有用户是在不同的时间占用同样的频带宽度。</li><li>统计时分复用(提供时分复用的利用率)</li><li>波分复用：光的频分复用。</li><li>码分复用CDM：常用的名词是码分多址 CDMA。各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。每一个比特时间划分为 m 个短的间隔，称为码片(chip)。当码片序列长度为$m$ bit发送的信息的速率为$b$ bit/s，则实际的发送速率要达到$mb$ bit/s。CDMA 的重要特点：每个站分配的码片序列不仅必须各不相同，并且还必须互相正交(orthogonal)。在实用的系统中是使用伪随机码序列。</li></ul><h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><p>略</p><h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><p>略</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>链路层使用的信道分为两种类型：</p><ul><li>点对点信道：一对一</li><li>广播信道：一对多</li></ul><h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h3><ul><li>链路(link)：是一条无源的点到点（一个节点到相邻节点）的物理线路段，中间没有任何其他的交换结点。一条链路只是一条通路的一个组成部分。</li><li>数据链路(data link)：除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。最常用的就是网络适配器（即网卡）。</li><li>帧：数据链路层的协议数据单元。数据链路层把网络层交下来的数据打包成帧发送到链路上，以及把接收到的帧中的数据取出并交给网络层</li></ul><h3 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><ul><li>在一段数据的前后分别添加首部和尾部，构成一个帧。</li><li>首部和尾部的一个重要作用就是进行帧定界(确定一个帧的界限)。</li><li>每一种链路层协议都规定了所能传送的帧的数据部分长度的上限——最大传送单元(MTU)</li><li>控制字符SOH(Start Of Header)放在一帧的最前面，EOT(End Of Transmission)放在一帧的结束。如果只有SOH没有EOT则丢弃。(SOH = 0x01，EOT = 0x04)</li></ul><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>由于数据部分也有可能出现 EOT 的字符导致数据链路层会错误的找到帧的边界。若发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”，则在前面插入一个转义字符“ESC”(其十六进制编码是 0x1B)，如果出现了转义字符“ESC”，则再插入一个“ESC”。这种办法称为<strong>字节填充</strong></p><h4 id="差错检验"><a href="#差错检验" class="headerlink" title="差错检验"></a>差错检验</h4><h5 id="CRC-循环冗余检验"><a href="#CRC-循环冗余检验" class="headerlink" title="CRC(循环冗余检验)"></a><font color=red>CRC(循环冗余检验)</font></h5><p>在发送端，先把数据划分为组，每组 $k$ 个比特，将每组的数据用二进制的模2运算进行$2^n$乘的运算，然后在每组数据后添加 $n$ 位冗余码。</p><blockquote><p>假定本组数据为 $M = 101001$，$n = 3$。假定除数$P = 1101(n + 1位)$<br>首先在 $M$ 后添加 $n$ 位 $0$，得到 $2^nM = 101001000$<br>将新得到的值与 $P$ 进行模2除法(进行异或运算，直到最后一位)<br><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml">        <span class="hljs-number">110101</span> <span class="hljs-string">(商)</span><br>    <span class="hljs-string">+---------</span><br><span class="hljs-number">1101</span><span class="hljs-string">|101001000</span> <span class="hljs-string">(被除数)</span><br>     <span class="hljs-number">1101</span><br>    <span class="hljs-string">----------</span><br>      <span class="hljs-number">1110</span>     <span class="hljs-string">(每次运算使用的是异或运算，而不是减法)</span><br>      <span class="hljs-number">1101</span><br>    <span class="hljs-string">----------</span><br>       <span class="hljs-number">0111</span>    <span class="hljs-string">(每次运算时，如果首位是0，则商为0，如果首位是1，则商为1)</span><br>       <span class="hljs-number">0000</span><br>    <span class="hljs-string">----------</span><br>        <span class="hljs-number">1110</span><br>        <span class="hljs-number">1101</span><br>    <span class="hljs-string">----------</span><br>         <span class="hljs-number">0110</span><br>         <span class="hljs-number">0000</span><br>    <span class="hljs-string">----------</span><br>          <span class="hljs-number">1100</span><br>          <span class="hljs-number">1101</span><br>    <span class="hljs-string">----------</span><br>           <span class="hljs-number">001</span> <span class="hljs-string">(余数R)</span><br></code></pre></td></tr></table></figure><br>将余数$R = 001$添加至 $M$ 后，得到CPC后的结果为 $101001001$</p></blockquote><p>CPC校验只能判断这个帧是否有差错，不能判断哪一位或者哪几位除了差错</p><p>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受(accept)。</p><p>“无差错接受”是指:“凡是接受的帧(即不包括丢弃的帧)，我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。也就是说:“凡是接收端数据链路层接受的帧都没有传输差错”(有差错的帧就丢弃而不接受)。要做到“可靠传输”(即发送什么就收到什么)就必须再加上确认和重传机制</p><p>在数据后面添加上的冗余码称为帧检验序列 FCS</p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li>PPP协议的功能<ul><li>简单：这是首要的要求，互操作性提高了</li><li>封装成帧：必须规定特殊字符作为帧定界符</li><li>透明性</li><li>多种网络层协议：同一条物理链路上同时支持多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传输单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul></li><li>PPP协议不需要的功能<ul><li>纠错</li><li>流量控制</li><li>序号</li><li>多点线路</li><li>半双工或单工链路</li></ul></li><li>PPP协议的组成<ul><li>一个将IP数据报封装到串行链路的方法</li><li>链路控制协议 LCP(Link Control Protocol)</li><li>网络控制协议 NCP(Network Control Portocol)</li></ul></li><li>PPP协议的帧格式<ul><li>各字段的含义<ul><li>其中，首部的第一个字段和尾部的最后一个字段 F(flag) 都是 <code>0x7E</code>，表示一个帧的开始或结束。</li><li>首部中的地址字段 A 规定为 <code>0xFF</code>，控制字段 C 规定为 <code>0x03</code> 这两个字段并没有携带 PPP 帧的信息</li><li>首部中第四个字段为协议字段，当协议字段为 0x0021 时，PPP 帧的信息字段就是 IP 数据报。若为 0xC021, 则信息字段是 PPP 链路控制数据。若为 0x8021，则表示这是网络控制数据。</li><li><font color=red>信息字段的长度是可变的，不超过 1500 字节</font></li><li>尾部中的第一个字段是用于CRC的帧校验序列FCS</li></ul></li><li>字节填充<ul><li>将信息字段中出现的每一个 <code>0x7E</code> 字节转变成为 2 字节序列(<code>0x7D</code>, <code>0x5E</code>)。</li><li>若信息字段中出现一个 <code>0x7D</code> 的字节，则将其转变成为 2 字节序列(<code>0x7D</code>, <code>0x5D</code>)。</li><li>若信息字段中出现 ASCII 码的控制字符 (即数值小于 <code>0x20</code> 的字符)，则在该字 符前面要加入一个 <code>0x7D</code> 字节，同时将该字符的编码加以改变。例如出现 <code>0x03</code>，则要改为 <code>0x7D</code>，<code>0x23</code></li></ul></li><li>零比特填充：PPP 协议用在 SONET/SDH 链路时，是使用同步传输，这时 PPP 协议采用零比特填充方法来实现透明传输。信息字段每出现5个连续的1，则添加一个0，这样不会产生控制字符<code>F</code>相同的信息部分。<br><img src="/image/notebook/Computer-network/4.png" alt="PPP帧"></li></ul></li><li>PPP协议的工作状态：略</li></ul><h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><p>共享信道技术：</p><ul><li>静态划分信道</li><li>动态媒体接入控制<ul><li>随机接入</li><li>受控接入</li></ul></li></ul><h3 id="CSMA-CD-协议-Carrier-Sense-Multiple-Access-with-Collision-Detection-载波侦听多路访问-碰撞检测"><a href="#CSMA-CD-协议-Carrier-Sense-Multiple-Access-with-Collision-Detection-载波侦听多路访问-碰撞检测" class="headerlink" title="CSMA/CD 协议(Carrier Sense Multiple Access with Collision Detection 载波侦听多路访问/碰撞检测)"></a><font color=red>CSMA/CD 协议(Carrier Sense Multiple Access with Collision Detection 载波侦听多路访问/碰撞检测)</font></h3><ul><li>以太网<ul><li>所有计算机连接到一根总线上</li><li>采用无连接的工作方式</li><li>差错帧是否需要重传由高层决定</li><li>使用<a href="#通信系统中的术语">曼切斯特编码</a></li></ul></li><li>CSMA/CD 协议<ul><li>多点接入：许多计算机以多点接入的方式连接在一根总线上</li><li>载波监听：用电子技术监听总线上有没有其他计算机在发送数据</li><li>碰撞检测：边发送边监听</li></ul></li></ul><h4 id="截断二进制指数退避"><a href="#截断二进制指数退避" class="headerlink" title="截断二进制指数退避"></a><font color=red>截断二进制指数退避</font></h4><p>当发送的数据包发生碰撞冲突时，以太网使用截断二进制指数退避法</p><ul><li>确定一个争用期时间：以太网把争用期定为 $51.2 \mu s$。<ul><li>早期的以太网的网速为 $10Mbps$，所以在此时间内，计算机总共能够发送 64 字节的数据(512bit)。所以这个时间通常也被叫做512比特时间</li></ul></li><li>当数据包开始发送的 $51.2 \mu s$ 内，如果接收到了其他计算机发送的数据包，则认为此次数据包发生了碰撞，并立即停止数据包的传输。</li><li>发生冲突的双方从 $[0, (2^k - 1)]$ 范围中随机取出一个整数，记为 $r$<script type="math/tex; mode=display">k = min\{重传次数(第一次为1), 10\}</script></li><li>下一次重传的将在 $r$ 倍的争用期</li><li>当重传达到 $16$ 次仍不能成功时，则放弃，并向高层报告</li></ul><blockquote><p>例如，在第1次重传时，k=1，随机数 $r$ 从整数 <script type="math/tex">\{0,1\}</script> 中选一个数。因此重传推迟的时间是0或争用期，在这两个时间中随机选择一个。整数范围的选择为2的k次方个数<br>若再发生碰撞，则重传时，k=2，随机数 $r$ 就从整数 <script type="math/tex">\{0,1,2,3\}</script> 中选一个数。因此重传推迟的时间是在$0, 1, 2, 3$倍的争用期这4个时间中随机抽取一个<br>同样，若在发生碰撞，则重传时k=3，随机数 $r$ 就从整数 <script type="math/tex">\{0,1,2,3,4,5,6,7\}</script> 中选一个数。以此类推</p></blockquote><p>同时，以太网规定了最短的帧长为 64 字节，如果要发送的数据小于此数值，则必须要填入一些字节使得帧长不小于 64 字节。同样，如果发送方发送的帧数据在争用期(64比特)内没有发送碰撞，则后续发送的数据一定不会发生碰撞</p><p>对于接收方，如果接收到的帧小于 64 字节，则可以认为这是由于冲突而异常中止的无效帧</p><p>同时为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备，以太网还规定了帧间最小间隔 $9.6 \mu s$</p><h4 id="CSMA-CD-协议要点归纳"><a href="#CSMA-CD-协议要点归纳" class="headerlink" title="CSMA/CD 协议要点归纳"></a>CSMA/CD 协议要点归纳</h4><ul><li>准备发送</li><li>检测信道</li><li>在发送过程中仍不停检测信道<ul><li>发送成功：在争用期内没有检测到碰撞</li><li>发送失败：在争用期内检测到碰撞，立即停止发送数据</li></ul></li></ul><p>以太网每发送一帧，一定要把已发送是帧保留一下，如果在争用期内检测到了碰撞，则此帧需要重传</p><h3 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h3><p>略</p><h3 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h3><script type="math/tex; mode=display">S_{max} = \frac{T_0}{T_0 + \tau} = \frac{1}{1+\frac{\tau}{T_0}}</script><script type="math/tex; mode=display">T_0 = \frac{帧长(bit)}{发送速率(bit/s)}</script><h3 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h3><p>mac地址是计算机中固化在适配器ROM中的地址，简单来说mac地址由电脑硬件直接决定，<font color=red>长度为 48 位(6 个字节)</font>。制作适配器的厂商通常需要向 IEEE 的 RA 购买 OUI(组织唯一标识符，也可以理解为是mac地址段)</p><h3 id="适配器过滤"><a href="#适配器过滤" class="headerlink" title="适配器过滤"></a>适配器过滤</h3><p>适配器在接收到 mac 帧后，先用硬件检查 mac 帧中的目的地址，如果是发往本站的帧则收下，否则丢弃掉。<br>这里“发往本机的帧”包括以下三种：</p><ul><li>单播(unicast)：一对一</li><li>广播(broadcast)：一对全体</li><li>多播(multicast)：一对多</li></ul><p>一些适配器可以设置为混杂模式，工作在混杂方式的适配器会将以太网上传输的所有帧都接受下来。这样实际上是窃听其他站点的通信</p><h3 id="mac帧格式"><a href="#mac帧格式" class="headerlink" title="mac帧格式"></a>mac帧格式</h3><p><img src="/image/notebook/Computer-network/5.png" alt="mac帧格式"></p><ul><li>前两个字段为目的地址和源地址</li><li>第三个字段为类型字段，用来标志上一层使用的是说明协议。例如为 <code>0x0800</code> 时为 IP 数据报，为 <code>0x8137</code> 为 Novell IPX</li><li>第四个字段为数据段，长度在 46 到 1500 字节(46 = 最短长度 64 字节 - 第一个字段 6 字节 - 第二个字段 6 字节 - 第三个字段 2 字节 - 第五个字段 4 字节)</li><li>第五个字段是帧校验序列 CRC</li><li>将 mac 帧向物理层传输时，还需要在开头加上 7 个字节的前同步码，同步码是由 <code>10</code> 串组成，使得接收端的适配器能够根据同步码的频率来调制时钟频率。和一个字节的帧开始界定符</li></ul><h3 id="无效的-mac-帧"><a href="#无效的-mac-帧" class="headerlink" title="无效的 mac 帧"></a>无效的 mac 帧</h3><ul><li>帧的长度不是整数个字节</li><li>用收到的帧检验序列 FCS 由差错</li><li>收到的帧的 mac 数据字段的长度不在 46-1500 字节之间</li></ul><h2 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h2><p>略</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><ul><li>虚电路服务：通过网络层来实现可靠的传输网络协议，面向连接，类似打电话时的连接建立过程</li><li>数据报服务：不提供服务质量的保证，不需要建立连接</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">方面</th><th style="text-align:center">虚电路服务</th><th style="text-align:center">数据报服务(采用的)</th></tr></thead><tbody><tr><td style="text-align:center">思路</td><td style="text-align:center">可靠的通信应当由网络来保证</td><td style="text-align:center">可靠的通信应当由用户主机来保证</td></tr><tr><td style="text-align:center">连接的建立</td><td style="text-align:center">必须有</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">终点的地址</td><td style="text-align:center">仅在建立连接阶段使用，每个分组使用短的虚电路号</td><td style="text-align:center">每个分组都有终点的完整地址</td></tr><tr><td style="text-align:center">分组转发</td><td style="text-align:center">属于同一条虚电路的分组均按照同一路由进行转发</td><td style="text-align:center">每个分组独立选择路由进行转发</td></tr><tr><td style="text-align:center">当结点出现故障时</td><td style="text-align:center">所有通过出故障的结点的虚电路均不能工作</td><td style="text-align:center">出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td style="text-align:center">分组的顺序</td><td style="text-align:center">总是按照顺序到达终点</td><td style="text-align:center">到达终点的顺序不一定按照发送顺序</td></tr><tr><td style="text-align:center">端到端的差错处理和流量控制</td><td style="text-align:center">可以由网络负责，也可以由用户主机负责</td><td style="text-align:center">由用户主机负责</td></tr></tbody></table></div><h2 id="网络协议-IP"><a href="#网络协议-IP" class="headerlink" title="网络协议 IP"></a>网络协议 IP</h2><p>与 IP 协议配套使用的还有三个协议</p><ul><li>ARP(地址解析协议)</li><li>ICMP(网络控制报文协议)</li><li>IGMP(网际组管理协议)</li></ul><h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>网络上使用的中间设备</p><ul><li>物理层：转发器</li><li>数据链路层：网桥</li><li>网络层：路由器</li><li>网络层以上：网关</li></ul><h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3><p>IP地址有两个固定长度的字段组成，第一个字段为<strong>网络号</strong>，第二个为<strong>主机号</strong>。一个 IP 地址在整个互联网范围内是唯一的，</p><p><img src="/image/notebook/Computer-network/6.png" alt="IP地址分类"></p><ul><li>A类、B类、C类地址的网络号字段分别为1个、2个和3个字节长，而在网络号字段的最前面有 1-3 位的类别位，其数值分别规定位 <code>0</code>、<code>10</code>、<code>110</code></li><li>A类、B类、C类地址的主机号的主机号字段分别为3个、2个、1个字节长</li><li>A类、B类、C类的地址都是单播<a href="#适配器过滤">见适配器过滤</a>地址</li><li>D类地址(前4位是<code>1110</code>)用于多播</li><li>E类地址(前4位是<code>1111</code>)保留为以后用</li></ul><p>IP 地址的指派范围</p><div class="table-container"><table><thead><tr><th style="text-align:center">网络类别</th><th style="text-align:center">最大可以指派的网络数</th><th style="text-align:center">第一个可以指派的网络号</th><th style="text-align:center">最后可以指派的网络号</th><th style="text-align:center">每个网络中的最大主机数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">126($2^{7} - 2$)</td><td style="text-align:center">1</td><td style="text-align:center">126</td><td style="text-align:center">16777214($2^{24} - 2$)</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">16383($2^{14} - 1$)</td><td style="text-align:center">128.1</td><td style="text-align:center">191.255</td><td style="text-align:center">65534($2^{14} - 1$)</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">2097151($2^{21} - 1$)</td><td style="text-align:center">192.0.1</td><td style="text-align:center">223.255.255</td><td style="text-align:center">254</td></tr></tbody></table></div><p>特殊的 IP 地址</p><div class="table-container"><table><thead><tr><th style="text-align:center">网络号</th><th style="text-align:center">主机号</th><th style="text-align:center">源地址使用</th><th style="text-align:center">目的地址使用</th><th style="text-align:center">代表的含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">可以</td><td style="text-align:center">不可以</td><td style="text-align:center">本网络上的本主机</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">非全0且非全1</td><td style="text-align:center">可以</td><td style="text-align:center">不可以</td><td style="text-align:center">在本网络上的某台主机</td></tr><tr><td style="text-align:center">全1</td><td style="text-align:center">全1</td><td style="text-align:center">不可以</td><td style="text-align:center">可以</td><td style="text-align:center">在本网络上进行广播</td></tr><tr><td style="text-align:center">非全0且非全1</td><td style="text-align:center">全1</td><td style="text-align:center">不可以</td><td style="text-align:center">可以</td><td style="text-align:center">对某个网络上的所有主机进行广播</td></tr><tr><td style="text-align:center">127</td><td style="text-align:center">非全0且非全1</td><td style="text-align:center">可以</td><td style="text-align:center">可以</td><td style="text-align:center">本机</td></tr></tbody></table></div><p>IP 地址的一些特点</p><ul><li>每一个 IP 地址都由网络号和主机号两部分组成</li><li>实际上 IP 地址标志的是一台主机(或路由器)和一条链路的接口</li><li>一个网络指的是具有相同网络号的主机的集合</li><li>在 IP 地址中，所有分配到网络号的网络都是平等的</li><li>同一个局域网上的主机或者路由器的 IP 地址中的网络号必须是一样的</li><li>用网桥(它工作在链路层)互连的网段仍然是一个局域网，网络号必须相同</li><li>路由器总是拥有两个或更多的 IP 地址，即路由器的每一个接口都有一个不同网络号的 IP 地址</li><li>当两个路由器相连时，在接口两端处，可以分配也可以不分配 IP</li></ul><h3 id="IP-地址与硬件地址-mac地址"><a href="#IP-地址与硬件地址-mac地址" class="headerlink" title="IP 地址与硬件地址(mac地址)"></a>IP 地址与硬件地址(mac地址)</h3><ul><li>物理地址/硬件地址/mac 地址是数据链路层和物理层使用的地址，是固定的</li><li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址</li><li>在 IP 层抽象的互联网上只能看到 IP 数据报。IP 数据报不论转发多少次，其数据报中的 IP 地址始终是源地址和目的地址。</li><li>虽然 IP 数据报首部有源 IP 地址，但是路由器只根据目的站的 IP 地址进行转发</li><li>在链路层，只能看到 mac 帧，IP。数据报倍封装在 mac 帧中，mac 地址在不同网络中时，mac 帧内的源地址和目标地址会发生变化，具体表现为，对于每一次转发，其 mac 帧内的源地址和目标地址都会发生变化</li><li>考虑网络层时，可以是哟个统一的、抽象的 IP 地址来研究主机和主机或者路由器之间的通信</li></ul><h3 id="ARP-地址解析协议"><a href="#ARP-地址解析协议" class="headerlink" title="ARP(地址解析协议)"></a>ARP(地址解析协议)</h3><p>将网络层得到的 IP 地址转为下一跳的 mac 地址的过程(将 IP 地址映射到 mac 地址)</p><ul><li>当主机 A 需要向 主机 B 发送 IP 数据报时，首先根据主机 B 的 IP 的地址，在本机的 ARP 缓存中寻找是否有主机 B 的 IP 地址，如果有，则可以获取主机 B 的 mac 地址</li><li>如果没有主机 B 的 IP，则向本局域网上广播一个 ARP 请求</li><li>在本局域网上的所有主机运行的 ARP 进程都收到此 ARP 请求</li><li>ARP 进程查询本机的 IP 是否与请求的 IP 相同，如果相同，则向主机 A 发送 ARP 响应</li><li>主机 A 收到主机 B 的 ARP 响应后，将此 mac 地址和 IP 写入 ARP 缓存</li></ul><p>为什么<font color=red><strong>不直接使用 mac 地址进行通信</strong></font></p><p>全世界存在各种各样的异构网络，它们使用不同的硬件地址(网络的异构性体现），要使这些异构网络能够进行通信，就需要非常复杂的硬件地址转换工作，因此由用户主机来完成这件事几乎是不可能的，使用统一的IP地址，就使得所有的主机都在同一个IP网络内进行通信。</p><p>mac地址不具备归属地特征，不能作为地址</p><p>为什么<font color=red><strong>不直接使用 IP 地址进行通信</strong></font></p><ol><li>因为并非每个主机都一个公网IP,很多主机都是使用的内网IP，依据NAT对外访问</li><li>IP地址是动态变化的</li></ol><h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3><p><img src="/image/notebook/Computer-network/7.png" alt="IP 数据报格式"></p><ul><li>版本：占 4 位，指 IP 协议的版本。目前广泛使用的协议为 4 (即 IPv4)</li><li>首部长度：占 4 位，可表示最大十进制数值是 15，单位是 4 字节(32位)。首部长度必须是 4 字节的倍数。由于首部至少为 20 字节，所以首部长度至少为 5</li><li>区分服务：占 8 位，用来获得更好的服务。一般情况下不使用这个字段</li><li>总长度：占 16 位，指首部和数据之和的长度，单位是字节。所以数据报的最长长度位 65535 字节。通常是极少遇到的</li><li>标识：占 16 位，一个存在于 IP 软件中的计数器，每产生一个数据报，计数器就加一，并把此值赋给标识字段。当数据报因为过长而分片时，多个分片的标识符相同，便于接收方进行组装</li><li>标志：占 3 位，但是目前只有两位有意义<ul><li>MF(More Fragment)，最低位：MF = 1表示后面还有分片</li><li>DF(Don`t Fragment)，中间位：DF = 1表示不能分片</li></ul></li><li>片偏移：占13位，较长的数据报分片后，此片在原分组中的相对位置(不是序号)，以 8 个字节位单位。每个分片的长度也一定是 8 个字节的整数倍<blockquote><p>例如，一个数据报长度为 3820 字节，数据部分为 3800 字节，20字节的首部。分为 1400、1400、1000 四个片段，则每个片段的首部的偏移分别为 0、175($1400/8$)、350($2800/8$)</p></blockquote></li><li>生存时间(TTL)：占 8 位，当此数据报经过一次路由器时，TTL 会被减去1，当 TTL 等于 0 时，此数据报就会被丢弃</li><li>协议：表示数据报的协议类型。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常见的协议</th><th style="text-align:center">ICMP</th><th style="text-align:center">IGMP</th><th style="text-align:center">IP(一种特殊的数据报)</th><th style="text-align:center">TCP</th><th style="text-align:center">UDP</th><th style="text-align:center">IPv6</th></tr></thead><tbody><tr><td style="text-align:center">协议字段值</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">6</td><td style="text-align:center">17</td><td style="text-align:center">41</td></tr></tbody></table></div><ul><li>首部检验和：占 16 位。仅检验数据报首部的数据是否正确</li><li>源地址：占 32 位</li><li>目的地址：占 32 位</li><li>可变字段：很少被用到</li></ul><h3 id="IP-层的转发分组的流程"><a href="#IP-层的转发分组的流程" class="headerlink" title="IP 层的转发分组的流程"></a>IP 层的转发分组的流程</h3><ul><li>从数据报的首部提取目标主机的 IP 地址 D，得出目的网络地址位 N</li><li>若 N 就是与此路由器直接相连的某个网络地址，则直接交付</li><li>若路由表中有目的地址位 D 的特定主机路由，则将数据报交给下一跳的路由器</li><li>若路由表中有到达网络 N 的路由，则将数据报交给下一跳的路由器</li><li>若路由表中有默认的路由，则将数据报交给默认路由</li><li>报告分组出错</li></ul><h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h2><p>由于两级 IP 地址不够灵活，于是 IP 地址从原来的两级结构改为了通过子网掩码划分网络的 CIDR (无分类域间路由选择)模式，即 IP + 子网掩码的方式，不再有 A类、B类、C类的划分</p><p>即</p><script type="math/tex; mode=display">IP = 网络前缀 + 主机号</script><script type="math/tex; mode=display">网络前缀 = IP \space \& 子网掩码</script><p>通常可以使用“斜线记法”来表示 IP，即在 IP 地址后加上斜线，并写上网络前缀所占的位数</p><blockquote><p>例如 IP = 128.14.35.7/20 表示 128.14.35.7 的前 20 位作为网络前缀，剩下的作为主机号。即网络前缀为：128.14.32.0</p></blockquote><h3 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h3><p>由于使用了变长的子网掩码，导致路由表中会出现多个匹配的结果，此时应当选择匹配结果中具有最长网络前缀的路由</p><h3 id="子网的划分方法"><a href="#子网的划分方法" class="headerlink" title="子网的划分方法"></a>子网的划分方法</h3><ul><li>将需要的划分网络出的网络分割为最小的单元</li><li>不断合并最小单元，直到满足最大的网络</li><li>重复上述操作，直到所有网络都满足</li></ul><blockquote><p>例如，一个自治系统内有 5 个局域网，该自治系统分配到的 IP 地址块为 <code>218.75.230.0/24</code> 将此网络划分为 5 个子网，每个子网的设备数如下：9、28、15、13、4<br>首先将所有的子网的设备数加2后，向上取整至2的幂次倍数，然后再将所有值分割为最小值的 $k$ 次倍，假定最小值为 $2^n$，这里取 $n = 3$</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">设备数</th><th style="text-align:center">加2后</th><th style="text-align:center">取整后</th><th style="text-align:center">分割后</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">11</td><td style="text-align:center">16</td><td style="text-align:center">2个8</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">32</td><td style="text-align:center">4个8</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">15</td><td style="text-align:center">17</td><td style="text-align:center">32</td><td style="text-align:center">4个8</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">13</td><td style="text-align:center">15</td><td style="text-align:center">16</td><td style="text-align:center">2个8</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">4</td><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">1个8</td></tr></tbody></table></div><blockquote><p>总计需要 13 个 长度为 8 的子网<br>由于 IP 地址块为 <code>218.75.230.0/24</code>，即可以分配的位数为 $t = 32 - 24 = 8$ 位的字符，相当于可以划分出 $2^{t - n} = 32$ 个子网，每个子网可以容纳 $6$ 台设备，此时掩码为 <code>255.255.255.248</code> <script type="math/tex">248 = \begin{matrix}\underbrace{11111} \\ t个1 \end{matrix} \space \begin{matrix}\underbrace{000} \\ n个0 \end{matrix} = 11111000 = 248</script><br>可以分割整个 IP 地址块得到</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">网络号</th><th style="text-align:center">掩码</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">218.75.230.0</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">218.75.230.8</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">218.75.230.16</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">218.75.230.24</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">218.75.230.32</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">218.75.230.40</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">218.75.230.48</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">218.75.230.56</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">218.75.230.64</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">218.75.230.72</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">218.75.230.80</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">218.75.230.88</td><td style="text-align:center">255.255.255.248</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">218.75.230.96</td><td style="text-align:center">255.255.255.248</td></tr></tbody></table></div><blockquote><p>由于只需要 13 个子网，这里只罗列出前 13 个，实际上可以罗列出 32 个<br>按照设备数排序后划分子网得到（注意，合并后，掩码也要合并）</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">设备数</th><th style="text-align:center">加2后</th><th style="text-align:center">取整后</th><th style="text-align:center">分割后</th><th style="text-align:center">子网号</th><th style="text-align:center">子网掩码</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">28</td><td style="text-align:center">30</td><td style="text-align:center">32</td><td style="text-align:center">4个8</td><td style="text-align:center">218.75.230.0</td><td style="text-align:center">255.255.255.224</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">15</td><td style="text-align:center">17</td><td style="text-align:center">32</td><td style="text-align:center">4个8</td><td style="text-align:center">218.75.230.32</td><td style="text-align:center">255.255.255.224</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">13</td><td style="text-align:center">15</td><td style="text-align:center">16</td><td style="text-align:center">2个8</td><td style="text-align:center">218.75.230.64</td><td style="text-align:center">255.255.255.240</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">11</td><td style="text-align:center">16</td><td style="text-align:center">2个8</td><td style="text-align:center">218.75.230.80</td><td style="text-align:center">255.255.255.240</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">4</td><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">1个8</td><td style="text-align:center">218.75.230.96</td><td style="text-align:center">255.255.255.248</td></tr></tbody></table></div><h2 id="ICMP-网际控制报文协议-互联网控制消息协议"><a href="#ICMP-网际控制报文协议-互联网控制消息协议" class="headerlink" title="ICMP(网际控制报文协议/互联网控制消息协议)"></a>ICMP(网际控制报文协议/互联网控制消息协议)</h2><p>它用于网际协议（IP）中发送控制消息，提供可能发生在通信环境中的各种问题反馈。通过这些信息，使管理者可以对所发生的问题作出诊断，然后采取适当的措施解决</p><p><img src="/image/notebook/Computer-network/8.png" alt="ICMP报文格式"></p><p>ICMP报文类型</p><div class="table-container"><table><thead><tr><th style="text-align:center">报文类型</th><th style="text-align:center">类型值</th><th style="text-align:center">种类</th></tr></thead><tbody><tr><td style="text-align:center">终点不可达</td><td style="text-align:center">3</td><td style="text-align:center">差错报告报文</td></tr><tr><td style="text-align:center">时间超过</td><td style="text-align:center">11</td><td style="text-align:center">差错报告报文</td></tr><tr><td style="text-align:center">参数问题</td><td style="text-align:center">12</td><td style="text-align:center">差错报告报文</td></tr><tr><td style="text-align:center">改变路由</td><td style="text-align:center">5</td><td style="text-align:center">差错报告报文</td></tr><tr><td style="text-align:center">回送请求和回答</td><td style="text-align:center">8或0</td><td style="text-align:center">询问报文</td></tr><tr><td style="text-align:center">时间戳请求和回答</td><td style="text-align:center">13或14</td><td style="text-align:center">询问报文</td></tr></tbody></table></div><p>不应发送 ICMP 差错报文的类型</p><ul><li>对 ICMP 差错报告报文，不再发送 ICMP 差错报告报文</li><li>对非第一个分片的数据报片，不发送 ICMP 差错报告报文</li><li>对具有多播地址的数据报，不发送 ICMP 差错报告报文</li><li>对具有特殊地址的数据报(127.0.0.0或0.0.0.0)，不发送 ICMP 差错报告报文</li></ul><h3 id="ICMP-的应用"><a href="#ICMP-的应用" class="headerlink" title="ICMP 的应用"></a>ICMP 的应用</h3><ul><li>PING：ping 使用了 ICMP 回送请求与回送回答报文，ping 没有通过 TCP 或者 UDP</li><li>traceroute：路由跟踪，利用了 ICMP 时间超过，通过设置 TTL 来发送一系列报文，获取源主机和目标主机之间的路由线路</li></ul><h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><p>路由表中的路由是如何动态更新获取的</p><h3 id="理想的路由算法"><a href="#理想的路由算法" class="headerlink" title="理想的路由算法"></a>理想的路由算法</h3><ul><li>算法必须是正确的完整的</li><li>算法在计算上应简单</li><li>算法应能适应通信量和网络拓扑的变化</li><li>算法应具有稳定性</li><li>算法应是公平的</li><li>算法应是最佳的</li></ul><h3 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h3><ul><li>内部网关协议IGP：在一个小的网络系统(AS)内的路由协议，常见的有 RIP和OSPF协议</li><li>外部网关协议EGP：不同网络系统内的路由协议，目前使用的最多的是 BGP 的版本4(BGP-4)</li></ul><h3 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h3><p>一个基于距离向量的路由选择协议</p><p>距离指的是跳数，每经过一次路由器则跳数加一，相邻的路由器的跳数为1，跳数最多为 15，超过 15 表示不可达。</p><p>RIP 协议会按照固定的时间间隔和相邻的路由器交换自己的路由表，经过若干次交换后，所有路由器都会得到当前网络中任意一个网络的最优的下一跳路由器地址</p><p>算法逻辑：</p><ul><li>对于来自地址为 X 的相邻路由器发送来的 RIP 报文，先将报文中的所有项目中的下一跳地址都改为 X，然后将所有的距离字段都加一</li><li>对于新的报文中的每一项，假定其目的网络为 N，距离为 d<ul><li>如果自己的路由表中没有目标网络为 N 的，则直接加入到自己的路由表中（从没有数据到有数据）</li><li>如果有目标网络为 N 的，且下一跳地址为 X 的，则直接替换此项（更新原来旧的数据）</li><li>如果有目标网络为 N 的，且下一跳地址不为 X 的，则用 d 与其进行比较，选择距离小的写入路由表（选择最优的）</li></ul></li><li>若一段时间内(3分钟)没有收到相邻的路由器的 RIP 包，则视为此路由器不可达，把其距离设定为 16</li></ul><p><img src="/image/notebook/Computer-network/9.png" alt="RIP报文格式"></p><p>RIP的报文由首部和路由部分组成</p><ul><li>首部：占 4 个字节，其中的命令字段指出报文的意义，1 表示请求路由信息，2 对请求的路由信息的响应或未被请求而发出的路由更新报文。首部后面的全 0 用于凑足 4 个字节，对齐</li><li>路由部分：路由部分由若干个路由信息组成，每个路由信息需要 20 个字节，最多一次可以传输 25 个路由信息<ul><li>协议标记(地址族标识符、地址类别)表示所使用的地址协议，如果采用 IP 地址则此字段为 2</li><li>路由标记填入自治系统号 ASN(此字段考虑的是如果非 RIP 路由器发送的信息时，可以进行区别)</li><li>网络地址</li><li>子网掩码</li><li>下一跳的路由器地址</li><li>度量值：到此网络的距离</li></ul></li></ul><p>RIP 协议的优点：实现简单，开销小，使用 UDP<br>RIP 协议的问题：但是 RIP 能使用的最大距离为 15，限制了网络的规模。当网络出现故障时，要经过比较长的时间才能将此信息传递到所有的路由器(好消息传播得快，坏消息传播的慢)</p><h3 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h3><p>开放最短路径优先协议</p><p>使用分布式的链路状态协议，所有路由器都拥有整个网络的拓扑结构图</p><ul><li>使用洪泛法向本网络中的所有路由器发送信息</li><li>发送的信息是本路由器相邻的所有路由器的链路状态，以及该链路的度量（费用、距离、时延、带宽等）</li><li>只有链路状态发生变化时，路由器才向所有路由器发送此信息</li></ul><p>特点</p><ul><li>所有路由器最终都能获得本网络中的整个路由器拓扑图</li><li>链路状态路由器更新速度快，收敛快</li></ul><p>有时为了能够解决大型网络拓扑图太大的问题，OSPF 可以将网络划分为多个不同的区域，每个路由器仅知道本区域内的拓扑情况，区域之间通过区域边界路由器进行交互</p><p>OSPF 不使用 UDP 而是直接用 IP 数据报传送，减少信息的通信量</p><p><img src="/image/notebook/Computer-network/10.png" alt="OSPF报文结构"></p><ul><li>版本：当前的版本号为 2</li><li>类型<ul><li>问候(Hello)：用来发现和维持邻站的可达性，每隔 10 秒钟交换一次，如果 40 秒内没有发生交换，则认为此路由器不可达，更新数据库并且向其他路由器进行报告</li><li>数据库描述(Database Description)：向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息</li><li>链路状态请求(Link State Request)：向对方请求发送某些链路状态项目的详细信息</li><li>链路状态更新(Link State Update)：用洪泛法对全网更新</li><li>链路状态确认(Link State Acknowledgment)：对链路更新的确认</li></ul></li><li>分组长度：包括 OSPF 首部在内的分组长度，以字节为单位</li><li>路由器标识符：标志发送该分组的路由器的接口的 IP 地址</li><li>区域标识符：分组属于的区域的标识符</li><li>检验和：用来检测分组中的出错</li><li>鉴别类型：目前只有两种，0 和 1</li><li>鉴别：鉴别类型为 0 时就填入 0，鉴别类型为 1 则填入 8 个字节的口令</li></ul><p>OSPF的特点</p><ul><li>允许管理员给每条线路指派不同的代价，使得 OSPF 相对灵活</li><li>如果到达同一个网络有多条相同代价的路径，那么可以将通信量分配给这几条路径，使得负载平衡</li><li>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能，保证了仅在可信赖的路由器之间交换链路状态信息</li><li>OSPF 支持可变长度的子网划分和无分类的编址 <a href="#划分子网">CIDR</a></li><li>由于网络中的链路状态经常发生变化，所以链路状态会带上一个 32 位的序号，序号越大状态越新</li></ul><h3 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h3><p>边界网关协议(BGP)采用路径向量(path vector)路由选择协议。协议交换路由信息节点数量级是自治系统个数的数量级。刚开始运行时，BGP的邻站是交换整个的BGP路由表。但以后只需要在发生变化时更新有变化的部分。</p><p><img src="/image/notebook/Computer-network/11.png" alt="ISP"></p><ul><li>标记：16字节长，用来鉴别收到的 BGP 报文。若不适用鉴别时，应当全为 1</li><li>长度：包括通用首部在内的整个 BGP 报文的长度，以字节为单位</li><li>类型<ul><li>OPEN：打开，用来和另一个 BGP 路由器建立关系</li><li>UPDATE：更新，用来通知某一路由的信息，以及列出要撤销的多条路由</li><li>KEEPALIVE：保活，用来周期性验证邻站的连通性</li><li>NOTIFICATION：通知，用来发送检测到的错误</li></ul></li><li>报文：<ul><li>OPEN<ul><li>版本：1字节，现在为 4</li><li>本自治系统号：2字节，全球唯一</li><li>保持时间：2字节</li><li>BGP 标识符：4个字节，通常为此路由器的 IP 地址</li><li>可选参数长度：1字节</li><li>可选参数</li></ul></li><li>UPDATE<ul><li>不可行路由长度：2字节</li><li>撤销的路由</li><li>路径属性总长度：2字节</li><li>路径属性</li><li>网络层可达性信息(NLRI)</li></ul></li><li>KEEPALIVE：无报文部分</li><li>NOTIFICATION<ul><li>差错代码：1字节</li><li>差错子代码：1字节</li><li>差错数据</li></ul></li></ul></li></ul><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>路由选择和分组转发</p><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><font color=red>IPv6 的长度为 128 位，而 IPv4 仅 32 位</font><p>IPv4至IPv6的变化：</p><ul><li>更大的地址空间</li><li>扩展的地址层次结构</li><li>灵活的首部格式</li><li>改进的选项</li><li>允许的协议继续扩充</li><li>支持即插即用，不需要 DHCP 进行 IP 分配</li><li>支持资源的预分配</li><li>IPv6 首部改为 8 字节对齐</li></ul><h2 id="IP-多播"><a href="#IP-多播" class="headerlink" title="IP 多播"></a>IP 多播</h2><p>实现一对多通信，主机只需要发送一个数据报，路由器负责复制数据报</p><ul><li>在目的地址中使用多播的标识符(D类地址)，来标识一个多播组</li><li>尽最大努力交付，不保证一定能交付</li><li>首部中的协议字段值为 2，表示使用 IGMP(网际组管理协议)</li><li>不产生 ICMP 差错报文</li><li>无法 Ping 通</li></ul><h3 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h3><p>略</p><h2 id="虚拟专用网络-VPN-和网络地址转换-NAT"><a href="#虚拟专用网络-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网络(VPN)和网络地址转换(NAT)"></a>虚拟专用网络(VPN)和网络地址转换(NAT)</h2><p>IP 地址中有一部分被指定为专有地址。当使用的是专有地址时，说明此地址并非是互联网上的地址，而是本地局域网(专用网)内的地址</p><ul><li><code>10.0.0.0</code> 至 <code>10.255.255.255</code></li><li><code>172.16.0.0</code> 至 <code>172.31.255.255</code></li><li><code>192.168.0.0</code> 至 <code>192.168.255.255</code></li></ul><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>由于这些地址是专有地址，无法直接在互联网上访问到，所以可以使用 VPN 技术来实现内网的访问。VPN的数据在互联网段是加密数据，所以效果上和真正的专用网一样。</p><ul><li>内联网：两个地区的专用网进行连接</li><li>远程接入VPN：在互联网上的主机访问在专用网内的主机</li></ul><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>每个专用网拥有至少一个互联网的 IP 地址，当专用网内的主机需要和互联网通信时，通过此专用网的 IP 地址和不同端口来临时当作主机的 IP，实现对互联网的访问</p><h2 id="多协议标志交换-MPLS"><a href="#多协议标志交换-MPLS" class="headerlink" title="多协议标志交换(MPLS)"></a>多协议标志交换(MPLS)</h2><p>略</p><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="运输层的协议概述"><a href="#运输层的协议概述" class="headerlink" title="运输层的协议概述"></a>运输层的协议概述</h2><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><p>运输层使得两台主机之间的交互细化到应用程序的进程</p><p>运输层的一个很重要的功能：复用和分用</p><ul><li>复用：发送方不同的应用进程都可以使用同一个运输层协议传输数据</li><li>分用：接收方的运输层在剥去报文的首部后，能够把这些数据正确交付目的应用程序</li></ul><h3 id="两个主要协议"><a href="#两个主要协议" class="headerlink" title="两个主要协议"></a>两个主要协议</h3><ul><li>UDP(用户数据报协议)：不需要连接，不提供可靠交互。但在某些情况下却是一种最有效的工作方式</li><li>TCP(传输控制协议)：在传输数据之前必须先建立连接，数据传送结束后，要释放连接，不提供广播或多播服务。提供可靠的、面向连接的运输服务，增加了许多开销</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">应用</th><th style="text-align:center">应用层协议</th><th style="text-align:center">运输层协议</th></tr></thead><tbody><tr><td style="text-align:center">名字转换</td><td style="text-align:center">DNS(域名服务器)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">文件传送</td><td style="text-align:center">TFTP(简单文件传送协议)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">路由选择协议</td><td style="text-align:center">RIP(路由信息协议)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">IP 地址配置</td><td style="text-align:center">DHCP(动态主机配置协议)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">网络管理</td><td style="text-align:center">SNMP(简单网络管理协议)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">远程文件服务器</td><td style="text-align:center">NFS(网络文件系统)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">IP 电话</td><td style="text-align:center">专用协议</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">流式多媒体通话</td><td style="text-align:center">专用协议</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">多播</td><td style="text-align:center">IGMP(网际组管理协议)</td><td style="text-align:center">UDP</td></tr><tr><td style="text-align:center">电子邮件</td><td style="text-align:center">SMTP(简单邮件传送协议)</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">远程终端接入</td><td style="text-align:center">TELNET(远程终端协议)</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">万维网</td><td style="text-align:center">HTTP(超文本传送协议)</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">文件传送</td><td style="text-align:center">FTP(文件传送协议)</td><td style="text-align:center">TCP</td></tr></tbody></table></div><h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3><p>将不同的应用程序绑定至不同的端口，通过端口来区别不同的应用程序。系统同时拥有 65535 个不同的端口</p><ul><li>服务器端使用的端口号<ul><li>熟知端口号：数值范围为 0-1023 的端口</li><li>登记端口号：数值范围在 1024-49151 的端口</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">应用程序</th><th style="text-align:center">端口号</th></tr></thead><tbody><tr><td style="text-align:center">FTP</td><td style="text-align:center">21</td></tr><tr><td style="text-align:center">TELNET</td><td style="text-align:center">23</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">DNS</td><td style="text-align:center">53</td></tr><tr><td style="text-align:center">TFTP</td><td style="text-align:center">69</td></tr><tr><td style="text-align:center">HTTP</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">SNMP</td><td style="text-align:center">161</td></tr><tr><td style="text-align:center">SNMP(trap)</td><td style="text-align:center">162</td></tr><tr><td style="text-align:center">HTTPS</td><td style="text-align:center">443</td></tr></tbody></table></div><ul><li>客户端使用的端口号：数值范围为 49152-65535 临时的端口号</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="UDP-概述"><a href="#UDP-概述" class="headerlink" title="UDP 概述"></a>UDP 概述</h3><ul><li>UDP 是无连接的</li><li>UDP 尽最大的努力交付</li><li>UDP 是面向报文的</li><li>UDP 没有拥塞控制</li><li>UDP 支持一对一、一对多、多对一、多对多的交互通信</li><li>UDP 的首部开销小</li></ul><h3 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h3><p><img src="/image/notebook/Computer-network/12.png" alt="UDP首部格式"></p><ul><li>源端口：源端口号。需要对方回信时使用，不需要时可全为 0</li><li>目的端口：目的端口号。这在终点交付报文时必须使用</li><li>长度：UDP 用户数据报的长度，其最小值为 8（仅有首部）</li><li>检验和：检验 UDP 用户数据报在传输中是否有错</li></ul><h2 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP(传输控制协议)"></a>TCP(传输控制协议)</h2><h3 id="TCP特点"><a href="#TCP特点" class="headerlink" title="TCP特点"></a>TCP特点</h3><ul><li>面向连接的运输层协议</li><li>每条 TCP 只能连接两个端点，即{(IP1, 端口1), (IP2，端口2)}</li><li>提供可靠交付的服务</li><li>提供全双工通信</li><li>面向字节流</li></ul><h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><ul><li>超时重传：当发送端发送的数据后，需要等待接收端发送确认收到报告，如果在一段时间内没有收到确认收到报告，则重新发送数据</li><li>暂存已发送的副本：发送端发送了一个分组后，需要暂时保留已发送的分组的副本，同时对所有分组和确认分组进行编号，只有在收到了对应的编号的确认，才可以删除此副本</li><li>确认迟到：当收到重复的分组时，需要丢弃，但仍然需要向发送端发送确认收到</li><li>滑动窗口协议：可以连续发送多个分组，每收到一个请求就可以将滑动窗口向前滑动。而接收方采用累积确认，对按序到达的最后一个分组进行确认，不再对所有有分组进行确认</li></ul><p>以上的逻辑称为自动重传请求(ARQ)</p><h2 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h2><p><img src="/image/notebook/Computer-network/13.png" alt="TCP首部格式"></p><p><em>TCP报文段首部的前20个字节是固定的</em></p><ul><li>源端口和目的端口：各占2个字节，表示源端口号和目的端口号，与 UDP 相似</li><li>序号：占4个字节，表示当前数据部分中，第一个字节在整个数据流中的位置</li><li>确认号：占4个字节，是期望收到对方下一个报文段的第一个数据字节的序号。若确认号为 N，则序号 N - 1 为止的所有数据都已经收到了</li><li>数据偏移：占4位，表示TCP首部的长度，单位为 32 位(4字节)，最大值为 15，所以TCP首部最大为 60 字节</li><li>保留：占6位，保留为今后使用，但目前为0</li><li>Flag标记：占6位<ul><li>URG(紧急)：表示此数据应当紧急发送</li><li>ACK(确认)：在建立连接后的所有报文段都必须把 ACK 置为 1</li><li>PSH(推送)：很少使用，希望对方的应用程序尽快处理</li><li>RST(复位)：释放连接，拒绝打开连接</li><li>SYN(同步)：和 ACK 一起配合来实现连接的建立和释放</li><li>FIN(终止)：释放连接</li></ul></li><li>窗口：占2个字节，表示发送本报文的主机的接受数据缓存空间，指明了现在允许对方发送的数据量</li><li>检验和：占2个字节，检验和字段检验的范围包括首部和数据</li><li>紧急指针：占2个字节，仅 URG 为 1 时有意义，指出本报文段中紧急的数据字节数</li><li>选项：长度可变，最长为 40 字节，且必须是 4 字节的整数倍<ul><li>MSS：数据字段长度，默认为 536 字节</li></ul></li></ul><h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h3 id="以字节为单位的滑动窗口"><a href="#以字节为单位的滑动窗口" class="headerlink" title="以字节为单位的滑动窗口"></a>以字节为单位的滑动窗口</h3><p><img src="/image/notebook/Computer-network/14.png" alt="TCP窗口"></p><p>TCP 的滑动窗口是以字节为单位的，滑动窗口内的所有数据包会一次性发送出去，窗口内的数据表示已经发送但是未被确认。假定主机 A 收到的来自主机 B 的确认包的 ACK 为 36，那么滑动窗口将会前移至 36</p><h3 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h3><p>基于 <a href="#往返时间-RTT">RTT</a>，定义一个值 <script type="math/tex">RTT_S</script>，此值基于新的 RTT 不断更新，更新公式如下：</p><script type="math/tex; mode=display">RTT_S = (1 - \alpha) \times (RTT_S) + \alpha \times RTT</script><p>通常 $\alpha = 0.125$</p><p>所以定义超时重传时间</p><script type="math/tex; mode=display">RTO = RTT_S + 4 \times RTT_D</script><p>其中 $RTT_D$ 为 $RTT$ 的偏差的加权平均值，其公式如下</p><script type="math/tex; mode=display">\begin{cases}RTT_D = RTT / 2，第一次 \\RTT_D = (1 - \beta) \times RTT_D + \beta \times |RTT_S - RTT|, 后续的情况\end{cases}</script><p>通常 $\beta = 0.25$</p><h3 id="选择确认-SACK"><a href="#选择确认-SACK" class="headerlink" title="选择确认 SACK"></a>选择确认 SACK</h3><p>略</p><h2 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h2><p>TCP 流量控制让发送方发送速率不要太快，要让接收方有足够的缓存来接受数据</p><p><img src="/image/notebook/Computer-network/15.png" alt="TCP流量控制"></p><p>如图中所示，通过 TCP 数据结构中的窗口，实现双方的流量的控制。接收方(R)在发送确认包的同时，将当前的缓存空间发送给发送方(T)，使得双方能够控制传输的速度。而当程序将收到的数据读出后，再将新的空间剩余发送给发送方</p><p>TCP 零窗口死锁：当图片中第五个数据包因为意外丢失时，发送方(T) 一直在等待接收方(R) 发送的新的窗口信息，而接收方(R)也一直在等待发送方(T)发送新的数据，导致了死锁<br>解决办法：为每个连接设有一个持续计时器。当连接的一方收到对方的零窗口通知时，就启动计时器，在计时器到达一定的时间内，就发送一个零窗口探测报文段，而对方如果再次回复零窗口，则重置计时器，如果回复的不是零窗口，则死锁解开</p><h3 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h3><p>略</p><h2 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h2><p>拥塞控制就是防止过多的数据注入到网络中，这样可以使得网络中的路由器或链路不致过载。</p><p>主要是两类控制：</p><ul><li>开环控制：在设计网络时就将有关拥塞的因素考虑周全，力求网络在工作时不会产生拥塞</li><li>闭环控制<ul><li>基于反馈环路，监测网络系统以便在检测到拥塞在何时何处发生</li><li>把拥塞的信息传送到可采取行动的地方</li><li>调整网络的运行以解决出现的问题</li></ul></li></ul><h3 id="实现拥塞控制的四个方法"><a href="#实现拥塞控制的四个方法" class="headerlink" title="实现拥塞控制的四个方法"></a>实现拥塞控制的四个方法</h3><h4 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h4><ul><li>发送方设定一个发送窗口(cwnd)，即每次发送的数据不能大于发送窗口的数据(可以认为是 TCP 的滑动窗口)</li><li>开始时，发送窗口的大小设定为一个很小的值</li><li>每当发送方收到一个来自接收方的确认包时，就增大此窗口的大小</li><li>每当出现拥塞(超时)时，就将此窗口再次调整为很小的初始值</li></ul><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><ul><li>设定一个窗口的极大值(ssthresh)，当窗口的大小超过此极大值时，无论接受到多少个确认包，每次缓慢的增加窗口大小</li><li>出现拥塞时，将此极大值设置为当前窗口的一半</li></ul><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><ul><li>要求接收方不论收到什么数据，都要发送确认包，确认包只确认连续的数据包的最后一项</li><li>发送方遇到连续三次相同的确认，但是没有出现确认超时的情况(收到了确认但是并非是正确的确认信息)，则认为在网络中出现了丢失数据包的情况，则立刻进行重传丢失的数据包</li></ul><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><ul><li>在出现只丢失部分数据包的情况下，即出现快重传的情况时，不会将窗口设置为初始值，而是仅仅将窗口的大小减半，同时极大值设置为当前窗口的一半</li></ul><p><img src="/image/notebook/Computer-network/16.png" alt="TCP拥塞控制1"></p><p><img src="/image/notebook/Computer-network/17.png" alt="TCP拥塞控制2"></p><p><em>图中，0-1的过程为慢开始，1-2的过程即为拥塞避免，2-3的过程中出现了数据包确认超时，4-5的过程中发生了快重传和快恢复</em></p><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><p>连接的三个阶段</p><ul><li>连接建立</li><li>数据传送</li><li>连接释放</li></ul><p>三个问题</p><ul><li>要使每一方能够确知对方的存在</li><li>要允许双方协商一些参数</li><li>能够对运输实体资源进行分配</li></ul><h3 id="TCP-的连接建立"><a href="#TCP-的连接建立" class="headerlink" title="TCP 的连接建立"></a>TCP 的连接建立</h3><p><img src="/image/notebook/Computer-network/18.png" alt="TCP三次握手"></p><ul><li>客户端(A) 和 服务器(B) 都处于 CLOSED(关闭) 状态</li><li>B 创建传输控制模块，进入 LISTEN(收听) 状态</li><li>A 创建传输控制模块，向 B 发送TCP连接请求，此报文中 SYN=1，且 seq=J，A 进入 SYN-SENT(同步已发送)</li><li>B 接收到请求，如果同意建立连接，则向 A 发送数据包，此报文中 SYN=1，ACK=1，且 ack=J+1，seq=K，进入 SYN-RCVD(同步收到)</li><li>A 收到 B 的确认后，再次给 B 发送确认数据包，此报文中 ACK=1，且ack=K+1，进入 ESTABLISHED(已建立连接)</li><li>B 收到 A 的确认后，也进入 ESTABLISHED(已建立连接)</li></ul><h3 id="TCP-的连接释放"><a href="#TCP-的连接释放" class="headerlink" title="TCP 的连接释放"></a>TCP 的连接释放</h3><p>略</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="DNS-域名服务器"><a href="#DNS-域名服务器" class="headerlink" title="DNS(域名服务器)"></a>DNS(域名服务器)</h2><ul><li>功能：将域名转换为 IP 地址</li><li><p>域名结构：从域名的最后一个单词开始，通过 <code>.</code> 来分割，表示了“顶级域名”、“二级域名”、“三级域名”。例如对于域名：<code>mail.google.com</code>，顶级域名为：<code>com</code>，二级域名：<code>google</code>，三级域名：<code>mail</code>。无论域名内容是什么，一定是按照此逻辑进行分配。例如域名：<code>mail.zjgsu.edu.cn</code>的顶级域名为：<code>cn</code>，二级域名为：<code>edu</code>，三级域名为：<code>zjgsu</code>，四级域名：<code>mail</code></p><p>DNS 的<font color=red>递归</font>查询过程见<a href="https://hukeqing.github.io/2020/12/26/notebook/Computer-network-experiment/#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1-DNS">计算机网络实验复习</a></p></li></ul><p>递归是用户只向本地DNS服务器发出请求，然后等待肯定或否定答案。而迭代是本地服务器向根DNS服务器发出请求，而根DNS服务器只是给出下一级DNS服务器的地址，然后本地DNS服务器再向下一级DNS发送查询请求直至得到最终答案</p><h2 id="FTP-文件传送协议"><a href="#FTP-文件传送协议" class="headerlink" title="FTP(文件传送协议)"></a>FTP(文件传送协议)</h2><p>提供文件的交互式访问</p><ul><li>语序客户指明文件的类型与格式</li><li>允许文件具有存储权限</li><li>输入有效的口令</li><li>屏蔽了各计算机系统的细节</li></ul><h3 id="TFTP-简单文件传送协议"><a href="#TFTP-简单文件传送协议" class="headerlink" title="TFTP(简单文件传送协议)"></a>TFTP(简单文件传送协议)</h3><p>略</p><h2 id="TELNET-远程终端协议"><a href="#TELNET-远程终端协议" class="headerlink" title="TELNET(远程终端协议)"></a>TELNET(远程终端协议)</h2><p>明文的远程终端协议，<font color=red>目前通常使用 ssh(Secure Shell 加密的网络传输协议) 来代替 TELNET</font></p><h2 id="WWW-万维网"><a href="#WWW-万维网" class="headerlink" title="WWW(万维网)"></a>WWW(万维网)</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>明文传输的超文本传输协议，由于是明文传输，很容易受到中间人攻击，植入广告</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>加密传输的超文本传输协议，不会被中间人攻击</p><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="SMTP-简单邮件传送协议"><a href="#SMTP-简单邮件传送协议" class="headerlink" title="SMTP(简单邮件传送协议)"></a>SMTP(简单邮件传送协议)</h3><h3 id="IMAP和POP3-邮件接受协议"><a href="#IMAP和POP3-邮件接受协议" class="headerlink" title="IMAP和POP3(邮件接受协议)"></a>IMAP和POP3(邮件接受协议)</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作位置</th><th style="text-align:center">操作内容</th><th style="text-align:center">IMAP</th><th style="text-align:center">POP3</th></tr></thead><tbody><tr><td style="text-align:center">收件箱</td><td style="text-align:center">阅读、标记、移动、删除等操作</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr><tr><td style="text-align:center">发件箱</td><td style="text-align:center">保存到已发送</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr><tr><td style="text-align:center">创建文件夹</td><td style="text-align:center">新建自定义文件夹</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr><tr><td style="text-align:center">草稿</td><td style="text-align:center">保存草稿</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr><tr><td style="text-align:center">垃圾文件夹</td><td style="text-align:center">接受并移入垃圾文件夹的邮件</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr><tr><td style="text-align:center">广告邮件</td><td style="text-align:center">接受并移入广告邮件夹的邮件</td><td style="text-align:center">客户端与邮件更新同步</td><td style="text-align:center">仅在客户端内</td></tr></tbody></table></div><h2 id="DHCP-动态主机配置协议"><a href="#DHCP-动态主机配置协议" class="headerlink" title="DHCP(动态主机配置协议)"></a>DHCP(动态主机配置协议)</h2><p>见<a href="https://hukeqing.github.io/2020/12/26/notebook/Computer-network-experiment/#%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE-DHCP">计算机网络实验复习</a></p><h1 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h1><ul><li><a href="#IPv6">IPv6长度为128位</a></li><li><a href="#CSMA-CD-协议-Carrier-Sense-Multiple-Access-with-Collision-Detection-载波侦听多路访问-碰撞检测">CSMACD载波侦听多路访问/碰撞检测</a></li><li><a href="#TELNET-远程终端协议">比 TELNET 更好的远程终端协议——SSH</a></li><li><a href="#电子邮件">发送邮件的协议为SMTP，接受为IMAP和POP3</a></li><li><a href="#物理层下面的传输媒体">光纤分为单模光纤和多模光纤</a></li><li><a href="#截断二进制指数退避">最短帧长</a></li><li><a href="#DNS-域名服务器">给出域名问主机名</a></li><li><a href="#数据链路层协议">最大传输单元MTU=1500字节</a></li><li><a href="#通信系统中的术语">曼切斯特编码</a></li><li><a href="#截断二进制指数退避">截断二进制指数退避算法</a></li><li><a href="#ARP-地址解析协议">ARP</a></li><li><a href="#ICMP-网际控制报文协议-互联网控制消息协议">ICMP</a></li><li><a href="#点对点协议PPP">零比特填充</a></li><li><a href="#WWW-万维网">浏览器访问植入广告原理</a></li><li><a href="#DNS-域名服务器">DNS解析过程</a></li><li><a href="#互联网的路由选择协议">路由表的构建</a></li><li><a href="#ARP-地址解析协议">为什么不使用mac地址作为通信地址</a></li><li><a href="#子网的划分方法">网络划分子网</a></li><li><a href="#IP-数据报的格式">IP数据报结构</a></li><li><a href="#可靠传输的工作原理">TCP可靠的实现</a></li><li><a href="#TCP-的连接建立">TCP三次握手</a></li><li>安全的 web 协议——HTTPS</li><li>不同 vlan 之间通讯需要第三层交换机</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>课程</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次 Navicat 连接 MySQL 一直报认证错误(Access denied)</title>
    <link href="/2021/01/02/develop-note/mysql-reset/"/>
    <url>/2021/01/02/develop-note/mysql-reset/</url>
    
    <content type="html"><![CDATA[<p><em>今天一时兴起，想在 WSL2 里下个 MySQL。方法也很简单，直接 <code>sudo apt install mysql-server</code></em><br><em>本来以为顺风顺水，结果却在 Navicat 连接 MySQL 的操作上出事了</em></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Navicat 无法连接上 MySQL</p><h3 id="配置情况"><a href="#配置情况" class="headerlink" title="配置情况"></a>配置情况</h3><p>Navicat Premium 15.0.19<br>MySQL 8.0.22<br>WSL2(Ubuntu 20)</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>终端可以通过<code>sudo mysql</code>连上 MySQL<br>终端不可以通过<code>mysql -u root -p</code>的方式连接，显示密码错误(<code>Access denied for user &#39;root&#39;@&#39;localhost&#39;</code>)<br>终端可以通过默认用户连接(默认用户为 <code>/etc/mysql/debian.cnf</code> 文件中的 <code>debian-sys-maint</code>，密码为安装MySQL时随机生成得到的)<br>Navicat不可以通过直接连接或者通过 ssh 的方式连接，显示密码错误(<code>Access denied for user &#39;root&#39;@&#39;localhost&#39;</code>)<br>Navicat可以通过默认用户连接</p><h3 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h3><h4 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h4><p>首先是尝试了百度的结果，重置 MySQL 的 root 账户的密码<br>因为可以通过<code>sudo mysql</code>直接进入数据库，也就不需要那么多百度出来的奇奇怪怪的操作了<br>直接进入数据库，然后尝试了下面几行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs mysql">use mysql;<br>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;newPassword&#39;;<br>exit<br></code></pre></td></tr></table></figure><br>然后，测试<code>mysql -u root -p</code>连接——<strong>失败</strong></p><h4 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h4><p>后来在MySQL官网找到了重置root密码的方法，然后赶紧拿来测试<br><a href="https://dev.mysql.com/doc/refman/8.0/en/resetting-permissions.html">官网链接</a><br>其中的一点提到</p><blockquote><p>B.3.3.2.2 Resetting the Root Password: Unix and Unix-Like Systems</p></blockquote><p>大致操作就是先终止 MySQL，然后使用 MySQL 的附加参数来设置一个初始化文件，然后使得 MySQL 去运行此文件。</p><p>然后，测试<code>mysql -u root -p</code>连接——<strong>失败</strong></p><p>其实觉得挺奇怪的，既然都能重启 MySQL 了，说明你已经拿到这个设备的 root 权限了，为什么不直接用 <code>sudo mysql</code> 进入直接run这条命令呢？</p><h4 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h4><p>最终我在一份不起眼的博客上找到了解决方案<br><a href="https://phoenixnap.com/kb/access-denied-for-user-root-localhost">博客连接</a><br>其中提到了一个很重要的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;insert_password&#39;;<br></code></pre></td></tr></table></figure></p><blockquote><p>This command changes the password for the user root and sets the authentication method to mysql_native_password. This is a traditional method for authentication, and it is not as secure as auth_plugin.</p></blockquote><p>其中的<code>mysql_native_password</code>是所谓的传统验证方案，也就是 Navicat 连接 MySQL 的解决方案</p><p>然后将方案1的命令稍作改正得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use mysql;<br>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;newPassword&#39;;<br>exit<br></code></pre></td></tr></table></figure><br>然后，测试<code>mysql -u root -p</code>连接——<strong>成功！</strong></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>mysql5.8开始将caching_sha2_password作为默认的身份验证插件，该caching_sha2_password和 sha256_password认证插件提供比mysql_native_password插件更安全的密码加密 ，并 caching_sha2_password提供了比更好的性能sha256_password。由于这些优越的安全性和性能特性 caching_sha2_password它是MySQL 8.0首选的身份验证插件，而且也是默认的身份验证插件而不是 mysql_native_password。此更改会影响服务器和libmysqlclient 客户端库；<font color=red>目前来说和经常使用的客户端软件兼容性不好</font>。</p><p>这也是导致目前 Navicat 无法连接到 MySQL 5.8及以后版本的原因。当然如此操作后的影响便是无法直接使用<code>sudo mysql</code>的方式连接到数据库，只能通过 <code>mysql -u root -p</code>的传统密码验证的方式来登陆</p>]]></content>
    
    
    
    <tags>
      
      <tag>短笔记</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络实验复习</title>
    <link href="/2020/12/26/notebook/Computer-network-experiment/"/>
    <url>/2020/12/26/notebook/Computer-network-experiment/</url>
    
    <content type="html"><![CDATA[<h1 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h1><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>A类线(T568A)颜色：白绿/绿/白橙/蓝/白蓝/橙/白棕/棕<br>B类线(T568B)颜色：白橙/橙/白绿/蓝/白蓝/绿/白棕/棕</p><h2 id="线"><a href="#线" class="headerlink" title="线"></a>线</h2><p>分为两种线：直连线和交叉线</p><p>直连线：线的两端使用的是相同类的线，即同时使用A类或者B类<br>交叉线：线的两端使用的是不同的线，一段为A类，一段为B类</p><h3 id="为什么有两种不同的线"><a href="#为什么有两种不同的线" class="headerlink" title="为什么有两种不同的线"></a>为什么有两种不同的线</h3><p>输入口和输出口的区别</p><p>如果使用的是直连线，则一段的输入端和另一端输入端的位置相同<br>而使用的是交叉线，则一段的输入端和另一端输入端的位置不同</p><h3 id="使用时间"><a href="#使用时间" class="headerlink" title="使用时间"></a>使用时间</h3><p>当一段为交换机，另一端不为交换机时，使用直连线<br>其他情况均使用交叉线</p><h1 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议(DHCP)"></a>动态主机配置协议(DHCP)</h1><p>用户利用有线或无线方式随机接入局域网，获得由DHCP服务器分配的临时IP地址</p><h2 id="分配过程"><a href="#分配过程" class="headerlink" title="分配过程"></a>分配过程</h2><ul><li>借助UDP协议、广播方式向局域网中所有DHCP服务器67端口发送DHCP搜索信息(DHCPDISCOVER)</li><li>每个DHCP服务器收到广播请求后回应一个有效IP地址，并对该IP地址进行锁定(DHCPOFFER)</li><li>客户机接受第一个回应的IP地址，并广播通知所有DHCP服务器确认接受。除分配该IP地址的服务器外，其他服务器解除对准备分配的IP地址的锁定，放回地址池(DHCPREQUEST)</li><li>被选中的DHCP服务器收到确认信息后，以广播方式答复确认信息(DHCPACK)</li></ul><h2 id="终止DHCP租借"><a href="#终止DHCP租借" class="headerlink" title="终止DHCP租借"></a>终止DHCP租借</h2><ul><li>超过服务器配置中所设置的时间，DHCP租借自动过期</li><li>未超过服务器配置中所设置的时间，客户机的TCP/IP配置中可进行手动终止。</li></ul><h1 id="域名解析服务-DNS"><a href="#域名解析服务-DNS" class="headerlink" title="域名解析服务(DNS)"></a>域名解析服务(DNS)</h1><p>域名解析系统，以符号名字代替纯数字（IP地址）对计算机进行标识。例如，将www.baidu.com解析为36.152.44.95</p><h2 id="域名分级"><a href="#域名分级" class="headerlink" title="域名分级"></a>域名分级</h2><p>例如：www.baidu.com<br>一级域名为：com<br>二级域名为：baidu<br>三级域名为：www</p><p>每一级域名的解析服务器(DNS)都知道其下一级域名的服务器的IP，同时也知道根服务器的IP</p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><ul><li>客户机（PC）向首选DNS服务器发起请求：“你知道www.baidu.com的IP吗？”如果首选DNS服务器知道（一般如果首选DNS服务器曾经解析过，那么会进行一段时间内的缓存，默认三天，如果正好在缓存时间内，那么首选服务器就会知道这个域名的IP）那么首选DNS 服务器就会直接给客户机返回域名的IP 地址</li><li>若首选DNS 服务器上没有相关信息，就不能直接返回域名的IP 地址，这时候，首选DNS 服务器就会去询问根DNS服务器（所有的 DNS 服务器都知道全球的 13 台DNS根服务器在哪里），根服务器可能不知道这个具体的 www.baidu.com 的IP地址，但是它知道一级域 com 的DNS服务器的IP（也就是说根服务器只负责维护所有的一级域，所以也就几百条数据在这里，虽然数据量少，但是它接受来自全球的请求，所以负载也很大）</li><li>根服务器将 com 的DNS服务器的IP地址返回给首选 DNS 服务器</li><li>首选DNS服务器再去请求 “com” DNS服务器：“你知道 www.baidu.com 的IP吗”，但是com DNS服务器也不知道 www.baidu.com 的IP，但是com 的DNS服务器知道 baidu.com 的IP</li><li>“com” 的DNS服务器将这个信息返回给首选 DNS 服务器</li><li>首选DNS服务器再去请求 “baidu.com” DNS服务器，这时候 baidu.com 服务器当然就会知道 www.baidu.com的IP地址</li><li>“baidu.com”DNS服务器将这个信息返回给首选DNS 服务器</li><li>首选DNS服务器将获取到的 www.baidu.com 的IP返回给客户机</li><li>客户机根据获取到的 www.baidu.com 的IP地址来访问WEB服务器</li><li>WEB服务器返回相关的数据</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">请求发起者</th><th style="text-align:center">请求接受者</th><th style="text-align:center">询问内容</th><th style="text-align:center">询问结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">PC</td><td style="text-align:center">默认DNS服务器</td><td style="text-align:center">www.baidu.com</td><td style="text-align:center">暂时不回答</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">默认DNS服务器</td><td style="text-align:center">根服务器</td><td style="text-align:center">www.baidu.com</td><td style="text-align:center">com的DNS服务器的IP</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">默认DNS服务器</td><td style="text-align:center">com 的DNS服务器</td><td style="text-align:center">www.baidu.com</td><td style="text-align:center">baidu.com 的DNS服务器的IP</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">默认DNS服务器</td><td style="text-align:center">baidu.com 的DNS服务器</td><td style="text-align:center">www.baidu.com</td><td style="text-align:center">www.baidu.com的IP</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">默认DNS服务器</td><td style="text-align:center">PC</td><td style="text-align:center"></td><td style="text-align:center">回答序号1的询问，即返回www.baidu.com的IP</td></tr></tbody></table></div><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>缓存：将查找到的新域名解析结果置于本地缓存，以提高域名解析响应速度</li><li>复制：根服务器存在多个副本，为客户机请求提供最快速的响应</li></ul><h1 id="Internet服务管理器-IIS"><a href="#Internet服务管理器-IIS" class="headerlink" title="Internet服务管理器(IIS)"></a>Internet服务管理器(IIS)</h1><h2 id="Web访问过程"><a href="#Web访问过程" class="headerlink" title="Web访问过程"></a>Web访问过程</h2><ul><li>输入想要访问的网站的域名或者IP</li><li>DNS 解析网站的域名得到 IP</li><li>访问对方的 IP 的80端口找到对方的 web 服务器上的对应的网页</li><li>将网页下载到本地</li><li>浏览器渲染页面并显示出来</li></ul><h2 id="FTP访问过程"><a href="#FTP访问过程" class="headerlink" title="FTP访问过程"></a>FTP访问过程</h2><ul><li>输入想要访问的FTP的域名或者IP</li><li>DNS 解析网站的域名得到 IP</li><li>访问对方的 IP 的21端口找到对方的 FTP 服务器上的对应的文件夹</li><li>打开FTP站点目录</li></ul><h1 id="交换机-Switch"><a href="#交换机-Switch" class="headerlink" title="交换机(Switch)"></a>交换机(Switch)</h1><p>工作在OSI参考模型的第二层，即数据链路层</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">名称</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">7</td><td style="text-align:center">应用层</td><td style="text-align:center">HTTP</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">表示层</td><td style="text-align:center">JPEG</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">会话层</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">传输层</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">网络层</td><td style="text-align:center">IP</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数据链路层</td><td style="text-align:center">mac</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">物理层</td></tr></tbody></table></div><p>通常交换机只能看到数据包的mac地址，并不知道数据包所要发往的IP地址</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h3><ul><li>mac 地址与电脑硬件(网卡)有关</li><li>是网卡的硬件地址，全球唯一</li></ul><h3 id="mac地址表"><a href="#mac地址表" class="headerlink" title="mac地址表"></a>mac地址表</h3><p>存放物理地址与交换机端口映射关系的数据库</p><h2 id="交换机工作原理"><a href="#交换机工作原理" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h2><h3 id="数据转发"><a href="#数据转发" class="headerlink" title="数据转发"></a>数据转发</h3><ul><li>数据包信息到达交换机</li><li>交换机根据数据包中封装的目的主机的MAC地址信息查找MAC地址表，同时根据源主机MAC地址信息更新自己的MAC地址表<ul><li>如果表中存在该目的主机的MAC地址，则从其对应的端口将数据包发送出去</li><li>如果表中不存在该目的主机的MAC地址，则将该数据包被<font color=red>泛洪</font>到所有端口</li></ul></li><li>目的主机PC2接收到数据包后，回复响应数据包给PC1，该过程与PC1发送数据包给PC2类似，但此时，PC2是源主机，PC1是目的主机</li><li>当PC2发送的响应数据包到达交换机时，交换机在转发数据包的同时，根据源主机MAC地址更新MAC地址表（在2.2的情况下，即在MAC地址表中添加一条PC2的MAC地址信息——MAC地址自动<font color=red>学习</font>）<h3 id="自动老化功能"><a href="#自动老化功能" class="headerlink" title="自动老化功能"></a>自动老化功能</h3></li><li>存在于MAC地址表中的MAC地址，如果长时间没有从该MAC地址收到包，则该MAC地址将被删除</li><li>当再次收到该MAC地址发送的包时，把该包作为广播包处理，重新学习</li></ul><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>交换机向MAC地址X转发数据包</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>交换机收到一个数据包，查表后发现该数据包的来源地址与目的地址属于同一网段。交换机将不处理该数据包</p><p>如果交换机的每个端口都只连接一台 PC，那么交换机会正常进行转发而不会进行过滤</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="note note-warning">            <p>所有<font color=green>绿色</font>内容都为需要根据实际情况填写</p>          </div><div class="table-container"><table><thead><tr><th style="text-align:center">原状态</th><th style="text-align:center">新状态</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">用户模式</td><td style="text-align:center">特权模式</td><td style="text-align:center">enable</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center">全局配置模式</td><td style="text-align:center">configure terminal</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">接口配置模式</td><td style="text-align:center">interface fa0/<font color=green>1</font></td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">多个接口配置模式</td><td style="text-align:center">interface range fa0/<font color=green>1</font> - <font color=green>10</font></td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">Vlan配置模式</td><td style="text-align:center">interface vlan <font color=green>1</font></td></tr><tr><td style="text-align:center">(多个)接口配置模式/Vlan配置模式</td><td style="text-align:center">全局配置模式</td><td style="text-align:center">exit</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">特权模式</td><td style="text-align:center">exit</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center">用户模式</td><td style="text-align:center">exit</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">用途</th><th style="text-align:center">命令行开头最后显示标志</th></tr></thead><tbody><tr><td style="text-align:center">用户模式</td><td style="text-align:center">实验课上无用</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center"><font color=red>查看</font>设备信息时使用</td><td style="text-align:center">#</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center"><font color=red>设置</font>设备信息时使用</td><td style="text-align:center">(config)#</td></tr></tbody></table></div><h2 id="交换机的命令列表"><a href="#交换机的命令列表" class="headerlink" title="交换机的命令列表"></a>交换机的命令列表</h2><h3 id="特权模式下"><a href="#特权模式下" class="headerlink" title="特权模式下"></a>特权模式下</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">show mac-address-table</td><td style="text-align:center">查看mac地址表</td></tr><tr><td style="text-align:center">show aging-time</td><td style="text-align:center">查看自动老化时间</td></tr><tr><td style="text-align:center">show vlan brief</td><td style="text-align:center">查看 vlan 列表</td></tr></tbody></table></div><h3 id="全局配置模式"><a href="#全局配置模式" class="headerlink" title="全局配置模式"></a>全局配置模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">hostname <font color=green>新的名字</font></td><td style="text-align:center">修改交换机名称</td></tr><tr><td style="text-align:center">mac-address-table static <font color=green>mac</font> vlan <font color=green>1</font> interface fa0/<font color=green>1</font></td><td style="text-align:center">新增一条静态路由绑定</td></tr><tr><td style="text-align:center">no mac-address-table static <font color=green>mac</font> vlan <font color=green>1</font> interface fa0/<font color=green>1</font></td><td style="text-align:center">删除一条静态路由绑定</td></tr><tr><td style="text-align:center">vlan <font color=green>1</font></td><td style="text-align:center">新建/配置一个Vlan</td></tr><tr><td style="text-align:center">no vlan <font color=green>1</font></td><td style="text-align:center">删除一个Vlan</td></tr><tr><td style="text-align:center">ip routing</td><td style="text-align:center">启用路由功能(仅三层交换机)</td></tr></tbody></table></div><h3 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">switchport mode access</td><td style="text-align:center">设置端口为普通端口</td></tr><tr><td style="text-align:center">switchport mode trunk</td><td style="text-align:center">设置端口为 trunk 口</td></tr><tr><td style="text-align:center">switchport access vlan <font color=green>1</font></td><td style="text-align:center">将端口设定为 vlan 1</td></tr><tr><td style="text-align:center">ip address <font color=green>IP</font> <font color=green>掩码</font></td><td style="text-align:center">设置当前Vlan的IP(仅在Vlan配置模式下使用，仅三层交换机可用)</td></tr></tbody></table></div><h1 id="路由器-Router"><a href="#路由器-Router" class="headerlink" title="路由器(Router)"></a>路由器(Router)</h1><h2 id="网络段计算公式"><a href="#网络段计算公式" class="headerlink" title="网络段计算公式"></a>网络段计算公式</h2><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">IP <span class="hljs-meta">&amp; 掩码</span><br></code></pre></td></tr></table></figure><blockquote><p>例如，IP为192.168.1.1，掩码为255.255.255.0<br>则其网络段为<br><code>11000000.10101000.00000001.00000001 &amp;</code><br><code>11111111.11111111.11111111.00000000 =</code><br><code>11000000.10101000.00000001.00000000</code><br>即，网络段为：192.168.1.0</p></blockquote><p>交换机只能交换同一个网络段的数据包，不能交换不同网络段的数据包</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><div class="table-container"><table><thead><tr><th style="text-align:center">原状态</th><th style="text-align:center">新状态</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">用户模式</td><td style="text-align:center">特权模式</td><td style="text-align:center">enable</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center">全局配置模式</td><td style="text-align:center">configure terminal</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">接口配置模式</td><td style="text-align:center">interface fa0/<font color=green>0</font></td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">子接口配置模式</td><td style="text-align:center">interface fa0/<font color=green>0</font>.<font color=green>1</font></td></tr><tr><td style="text-align:center">子接口配置模式</td><td style="text-align:center">全局配置模式</td><td style="text-align:center">exit</td></tr><tr><td style="text-align:center">接口配置模式</td><td style="text-align:center">全局配置模式</td><td style="text-align:center">exit</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center">特权模式</td><td style="text-align:center">exit</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center">用户模式</td><td style="text-align:center">exit</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">用途</th><th style="text-align:center">命令行开头最后显示标志</th></tr></thead><tbody><tr><td style="text-align:center">用户模式</td><td style="text-align:center">实验课上无用</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">特权模式</td><td style="text-align:center"><font color=red>查看</font>设备信息时使用</td><td style="text-align:center">#</td></tr><tr><td style="text-align:center">全局配置模式</td><td style="text-align:center"><font color=red>设置</font>设备信息时使用</td><td style="text-align:center">(config)#</td></tr><tr><td style="text-align:center">接口配置模式</td><td style="text-align:center"><font color=red>设置</font>单个具体的端口使用</td><td style="text-align:center">(config-if)#</td></tr></tbody></table></div><h2 id="路由器命令列表"><a href="#路由器命令列表" class="headerlink" title="路由器命令列表"></a>路由器命令列表</h2><h3 id="特权模式下-1"><a href="#特权模式下-1" class="headerlink" title="特权模式下"></a>特权模式下</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">show interface</td><td style="text-align:center">查看路由器端口信息</td></tr><tr><td style="text-align:center">show ip route</td><td style="text-align:center">查看路由信息</td></tr></tbody></table></div><h3 id="全局配置模式-1"><a href="#全局配置模式-1" class="headerlink" title="全局配置模式"></a>全局配置模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">hostname <font color=green>新的名字</font></td><td style="text-align:center">修改路由器名称</td></tr><tr><td style="text-align:center">ip route <font color=green>目标网段</font> <font color=green>掩码</font> <font color=green>下一个跳转的IP地址</font></td><td style="text-align:center">设置静态路由转发</td></tr></tbody></table></div><h3 id="配置模式-1"><a href="#配置模式-1" class="headerlink" title="配置模式"></a>配置模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">ip address <font color=green>IP</font> <font color=green>掩码</font></td><td style="text-align:center">设置路由器的此端口的IP和掩码</td></tr><tr><td style="text-align:center">no shutdown</td><td style="text-align:center">启用此端口</td></tr><tr><td style="text-align:center">encapsulation dot1Q <font color=green>Vlan号</font></td><td style="text-align:center">封装802.1Q(进入子端口的时候，封装此协议可以为此子端口设置IP)</td></tr></tbody></table></div><div class="note note-success">            <p>注意，别忘记给PC设置网关</p>          </div><h1 id="Ping-的返回结果含义"><a href="#Ping-的返回结果含义" class="headerlink" title="Ping 的返回结果含义"></a>Ping 的返回结果含义</h1><h2 id="Requesttimed-out-超时"><a href="#Requesttimed-out-超时" class="headerlink" title="Requesttimed out 超时"></a>Requesttimed out 超时</h2><ul><li>对方已关机</li><li>对方和我不在同一个网段</li><li>对方防火墙设置了ICMP数据包过滤</li><li>错误设置IP地址</li></ul><h2 id="Destinationhost-Unreachable-无法到达"><a href="#Destinationhost-Unreachable-无法到达" class="headerlink" title="Destinationhost Unreachable(无法到达)"></a>Destinationhost Unreachable(无法到达)</h2><ul><li>对方与自己不在同一网段内，而自己又未设置默认的路由(网关)</li><li>网线出了故障</li></ul><h2 id="BadIP-address-错误的IP"><a href="#BadIP-address-错误的IP" class="headerlink" title="BadIP address(错误的IP)"></a>BadIP address(错误的IP)</h2><ul><li>DNS服务器未设置</li><li>IP地址不存在</li></ul><h2 id="Sourcequench-received"><a href="#Sourcequench-received" class="headerlink" title="Sourcequench received"></a>Sourcequench received</h2><ul><li>对方或中途的服务器繁忙无法回应</li></ul><h2 id="Unknownhost-不知名主机"><a href="#Unknownhost-不知名主机" class="headerlink" title="Unknownhost(不知名主机)"></a>Unknownhost(不知名主机)</h2><p>该远程主机的名字不能被域名服务器（DNS）转换成IP地址</p><ul><li>域名服务器有故障</li><li>名字不正确</li><li>网络管理员的系统与远程主机之间的通信线路有故障</li></ul><h2 id="Noanswer"><a href="#Noanswer" class="headerlink" title="Noanswer"></a>Noanswer</h2><ul><li>中心主机没有工作</li><li>本地或中心主机网络配置不正确</li><li>本地或中心的路由器没有工作</li><li>通信线路有故障</li></ul><h1 id="网络协议分析"><a href="#网络协议分析" class="headerlink" title="网络协议分析"></a>网络协议分析</h1><h2 id="ARP-地址解析协议"><a href="#ARP-地址解析协议" class="headerlink" title="ARP(地址解析协议)"></a>ARP(地址解析协议)</h2><ul><li>工作在数据链路层</li><li>将IP地址转化成物理地址(mac)</li></ul><blockquote><p>在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。</p><p>另外，当发送主机和目的主机不在同一个局域网中时，即便知道对方的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。这种情况称为委托ARP或ARP代理（ARP Proxy）。</p></blockquote><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>有目的主机IP地址对应的MAC地址，直接转发</li><li>没有目的主机IP地址对应的MAC地址，在本网段发起ARP请求广播包进行查询</li><li>根据源主机的MAC地址信息，更新ARP列表</li></ul><h3 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h3><div class="table-container"><table><thead><tr><th style="text-align:center">长度(位)</th><th style="text-align:center">48</th><th style="text-align:center">48</th><th style="text-align:center">16</th><th style="text-align:center">16</th><th style="text-align:center">16</th><th style="text-align:center">8</th><th style="text-align:center">8</th><th style="text-align:center">16</th><th style="text-align:center">48</th><th style="text-align:center">32</th><th style="text-align:center">48</th><th style="text-align:center">32</th></tr></thead><tbody><tr><td style="text-align:center">数据类型</td><td style="text-align:center">目标以太网地址</td><td style="text-align:center">源以太网地址</td><td style="text-align:center">帧类型</td><td style="text-align:center">硬件类型</td><td style="text-align:center">协议类型</td><td style="text-align:center">硬件地址长度</td><td style="text-align:center">协议地址长度</td><td style="text-align:center">操作码</td><td style="text-align:center">源硬件地址</td><td style="text-align:center">源协议地址</td><td style="text-align:center">目标硬件地址</td><td style="text-align:center">目标协议地址</td></tr><tr><td style="text-align:center">英文名</td><td style="text-align:center">DEST ADDR</td><td style="text-align:center">SRC ADDR</td><td style="text-align:center">TYPE</td><td style="text-align:center">HARDWARE TYPE</td><td style="text-align:center">PROTOCOL TYPE</td><td style="text-align:center">HLEN</td><td style="text-align:center">PLEN</td><td style="text-align:center">OPCODE</td><td style="text-align:center">SOURCE MAC</td><td style="text-align:center">SOURCE IP</td><td style="text-align:center">TARGET MAC</td><td style="text-align:center">TARGET IP</td></tr><tr><td style="text-align:center">ARP(请求)</td><td style="text-align:center">FF:FF:FF:FF:FF:FF</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0x0001</td><td style="text-align:center">0x0800</td><td style="text-align:center">0x06</td><td style="text-align:center">0x04</td><td style="text-align:center">0x0001</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0000.0000.0000</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">ARP(回复)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0x0001</td><td style="text-align:center">0x0800</td><td style="text-align:center">0x06</td><td style="text-align:center">0x04</td><td style="text-align:center">0x0002</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><ul><li>硬件类型：如以太网（0x0001）、分组无线网</li><li>协议类型：如网际协议(IP)（0x0800）、IPv6（0x86DD）</li><li>硬件地址长度：每种硬件地址的字节长度，一般为6（以太网）</li><li>协议地址长度：每种协议地址的字节长度，一般为4（IPv4）</li><li>操作码：1为ARP请求，2为ARP应答，3为RARP请求，4为RARP应答</li><li>源硬件地址：n个字节，n由硬件地址长度得到，一般为发送方MAC地址</li><li>源协议地址：m个字节，m由协议地址长度得到，一般为发送方IP地址</li><li>目标硬件地址：n个字节，n由硬件地址长度得到，一般为目标MAC地址</li><li>目标协议地址：m个字节，m由协议地址长度得到，一般为目标IP地址</li></ul><p>前14字节为以太网首部，后28字节为ARP请求/应答</p><h2 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP(传输控制协议)"></a>TCP(传输控制协议)</h2><ul><li>工作在传输层</li><li>实现进程到进程的可靠的数据流传送服务</li><li>标识主机位置：地址(IP)</li><li>标识进程：端口</li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li>客户端（通过执行connect函数）向服务器端发送一个SYN包，请求一个主动打开。该包携带客户端为这个连接请求而设定的随机数X作为消息序列号(seq=X)</li><li>服务器端收到一个合法的SYN包后，把该包放入SYN队列中；回送一个SYN/ACK。ACK的确认码应为X+1，SYN/ACK包本身携带一个随机产生的序号Y(seq=Y,ack=X+1)</li><li>客户端收到SYN/ACK包后，发送一个ACK包，该包的序号被设定为X+1，而ACK的确认码则为Y+1。然后客户端的connect函数成功返回(seq=X+1 ack=Y+1)</li></ul><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><em>貌似不考</em></p><h3 id="数据包-1"><a href="#数据包-1" class="headerlink" title="数据包"></a>数据包</h3><div class="table-container"><table><thead><tr><th style="text-align:center">长度(位)</th><th style="text-align:center">16</th><th style="text-align:center">16</th><th style="text-align:center">32</th><th style="text-align:center">32</th><th style="text-align:center">4</th><th style="text-align:center">6</th><th style="text-align:center">6</th><th style="text-align:center">16</th><th style="text-align:center">16</th><th style="text-align:center">16</th></tr></thead><tbody><tr><td style="text-align:center">数据类型</td><td style="text-align:center">来源连接端口</td><td style="text-align:center">目的连接端口</td><td style="text-align:center">序列号码</td><td style="text-align:center">确认号码</td><td style="text-align:center">资料偏移</td><td style="text-align:center">保留</td><td style="text-align:center">标志位</td><td style="text-align:center">窗口大小</td><td style="text-align:center">校验和</td><td style="text-align:center">紧急指针</td></tr><tr><td style="text-align:center">英文名</td><td style="text-align:center">SOURCE PORT</td><td style="text-align:center">DESTINATION PORT</td><td style="text-align:center"><font color=red>SEQ</font>UENCE NUMBER</td><td style="text-align:center"><font color=red>ACK</font>NOWLEDGEMENT NUMBER</td><td style="text-align:center">OFFSET</td><td style="text-align:center">RESERVED</td><td style="text-align:center">FLAGS</td><td style="text-align:center">WINDOW</td><td style="text-align:center">CHECKSUM</td><td style="text-align:center">URGENT POINTER</td></tr><tr><td style="text-align:center">TCP第一次握手</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">X</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0b000010</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TCP第二次握手</td><td style="text-align:center">B</td><td style="text-align:center">A</td><td style="text-align:center">Y</td><td style="text-align:center">X+1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0b010010</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TCP第三次握手</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">X+1</td><td style="text-align:center">Y+1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0b010000</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h1><h2 id="交换机配置静态路由"><a href="#交换机配置静态路由" class="headerlink" title="交换机配置静态路由"></a>交换机配置静态路由</h2><p>PC<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">C:\&gt;ipconfig /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><br>获取FastEthernet0的物理地址(Physical Address)为<code>00E0.A3BA.8021</code></p><p>交换机<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Switch</span>(config)# mac-address-table static <span class="hljs-number">00</span>E<span class="hljs-number">0</span>.A<span class="hljs-number">3</span>BA.<span class="hljs-number">8021</span> vlan <span class="hljs-number">1</span> interface fa<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><br>即完成了将mac地址为<code>00E0.A3BA.8021</code>的PC与<code>fa0/1</code>端口绑定</p><h2 id="路由器设置端口"><a href="#路由器设置端口" class="headerlink" title="路由器设置端口"></a>路由器设置端口</h2><p>路由器<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Router(<span class="hljs-params">config</span>)</span># interface fa0/<span class="hljs-number">0</span><br><span class="hljs-constructor">Router(<span class="hljs-params">config</span>-<span class="hljs-params">if</span>)</span># ip address <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br></code></pre></td></tr></table></figure><br>完成将<code>fa0/0</code>端口的IP设置为<code>192.168.1.1</code>，掩码为<code>255.255.255.0</code></p><h2 id="三层交换机实现Vlan间通讯"><a href="#三层交换机实现Vlan间通讯" class="headerlink" title="三层交换机实现Vlan间通讯"></a>三层交换机实现Vlan间通讯</h2><div class="table-container"><table><thead><tr><th style="text-align:center">设备</th><th style="text-align:center">属性</th></tr></thead><tbody><tr><td style="text-align:center">PC1</td><td style="text-align:center">IP：192.168.10.10，掩码：255.255.255.0，网关：192.168.10.1</td></tr><tr><td style="text-align:center">PC2</td><td style="text-align:center">IP：192.168.20.10，掩码：255.255.255.0，网关：192.168.20.1</td></tr><tr><td style="text-align:center">PC3</td><td style="text-align:center">IP：192.168.10.20，掩码：255.255.255.0，网关：192.168.10.1</td></tr><tr><td style="text-align:center">PC4</td><td style="text-align:center">IP：192.168.20.20，掩码：255.255.255.0，网关：192.168.20.1</td></tr><tr><td style="text-align:center">交换机1</td><td style="text-align:center">与PC1和PC2连接，分别连在fa0/1 fa0/2口，fa0/3与三层交换机连接</td></tr><tr><td style="text-align:center">交换机2</td><td style="text-align:center">与PC3和PC4连接，分别连在fa0/1 fa0/2口，fa0/3与三层交换机连接</td></tr><tr><td style="text-align:center">三层交换机</td><td style="text-align:center">与交换机1和交换机2连接，分别连在fa0/1 fa0/2口</td></tr></tbody></table></div><p>交换机1<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">enable<br>configure terminal<br>vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">1</span><br>switchport access vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">2</span><br>switchport access vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">3</span><br>switchport mode trunk<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><br>交换机2<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">enable<br>configure terminal<br>vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">1</span><br>switchport access vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">2</span><br>switchport access vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">3</span><br>switchport mode trunk<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><br>交换机3<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">enable<br>configure terminal<br>vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface vlan <span class="hljs-number">10</span><br>ip address <span class="hljs-number">192.168</span>.<span class="hljs-number">10.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-keyword">exit</span><br>interface vlan <span class="hljs-number">20</span><br>ip address <span class="hljs-number">192.168</span>.<span class="hljs-number">20.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-keyword">exit</span><br>ip routing<br></code></pre></td></tr></table></figure></p><h2 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h2><div class="table-container"><table><thead><tr><th style="text-align:center">设备</th><th style="text-align:center">属性</th></tr></thead><tbody><tr><td style="text-align:center">PC1</td><td style="text-align:center">IP：192.168.10.10，掩码：255.255.255.0，网关：192.168.10.1</td></tr><tr><td style="text-align:center">PC2</td><td style="text-align:center">IP：192.168.20.10，掩码：255.255.255.0，网关：192.168.20.1</td></tr><tr><td style="text-align:center">交换机</td><td style="text-align:center">与PC1和PC2连接，分别连在fa0/1 fa0/2口，fa0/3与路由器连接</td></tr><tr><td style="text-align:center">路由器</td><td style="text-align:center">与交换机连接，连在fa0/0口</td></tr></tbody></table></div><p>交换机<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">enable<br>configure terminal<br>vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">1</span><br>switchport access vlan <span class="hljs-number">10</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">2</span><br>switchport access vlan <span class="hljs-number">20</span><br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">3</span><br>switchport mode trunk<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><br>路由器<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">enable<br>configure terminal<br>interface fa0/<span class="hljs-number">0</span><br>no shutdown<br>interface fa0/<span class="hljs-number">0.1</span><br>encapsulation dot1Q <span class="hljs-number">10</span><br>ip address <span class="hljs-number">192.168</span>.<span class="hljs-number">10.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>no shutdown<br><span class="hljs-keyword">exit</span><br>interface fa0/<span class="hljs-number">0.2</span><br>encapsulation dot1Q <span class="hljs-number">20</span><br>ip address <span class="hljs-number">192.168</span>.<span class="hljs-number">20.1</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>no shutdown<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>课程</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL1 使用 Docker 一直无法启动</title>
    <link href="/2020/12/24/develop-note/wsl-docker/"/>
    <url>/2020/12/24/develop-note/wsl-docker/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>WSL1 无法正常启动 Dokcer，Dokcer一直处于 not running 状态</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>WSL1 是伪 Linux，实际上仍然是 Windows 底层，而 Docker 是基于系统底层实现的，这就导致了无法在 Windows(WSL1) 上运行 Linux 版本的 Dokcer<br>使用 WSL2 则可以正常使用 Docker，目前上述问题在不使用 WSL2 的情况下，暂时无法解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>短笔记</tag>
      
      <tag>WSL</tag>
      
      <tag>Dokcer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的ACM脚印</title>
    <link href="/2020/12/21/acm/myACM/"/>
    <url>/2020/12/21/acm/myACM/</url>
    
    <content type="html"><![CDATA[<p>2020年12月20日，南京区域赛结束，同时结束的，还有我的两年多的ACM生涯<br>接下来的寒假重心会向着找实习的方向努力，当然明年还有线下的区域赛、EC-finial以及明年的省赛等等，我都会去认真准备。</p><h1 id="这篇文章会写什么"><a href="#这篇文章会写什么" class="headerlink" title="这篇文章会写什么"></a>这篇文章会写什么</h1><ul><li>关于我<ul><li>我的ACM简单的回顾</li><li>我的ACM成绩</li></ul></li><li>写给新人<ul><li>ACM到底和数学建模、挑战杯等等的其他竞赛有什么区别</li><li>ACM到底带给我什么了</li><li>为什么要打ACM</li><li>什么样的人适合去打ACM，什么样的人不适合去打ACM</li></ul></li><li>写给已经进入了ACM的人<ul><li>我在ACM的训练计划</li><li>除了ACM之外的计划</li></ul></li><li>关于ACM写题<ul><li>ACM算法的学习规划</li><li>我的一些经验之谈</li></ul></li></ul><p>这篇文章更多的是想来自我总结一下历史，如果与你的理解有出入也请见谅</p><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="我的ACM简单的回顾"><a href="#我的ACM简单的回顾" class="headerlink" title="我的ACM简单的回顾"></a>我的ACM简单的回顾</h2><h3 id="进入大学之前"><a href="#进入大学之前" class="headerlink" title="进入大学之前"></a>进入大学之前</h3><p>我是2018年进入的大学，在这之前，我压根没有听说过ACM，也完全不知道这类竞赛，高中也是没有打过OI，也就是真正的纯粹的小白。当然，我的高中压根就不知道有什么叫OI的比赛，可能这就是所谓的省B类学校吧</p><p>但是我有优势，我从高一开始自学了程序，我当时想自己写游戏，然后学起来Unity了，也就顺便学了C#。至于优势，大概就是对程序有了自己的理解吧。如果让我对代码理解这个事情上进行一个分级的话，我会这样分：</p><ul><li>完全不会程序（基本上就是那些完全没有学过代码的人）</li><li>学会了顺序、选择、循环语句（一般是刚刚开始学程序的人，对程序是万能的这条表示怀疑的人）</li><li>能够灵活的运用上述三种语句（突然发现仅使用这三种语句居然可以实现一切逻辑，相信代码是万能的，只是需要写代码的。通常这类人同样相信代码是高效的，认为所有的事情基本上都可以在电脑上花费一小段的时间就能得出结果）</li><li>知道了代码是非常局限的，计算机能计算的速度是非常有限的，在解决一个问题前会思考这个问题的逻辑，对这个问题进行优化以适合计算机去运行，这类人也就是一个ACMer的入门点</li></ul><p>而那时候的我，大概就是第三类的人，比起同时期的同学，只能说我拥有着非常好的起点</p><p>但是，实际上，通过一个学期的学习，基本上所有的学生都能到达这个水平</p><h3 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h3><p>大学的第一个学期，课程安排是学C语言，但是我其实并不需要，因为这些东西只需要我把我学C#的知识转成C就行了</p><p>而这个学期，校集训队也联系上了我，只不过因为我有提前的知识了，虽然我在那个时候还完全不知道对于代码还有第四层理解<br>当然，慢慢的我也接触到了很多算法，例如dfs、bfs之类的，只能说我在那个时候对ACM的理解还存在于ACM是提供更多的解决问题的办法而已<br>后来，学到了在ACM中最重要的东西：复杂度<br>也慢慢的开始学习到各种基础的算法：gcd、最短路、背包问题、KMP等等之类的</p><p>后来，我在大一快结束的时候，和另外两位大一参加了西安邀请赛，然后成功打铁……<br>紧接着是校赛，但是那次校赛的难度太高，导致全场只有20个人过题，我有幸过了两题。但是我和之前组队的两个大一的同学分开了队伍。<br>然后是浙江省省赛，和两个大二的人组队，然后继续打铁<br>再接下来是南昌邀请赛，我终于拿到了人生以来的第一个奖牌：铜</p><p>然后就是整整一个暑假的集训，杭电的多校、牛客的多校，题目的难度对于当时我而言，未免是过高了一些。那两个月，可谓是绝对的自闭</p><h3 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h3><p>大二开始，大概是因为经历了暑假的自闭式训练，拿下了一个ICPC的区域赛银牌，虽然是银川偷鸡，但基本上是我一个人完成的比赛，而且其实本来很有希望冲击金牌</p><p>大二下半学期，因为疫情的原因，荒废了很久，没有出去打比赛，只能说是不断的学习吧。<br>也趁着疫情，顺便把CodeForces上把我的两个账号都刷到了紫名</p><p>当然，因为写的题多了，代码写的多了，感觉自己写题目的习惯开始发生了改变，特别是经常打CodeForces后，感觉自己对很多思维的理解在不断的加深。大一选择了图论方向，大二开始学数据结构，然后再学了字符串，稍微了解了dp，队内也把构造题的任务分配给了我</p><h3 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h3><p>这个学期难得有了好多场比赛，而我们原来参加了西安邀请赛的三个人，我们重新组成了完整的队伍，也夺下了省赛银牌、CCPC威海铜牌、ICPC南京银牌这样三个牌。</p><h2 id="我的ACM成绩"><a href="#我的ACM成绩" class="headerlink" title="我的ACM成绩"></a>我的ACM成绩</h2><p>到目前为止，总共拿下了两个ICPC区域赛银牌，一个CCPC的铜牌，一个浙江省省赛银牌，一个ICPC邀请赛铜牌，Codeforces两个账号都是紫名，准备寒假冲击橙名。接下来会参加一场线下的ICPC比赛以及EC-finial。未来可能在能够拿到offer的情况下，继续回来参加ACM竞赛</p><h1 id="写给新人"><a href="#写给新人" class="headerlink" title="写给新人"></a>写给新人</h1><h2 id="ACM到底和数学建模、挑战杯等等的其他竞赛有什么区别"><a href="#ACM到底和数学建模、挑战杯等等的其他竞赛有什么区别" class="headerlink" title="ACM到底和数学建模、挑战杯等等的其他竞赛有什么区别"></a>ACM到底和数学建模、挑战杯等等的其他竞赛有什么区别</h2><p>如果你是计算机学院的，那么你需要追求的、考虑的唯一的竞赛就是ACM</p><p>ACM是一个非常全面的竞赛，如果你说你只是喜欢数学，那么ACM比数学建模之类的数学竞赛更加具有挑战性，同样，难度更高。对的，在我的认知中，ACM对数学的要求甚至远远高于数学竞赛。因为ACM和其他比赛不一样的一点，便是ACM不设置任何的知识点上界，越新的知识点，越高级的知识点，ACM都可以考。甚至任何一道数学竞赛的题，如果你在ACM中见到，都是合情合理的。在打ACM的时候，这个知识点不会的情况是很正常的，是所有参加了ACM竞赛的人可以深切感受到的。而如果你只是去打数学之类的竞赛，如果你不能到达一个很高的层次，你可能很难体会到那种，自己完全不会，完全是毫无能力的那种绝望感。而在ACM，你可以在任何一场比赛中见到，甚至是随便在点开的一场比赛。</p><p>其次，ACM是一个非常公平、公正同时也是非常严格、残酷的比赛，甚至因为它的机制，你可以认为它是你整个大学生涯中见到过，最公平，也是唯一一个能够让参赛选手心服口服的比赛。因为ACM几乎不存在任何的主观因素，你只有准确完整的解决这个问题，你才能拿到那么一点成绩分。而且ACM系列竞赛结束，如果这场比赛有任何一道题有一些问题，通常出题人都会出面道歉。这也是我第一次知道，原来负责出题的人也是要道歉的。从那样的高考制度过来，我们甚至都不会去关心出题人是谁，即使他出了岔子，也会有专门的公关来解决。ACM却没有这些无聊的内容。</p><p>数学建模也好，挑战杯也罢，评委老师评分制意味着主观可以胜过客观，甚至，到最后可能变成了PPT大赛。如果说这类竞赛的好处，我觉得除了给你提高了拿到奖学金的可能性，对于自身能力的提升以及后续的工作而言甚至意义并不大。而奖学金，能比得上你找到一个好工作后在一个月内赚的钱多吗？你难道能一辈子拿奖学金过日子吗？当然这样的人是存在的，但是我相信大多数读者也和我一样，觉得这是一种奢望。</p><h2 id="ACM到底带给我什么了"><a href="#ACM到底带给我什么了" class="headerlink" title="ACM到底带给我什么了"></a>ACM到底带给我什么了</h2><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>我在ACM集训队的第一周，我所得到的知识，是我的室友们在大学四年内都可能会学不清楚、理不通的知识，而那些知识点，在我经历了两年多的ACM训练后觉得，这些只不过应该是理所当然会的、最基本的知识。这些知识点带给我的财富，是我在经历了四五个项目后，才意识到的我们与其他人的差距。ACM的知识点，只要你未来是做计算机行业的，那么它一定会在每一个角落里发挥着它的作用。</p><h3 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h3><p>ACM的题，对一个人的思维能力的提升有着非常恐怖的作用。特别是当你频繁的打Codeforces比赛时，你会深切的体会到自己的思维能力在以非常恐怖的速度进步。而与思维能力直接挂钩的，便是逻辑思路以及问题的敏感性。如果有人去看过杜老师的Codeforces录播视频，看过tourist的比赛视频，你会发现他们基本上并不会去论证一个方法的可行性，他们通常在读到这道题的时候，会反应过来这题“好像这样搞搞”、“在随便暴力一下”、“应该就对了”。这样的思路也正是我现在打Codeforces的一种感觉，当然我还不能到达杜老师这样对于这么难的题也可以如此轻松的想出解法，但是我仍然觉得我思考问题的思路和方向变得非常的开阔，而且思考问题的逻辑自然变得严谨合理。</p><h3 id="代码实现能力"><a href="#代码实现能力" class="headerlink" title="代码实现能力"></a>代码实现能力</h3><p>ACM的题，难度较高的题，有些需要各种数据结构的嵌套，需要各种开辟各种奇奇怪怪的数组。而你需要在短时间内完成代码的编写和调试，这无疑是对代码能力的直接挑战。例如Codeforces，5道题目只有两个小时，除掉读题（纯英文题面）和思考问题的时间，你又有多少时间可以来写代码调试代码呢？当室友还在为编译出错烦恼时，我们基本就不需要调试百行代码以下的程序，因为只需要简单的测试证明其确实没有错误即可。</p><h3 id="ACM朋友圈"><a href="#ACM朋友圈" class="headerlink" title="ACM朋友圈"></a>ACM朋友圈</h3><p>ACM届有一个最高级别的竞赛，被称为WF（world finial）——世界总决赛。这场比赛的含金量有多高？也许有人会说，最多也就是拿到金牌可以全球500强随意挑。但是，实际上只需要你碰到了这个比赛的边界，你只要有幸被邀请参加了这场比赛，不论你的名次，这个星球上的企业你已经可以随意选了，而且本科毕业就可以去工作的那种。而我们平时聊天水群，里面有的是因为ACM成绩优异而进入Google中国、微软亚洲研究院的人。而对于正常学业而言，各位也应该知道你需要读多少年的书才有胆量往这些企业中投递一份简历</p><h3 id="学长学姐"><a href="#学长学姐" class="headerlink" title="学长学姐"></a>学长学姐</h3><p>通常能坚持下来打ACM的都是能够在思维、能力、勤奋或者智商上略胜一筹的人，那么和这样的学长学姐在同一个实验室的屋檐下打比赛，你能得到的帮助和支持，远远超过参加社团带来的收益。</p><h3 id="直面清北复交"><a href="#直面清北复交" class="headerlink" title="直面清北复交"></a>直面清北复交</h3><p>ACM竞赛是所有队伍在相同地点使用相同设备在相同的时间内解决相同的题目。</p><p>而你的对手则是来自全国的大学，对，北大清华每年都会来，而且非常重视。</p><p>ACM从来就没有院赛、校赛、省赛等等一大堆乱七八糟的东西，虽然他们确实存在但是他们并不是被官方承认的。ACM只有区域赛，（比如Asia-East东亚地区），区域总决赛（比如EC-finial，东亚地区总决赛），和世界总决赛（WF）。无论在哪个比赛，你都可能会遇到任何一个学校的队伍。所以在这样的比赛中，你可以很清楚的知道自己的水平在全地区范围内的位置，对自己的能力有一个更好的评估，能够看到外面更加广阔的天空。而不是拘泥于那么小的一个地区，争夺那么毫无意义的第一名</p><h2 id="为什么要打ACM"><a href="#为什么要打ACM" class="headerlink" title="为什么要打ACM"></a>为什么要打ACM</h2><p>因为我要证明我自己</p><p>在ACM比赛中，你会真实的，亲身和北大清华等等高校在同一个体育馆里，使用相同的设备相同的时间来解决相同的问题。那么你为什么不去证明自己比他们强？我知道这通常不可能，因为他们也会派出他们最强的队伍来与你们竞技。但是我们需要的就是在这么多的强队中，证明我们自己的能力。在计算机领域内最有影响力的比赛中，证明自己而已</p><h2 id="什么样的人适合去打ACM，什么样的人不适合去打ACM"><a href="#什么样的人适合去打ACM，什么样的人不适合去打ACM" class="headerlink" title="什么样的人适合去打ACM，什么样的人不适合去打ACM"></a>什么样的人适合去打ACM，什么样的人不适合去打ACM</h2><p>ACM竞赛是一个需要大量的时间去投入，但是到很久之后才会有结果的产出。这和其他竞赛不同，数学建模通常你只需要很短的时间训练就能拿出成绩，而一个ACMer，在大三之前甚至可能都没有一点点成果。但是你在大一大二的投入终将会给你在大二下至大三上的时候带来丰富的回报。</p><p>这样的回报，需要愿意投资的人耐心投资才有可能赚得盆满钵满，一旦出现懈怠都有可能颗粒无收。<strong>耐心、专注、勤奋、自觉</strong>这些是一个ACMer必须要具备的因素。</p><h1 id="写给已经进入了ACM的人"><a href="#写给已经进入了ACM的人" class="headerlink" title="写给已经进入了ACM的人"></a>写给已经进入了ACM的人</h1><h2 id="我在ACM的训练计划"><a href="#我在ACM的训练计划" class="headerlink" title="我在ACM的训练计划"></a>我在ACM的训练计划</h2><ul><li>保持在Codeforces的个人刷题，最好是现场比赛，其次是复现比赛。Codeforces对训练一个人的思维能力有者极大的帮助作用，而且其出题非常的新颖，是我认为最适合ACMer进行个人训练的平台。Codeforces的思维题数量非常庞大，而且非常的有趣。正式的区域赛等比赛，通常思维题也会占据很大一部分比重。</li><li>队伍内保持至少一周一场往年比赛的复现赛，我们队在长达几个月的集训时间内保持了一周两场比赛且不耽误正常课程。</li><li>当你决定要写ACM题时，请不要断开，也尽可能避免使用碎片化的时间学习，这对学习的进度没有任何帮助，除非你只是突然需要回忆一个知识点。</li><li>在实验室内写题而不是在寝室或者图书馆或者其他任何地方写题。</li></ul><h2 id="除了ACM之外的计划"><a href="#除了ACM之外的计划" class="headerlink" title="除了ACM之外的计划"></a>除了ACM之外的计划</h2><p>ACM毕竟只是我们大学的一个工具，我们希望它能够服务于我们找工作、服务于我们在其他领域的发展。不可以把ACM当成是自己在大学里唯一执着的对象，甚至把它树立为人生目标，这不合实际也没有意义，反而会影响你的正常社交与生活，这不应该是一个人的目标。</p><h1 id="关于ACM写题"><a href="#关于ACM写题" class="headerlink" title="关于ACM写题"></a>关于ACM写题</h1><h2 id="ACM算法的学习规划"><a href="#ACM算法的学习规划" class="headerlink" title="ACM算法的学习规划"></a>ACM算法的学习规划</h2><p>在经历了两年多的学习之后我发现，其实很多的算法并没有太多的学习意义，或者说不必要为其投入过多的经历去学习。<br>我是负责队伍内的图论+字符串，以及构造题思维题，会数据结构，了解dp和树上问题。<br>另外一位队友负责计算几何和博弈论，以及数论，会dp，了解图论和树上问题<br>还有一位队友负责了数据结构和dp，以及树上问题，会数论，了解图论<br>基本上可以说是覆盖了所有的知识面，而且大部分知识面都是有多个人会。</p><p>我以我熟悉的图论为例，诸如“最大流”这些个算法，通常对于一个银牌队伍而言，其实学习的意义并不大。因为我至今未见到过最大流题的难度低于金牌题的（按照实际区域赛出题情况）相反，灵活的结合思维和拓扑排序，你会发现图论问题变得非常简单。很多区域赛的图论的铜牌题在你眼里变成了暴力傻逼题。这是对于一个图论选手在频繁使用图论相关的知识点的时候自然而然形成的。</p><p>我认为把学习那些过高的知识点重要性低于去熟练掌握最基本的算法的内容。</p><p>对于字符串也一样，上一次看到“回文树”是在复现赛上看到的，是一道金牌题，虽然对于会“回文树”的队伍而言相对简单很多，但是作为一道金牌题，很多时候在比赛现场可能根本没有时间去看这样一道题。</p><p>当然你的队伍是为了冲金牌的，这些知识点当然也应该成为你的必须知识点之一。</p><h2 id="我的一些经验之谈"><a href="#我的一些经验之谈" class="headerlink" title="我的一些经验之谈"></a>我的一些经验之谈</h2><ul><li>看题一定要看数据，通过数据大小猜测算法的复杂度，再去考虑可能的算法逻辑。通常为了卡掉错误的算法，正确算法的复杂度应该在$1e6-1e8$之间，前者考虑可能有很大的常数的复杂度，后者则是最差的不可能发生的情况下的复杂度。</li><li>队伍内除了在最后冲刺的时候，其他时间内务必保证多开，无论何时也不要三个人讨论同一个问题，即使你们现在被榜丢下了。甚至很多时候可以尝试三开</li><li>队伍中每个人都应该具备非常良好的代码能力，除非你们队伍中专门有数学专业的人帮忙</li></ul><p>Shiroha @2020.12.21凌晨1点30分</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
